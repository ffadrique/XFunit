<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_xfunit_unit.f90">
    <context>
        <time>2025-03-09T17:50:33</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>XFunit</project>
        <name>m_xfunit_unit.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_xfunit_unit" type="module">
            <main>
                <lines>
                    <source percent="5.19">7</source>
                    <comments percent="47.41">64</comments>
                    <empty percent="47.41">64</empty>
                    <total>135</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="xfunit_unit_assert_array_false_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_array_false_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_array_false_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_array_true_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_array_true_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_array_true_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_integer_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_integer_k1_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="35.29">12</source>
                            <comments percent="29.41">10</comments>
                            <empty percent="35.29">12</empty>
                            <total>34</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_integer_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_integer_k2_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="35.29">12</source>
                            <comments percent="29.41">10</comments>
                            <empty percent="35.29">12</empty>
                            <total>34</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_integer_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_integer_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="35.29">12</source>
                            <comments percent="29.41">10</comments>
                            <empty percent="35.29">12</empty>
                            <total>34</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_integer_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">13</source>
                            <comments percent="30.77">12</comments>
                            <empty percent="35.90">14</empty>
                            <total>39</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_integer_k8_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">13</source>
                            <comments percent="30.77">12</comments>
                            <empty percent="35.90">14</empty>
                            <total>39</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_real_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_real_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="35.29">12</source>
                            <comments percent="29.41">10</comments>
                            <empty percent="35.29">12</empty>
                            <total>34</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_real_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">13</source>
                            <comments percent="30.77">12</comments>
                            <empty percent="35.90">14</empty>
                            <total>39</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_array_real_k8_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">13</source>
                            <comments percent="30.77">12</comments>
                            <empty percent="35.90">14</empty>
                            <total>39</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_integer_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_integer_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_integer_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_integer_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">13</source>
                            <comments percent="30.77">12</comments>
                            <empty percent="35.90">14</empty>
                            <total>39</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_real_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_between_real_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">13</source>
                            <comments percent="30.77">12</comments>
                            <empty percent="35.90">14</empty>
                            <total>39</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_compare_files_character" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_compare_files_string" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_character" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="32.43">12</source>
                            <comments percent="32.43">12</comments>
                            <empty percent="35.14">13</empty>
                            <total>37</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_character_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="32.43">12</source>
                            <comments percent="32.43">12</comments>
                            <empty percent="35.14">13</empty>
                            <total>37</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_class" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">12</source>
                            <comments percent="30.56">11</comments>
                            <empty percent="36.11">13</empty>
                            <total>36</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_class_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">12</source>
                            <comments percent="30.56">11</comments>
                            <empty percent="36.11">13</empty>
                            <total>36</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_complex_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="43.75">14</source>
                            <comments percent="25.00">8</comments>
                            <empty percent="31.25">10</empty>
                            <total>32</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_complex_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="43.75">14</source>
                            <comments percent="25.00">8</comments>
                            <empty percent="31.25">10</empty>
                            <total>32</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_complex_k4_thr" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="35.71">10</source>
                            <comments percent="28.57">8</comments>
                            <empty percent="35.71">10</empty>
                            <total>28</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_complex_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_complex_k8_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_complex_k8_thr" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_integer_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_integer_k1_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_integer_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_integer_k2_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_integer_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_integer_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_integer_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="39.13">18</source>
                            <comments percent="26.09">12</comments>
                            <empty percent="34.78">16</empty>
                            <total>46</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_integer_k8_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">10</source>
                            <comments percent="30.00">9</comments>
                            <empty percent="36.67">11</empty>
                            <total>30</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_logical_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_logical_k1_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_logical_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_logical_k2_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_logical_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">10</source>
                            <comments percent="30.00">9</comments>
                            <empty percent="36.67">11</empty>
                            <total>30</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_logical_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">10</source>
                            <comments percent="30.00">9</comments>
                            <empty percent="36.67">11</empty>
                            <total>30</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_real_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="41.94">13</source>
                            <comments percent="25.81">8</comments>
                            <empty percent="32.26">10</empty>
                            <total>31</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_real_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="41.94">13</source>
                            <comments percent="25.81">8</comments>
                            <empty percent="32.26">10</empty>
                            <total>31</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_real_k4_thr" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_real_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_real_k8_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_real_k8_thr" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_string" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="32.43">12</source>
                            <comments percent="32.43">12</comments>
                            <empty percent="35.14">13</empty>
                            <total>37</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_array_string_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="32.43">12</source>
                            <comments percent="32.43">12</comments>
                            <empty percent="35.14">13</empty>
                            <total>37</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_character" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="32.43">12</source>
                            <comments percent="32.43">12</comments>
                            <empty percent="35.14">13</empty>
                            <total>37</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_class" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">12</source>
                            <comments percent="30.56">11</comments>
                            <empty percent="36.11">13</empty>
                            <total>36</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_complex_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="40.63">13</source>
                            <comments percent="28.13">9</comments>
                            <empty percent="31.25">10</empty>
                            <total>32</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_complex_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_integer_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="30.77">8</source>
                            <comments percent="30.77">8</comments>
                            <empty percent="38.46">10</empty>
                            <total>26</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_integer_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_integer_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_integer_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">10</source>
                            <comments percent="30.00">9</comments>
                            <empty percent="36.67">11</empty>
                            <total>30</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_logical_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_logical_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_logical_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">10</source>
                            <comments percent="30.00">9</comments>
                            <empty percent="36.67">11</empty>
                            <total>30</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_class" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">12</source>
                            <comments percent="30.56">11</comments>
                            <empty percent="36.11">13</empty>
                            <total>36</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_class_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">12</source>
                            <comments percent="30.56">11</comments>
                            <empty percent="36.11">13</empty>
                            <total>36</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_integer_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_integer_k1_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_integer_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_integer_k2_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_integer_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_integer_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_integer_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">10</source>
                            <comments percent="30.00">9</comments>
                            <empty percent="36.67">11</empty>
                            <total>30</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_integer_k8_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">10</source>
                            <comments percent="30.00">9</comments>
                            <empty percent="36.67">11</empty>
                            <total>30</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_real_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="41.94">13</source>
                            <comments percent="25.81">8</comments>
                            <empty percent="32.26">10</empty>
                            <total>31</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_real_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="39.39">13</source>
                            <comments percent="27.27">9</comments>
                            <empty percent="33.33">11</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_real_k4_thr" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_real_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_real_k8_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="40.54">15</source>
                            <comments percent="27.03">10</comments>
                            <empty percent="32.43">12</empty>
                            <total>37</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_matrix_real_k8_thr" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_real_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="41.94">13</source>
                            <comments percent="25.81">8</comments>
                            <empty percent="32.26">10</empty>
                            <total>31</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_real_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_equal_string" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="32.43">12</source>
                            <comments percent="32.43">12</comments>
                            <empty percent="35.14">13</empty>
                            <total>37</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_fail" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_false_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_false_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_false_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_integer_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_integer_k1_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_integer_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_integer_k2_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_integer_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_integer_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_integer_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_integer_k8_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_real_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_real_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_real_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_array_real_k8_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_integer_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_integer_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_integer_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_integer_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_real_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_greater_real_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_integer_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_integer_k1_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_integer_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_integer_k2_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_integer_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_integer_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_integer_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_integer_k8_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_real_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_real_k4_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_real_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_array_real_k8_common" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_integer_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_integer_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_integer_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_integer_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_real_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_less_real_k8" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">11</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_pass" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_true_k1" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_true_k2" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assert_true_k4" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_assign_xfunit_unit" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="64.71">22</source>
                            <comments percent="14.71">5</comments>
                            <empty percent="20.59">7</empty>
                            <total>34</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_character" type="function">
                    <statistics>
                        <lines>
                            <source percent="46.15">30</source>
                            <comments percent="26.15">17</comments>
                            <empty percent="27.69">18</empty>
                            <total>65</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>5</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_equal" type="function">
                    <statistics>
                        <lines>
                            <source percent="30.00">6</source>
                            <comments percent="30.00">6</comments>
                            <empty percent="40.00">8</empty>
                            <total>20</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_error" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="45.45">15</source>
                            <comments percent="24.24">8</comments>
                            <empty percent="30.30">10</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_execute" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="41.03">16</source>
                            <comments percent="25.64">10</comments>
                            <empty percent="33.33">13</empty>
                            <total>39</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_get_elapsed" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_get_failed_assertions" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_get_msg_ptr" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_get_name" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_get_passed_assertions" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_get_skip" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_get_total_assertions" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_greater" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_is_errored" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_is_executed" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_is_passed" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_less" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_process_assertion" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="52.63">20</source>
                            <comments percent="21.05">8</comments>
                            <empty percent="26.32">10</empty>
                            <total>38</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>5</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_set_skip" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">10</source>
                            <comments percent="30.00">9</comments>
                            <empty percent="36.67">11</empty>
                            <total>30</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_write" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="40.00">12</source>
                            <comments percent="26.67">8</comments>
                            <empty percent="33.33">10</empty>
                            <total>30</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_unit_write_xml" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="51.32">39</source>
                            <comments percent="21.05">16</comments>
                            <empty percent="27.63">21</empty>
                            <total>76</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>6</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="34.16">1575</source>
                    <comments percent="29.60">1365</comments>
                    <empty percent="36.24">1671</empty>
                    <total>4611</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>6</maximum>
                    <average>1.26</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>3</maximum>
                    <average>1.11</average>
                </nesting>
                <methods>154</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="34.16">1575</source>
            <comments percent="29.60">1365</comments>
            <empty percent="36.24">1671</empty>
            <total>4611</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>6</maximum>
            <average>1.26</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>3</maximum>
            <average>1.11</average>
        </nesting>
        <methods>154</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_xfunit_unit</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2025, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : Unit test top level implementation and interface</line>
        <line t="C" i="9" b="0" n="0">!</line>
        <line t="C" i="10" b="0" n="0">! License   : This file is part of XFunit.</line>
        <line t="C" i="11" b="0" n="0">!</line>
        <line t="C" i="12" b="0" n="0">!             XFunit is free software: you can redistribute it and/or modify</line>
        <line t="C" i="13" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="14" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="15" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="16" b="0" n="0">!</line>
        <line t="C" i="17" b="0" n="0">!             XFunit is distributed in the hope that it will be useful,</line>
        <line t="C" i="18" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="19" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="20" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="21" b="0" n="0">!</line>
        <line t="C" i="22" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="23" b="0" n="0">!             License along with XFunit.  </line>
        <line t="C" i="24" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="25" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="26" b="0" n="0"></line>
        <line t="C" i="27" b="0" n="0">!---USE statements--------------------------------------------------------------</line>
        <line t="C" i="28" b="0" n="0"></line>
        <line t="X" i="29" b="0" n="0">  use m_object</line>
        <line t="X" i="30" b="0" n="0">  use m_string</line>
        <line t="X" i="31" b="0" n="0">  use m_messages</line>
        <line t="X" i="32" b="0" n="0"></line>
        <line t="X" i="33" b="0" n="0">  use m_xml</line>
        <line t="X" i="34" b="0" n="0"></line>
        <line t="X" i="35" b="0" n="0">  use m_xfunit_assertion</line>
        <line t="X" i="36" b="0" n="0">  use m_xfunit_assertion_array</line>
        <line t="X" i="37" b="0" n="0"></line>
        <line t="X" i="38" b="0" n="0">  use m_xfunit_assertion_integer</line>
        <line t="X" i="39" b="0" n="0">  use m_xfunit_assertion_real</line>
        <line t="X" i="40" b="0" n="0">  use m_xfunit_assertion_complex</line>
        <line t="X" i="41" b="0" n="0">  use m_xfunit_assertion_character</line>
        <line t="X" i="42" b="0" n="0">  use m_xfunit_assertion_string</line>
        <line t="X" i="43" b="0" n="0">  use m_xfunit_assertion_logical</line>
        <line t="X" i="44" b="0" n="0">  use m_xfunit_assertion_class</line>
        <line t="X" i="45" b="0" n="0">  use m_xfunit_assertion_pass</line>
        <line t="X" i="46" b="0" n="0">  use m_xfunit_assertion_fail</line>
        <line t="X" i="47" b="0" n="0"></line>
        <line t="X" i="48" b="0" n="0">  use m_xfunit_assertion_integer_between</line>
        <line t="X" i="49" b="0" n="0">  use m_xfunit_assertion_real_between</line>
        <line t="X" i="50" b="0" n="0"></line>
        <line t="X" i="51" b="0" n="0">  use m_xfunit_assertion_integer_greater</line>
        <line t="X" i="52" b="0" n="0">  use m_xfunit_assertion_real_greater</line>
        <line t="X" i="53" b="0" n="0"></line>
        <line t="X" i="54" b="0" n="0">  use m_xfunit_assertion_integer_less</line>
        <line t="X" i="55" b="0" n="0">  use m_xfunit_assertion_real_less</line>
        <line t="X" i="56" b="0" n="0"></line>
        <line t="X" i="57" b="0" n="0">  use m_xfunit_assertion_array_integer</line>
        <line t="X" i="58" b="0" n="0">  use m_xfunit_assertion_array_real</line>
        <line t="X" i="59" b="0" n="0">  use m_xfunit_assertion_array_complex</line>
        <line t="X" i="60" b="0" n="0">  use m_xfunit_assertion_array_character</line>
        <line t="X" i="61" b="0" n="0">  use m_xfunit_assertion_array_string</line>
        <line t="X" i="62" b="0" n="0">  use m_xfunit_assertion_array_logical</line>
        <line t="X" i="63" b="0" n="0">  use m_xfunit_assertion_array_class</line>
        <line t="X" i="64" b="0" n="0"></line>
        <line t="X" i="65" b="0" n="0">  use m_xfunit_assertion_array_integer_between</line>
        <line t="X" i="66" b="0" n="0">  use m_xfunit_assertion_array_real_between</line>
        <line t="X" i="67" b="0" n="0"></line>
        <line t="X" i="68" b="0" n="0">  use m_xfunit_assertion_array_integer_greater</line>
        <line t="X" i="69" b="0" n="0">  use m_xfunit_assertion_array_real_greater</line>
        <line t="X" i="70" b="0" n="0"></line>
        <line t="X" i="71" b="0" n="0">  use m_xfunit_assertion_array_integer_less</line>
        <line t="X" i="72" b="0" n="0">  use m_xfunit_assertion_array_real_less</line>
        <line t="X" i="73" b="0" n="0"></line>
        <line t="X" i="74" b="0" n="0">  use m_xfunit_assertion_matrix_integer</line>
        <line t="X" i="75" b="0" n="0">  use m_xfunit_assertion_matrix_real</line>
        <line t="X" i="76" b="0" n="0">  use m_xfunit_assertion_matrix_class</line>
        <line t="X" i="77" b="0" n="0"></line>
        <line t="X" i="78" b="0" n="0">  use m_xfunit_assertion_files</line>
        <line t="X" i="79" b="0" n="0"></line>
        <line t="X" i="80" b="0" n="0">  use m_xfunit_report</line>
        <line t="X" i="81" b="0" n="0"></line>
        <line t="C" i="82" b="0" n="0">!---End of use statements-------------------------------------------------------</line>
        <line t="C" i="83" b="0" n="0"></line>
        <line t="X" i="84" b="0" n="0">  implicit none</line>
        <line t="X" i="85" b="0" n="0"></line>
        <line t="C" i="86" b="0" n="0">!---Public/Private declarations-------------------------------------------------</line>
        <line t="C" i="87" b="0" n="0"></line>
        <line t="X" i="88" b="0" n="0">  private</line>
        <line t="X" i="89" b="0" n="0"></line>
        <line t="X" i="90" b="0" n="0">  public t_xfunit_unit</line>
        <line t="X" i="91" b="0" n="0"></line>
        <line t="X" i="92" b="0" n="0">  public xfunit_unit</line>
        <line t="X" i="93" b="0" n="0"></line>
        <line t="X" i="94" b="0" n="0">  public xfunit_character_match_exact, &amp;</line>
        <line t="X" i="95" b="0" n="0">         xfunit_character_match_global, &amp;</line>
        <line t="X" i="96" b="0" n="0">         xfunit_character_match_regexp</line>
        <line t="X" i="97" b="0" n="0"></line>
        <line t="C" i="98" b="0" n="0">!---End of public/private declarations------------------------------------------</line>
        <line t="C" i="99" b="0" n="0"></line>
        <line t="C" i="100" b="0" n="0">!---Declaration of module variables---------------------------------------------</line>
        <line t="C" i="101" b="0" n="0"></line>
        <line t="C" i="102" b="0" n="0">! The character and string matching strategies (for character and strinc assertions)</line>
        <line t="X" i="103" b="0" n="0">  integer, parameter :: xfunit_character_match_exact = xfunit_assertion_character_match_exact</line>
        <line t="X" i="104" b="0" n="0">  integer, parameter :: xfunit_character_match_global = xfunit_assertion_character_match_global</line>
        <line t="X" i="105" b="0" n="0">  integer, parameter :: xfunit_character_match_regexp = xfunit_assertion_character_match_regexp</line>
        <line t="X" i="106" b="0" n="0"></line>
        <line t="C" i="107" b="0" n="0">! The unit test case class</line>
        <line t="T" i="108" b="0" n="0">  type, extends(t_object) :: t_xfunit_unit</line>
        <line t="X" i="109" b="0" n="0">    private</line>
        <line t="X" i="110" b="0" n="0"></line>
        <line t="C" i="111" b="0" n="0">!     Unit test name</line>
        <line t="X" i="112" b="0" n="0">      type(t_string) :: name</line>
        <line t="X" i="113" b="0" n="0"></line>
        <line t="C" i="114" b="0" n="0">!     Unit test annotation</line>
        <line t="X" i="115" b="0" n="0">      type(t_string) :: annotation</line>
        <line t="X" i="116" b="0" n="0"></line>
        <line t="C" i="117" b="0" n="0">!     Class name covered by the unit test</line>
        <line t="X" i="118" b="0" n="0">      type(t_string) :: classname</line>
        <line t="X" i="119" b="0" n="0"></line>
        <line t="C" i="120" b="0" n="0">!     Flag to skip the test (user selected)</line>
        <line t="X" i="121" b="0" n="0">      logical :: skip = .false.</line>
        <line t="X" i="122" b="0" n="0">      </line>
        <line t="C" i="123" b="0" n="0">!     Flag for test execution</line>
        <line t="X" i="124" b="0" n="0">      logical :: executed = .false.</line>
        <line t="X" i="125" b="0" n="0"></line>
        <line t="C" i="126" b="0" n="0">!     Count of passed assertions</line>
        <line t="X" i="127" b="0" n="0">      integer :: passed_assertions = 0</line>
        <line t="X" i="128" b="0" n="0"></line>
        <line t="C" i="129" b="0" n="0">!     Count of failed assertions</line>
        <line t="X" i="130" b="0" n="0">      integer :: failed_assertions = 0</line>
        <line t="X" i="131" b="0" n="0"></line>
        <line t="C" i="132" b="0" n="0">!     Unit test report</line>
        <line t="X" i="133" b="0" n="0">      type(t_xfunit_report), allocatable :: report</line>
        <line t="X" i="134" b="0" n="0"></line>
        <line t="C" i="135" b="0" n="0">!     Variables for unit test execution timing</line>
        <line t="X" i="136" b="0" n="0">      real(kind=8) :: time0 = 0.0_8</line>
        <line t="X" i="137" b="0" n="0">      real(kind=8) :: time1 = 0.0_8</line>
        <line t="X" i="138" b="0" n="0"></line>
        <line t="C" i="139" b="0" n="0">!     Pointer to the unit test executer subroutine</line>
        <line t="X" i="140" b="0" n="0">      procedure (xfunit_unit_executer), pointer :: executer =&gt; null()</line>
        <line t="X" i="141" b="0" n="0"></line>
        <line t="C" i="142" b="0" n="0">!     Pointer to the subroutine to be executer prior to the unit test</line>
        <line t="X" i="143" b="0" n="0">      procedure (xfunit_unit_executer), pointer :: before =&gt; null()</line>
        <line t="X" i="144" b="0" n="0"></line>
        <line t="C" i="145" b="0" n="0">!     Pointer to the subroutine to be executer after the unit test</line>
        <line t="X" i="146" b="0" n="0">      procedure (xfunit_unit_executer), pointer :: after =&gt; null()</line>
        <line t="X" i="147" b="0" n="0"></line>
        <line t="C" i="148" b="0" n="0">!     Unit test execution status (0=success; otherwise error)</line>
        <line t="X" i="149" b="0" n="0">      integer :: status = 0</line>
        <line t="X" i="150" b="0" n="0"></line>
        <line t="C" i="151" b="0" n="0">!     Unit test error message</line>
        <line t="X" i="152" b="0" n="0">      type(t_string) :: error_message</line>
        <line t="X" i="153" b="0" n="0"></line>
        <line t="C" i="154" b="0" n="0">!     Error messages strucutre</line>
        <line t="C" i="155" b="0" n="0">!     Contais messages stack from overall execution</line>
        <line t="X" i="156" b="0" n="0">      type(t_messages) :: msg</line>
        <line t="X" i="157" b="0" n="0"></line>
        <line t="X" i="158" b="0" n="0">    contains</line>
        <line t="X" i="159" b="0" n="0"></line>
        <line t="C" i="160" b="0" n="0">!     Assertions for comparison (equal)</line>
        <line t="X" i="161" b="0" n="0">      generic :: assert_equal =&gt; xfunit_unit_assert_equal_integer_k1, &amp;</line>
        <line t="X" i="162" b="0" n="0">                                 xfunit_unit_assert_equal_integer_k2, &amp;</line>
        <line t="X" i="163" b="0" n="0">                                 xfunit_unit_assert_equal_integer_k4, &amp;</line>
        <line t="X" i="164" b="0" n="0">                                 xfunit_unit_assert_equal_integer_k8, &amp;</line>
        <line t="X" i="165" b="0" n="0">                                 xfunit_unit_assert_equal_real_k4, &amp;</line>
        <line t="X" i="166" b="0" n="0">                                 xfunit_unit_assert_equal_real_k8, &amp;</line>
        <line t="X" i="167" b="0" n="0">                                 xfunit_unit_assert_equal_complex_k4, &amp;</line>
        <line t="X" i="168" b="0" n="0">                                 xfunit_unit_assert_equal_complex_k8, &amp;</line>
        <line t="X" i="169" b="0" n="0">                                 xfunit_unit_assert_equal_character, &amp;</line>
        <line t="X" i="170" b="0" n="0">                                 xfunit_unit_assert_equal_string, &amp;</line>
        <line t="X" i="171" b="0" n="0">                                 xfunit_unit_assert_equal_logical_k1, &amp;</line>
        <line t="X" i="172" b="0" n="0">                                 xfunit_unit_assert_equal_logical_k2, &amp;</line>
        <line t="X" i="173" b="0" n="0">                                 xfunit_unit_assert_equal_logical_k4, &amp;</line>
        <line t="X" i="174" b="0" n="0">                                 xfunit_unit_assert_equal_class, &amp;</line>
        <line t="X" i="175" b="0" n="0">                                 xfunit_unit_assert_equal_array_integer_k1, &amp;</line>
        <line t="X" i="176" b="0" n="0">                                 xfunit_unit_assert_equal_array_integer_k2, &amp;</line>
        <line t="X" i="177" b="0" n="0">                                 xfunit_unit_assert_equal_array_integer_k4, &amp;</line>
        <line t="X" i="178" b="0" n="0">                                 xfunit_unit_assert_equal_array_integer_k8, &amp;</line>
        <line t="X" i="179" b="0" n="0">                                 xfunit_unit_assert_equal_array_integer_k1_common, &amp;</line>
        <line t="X" i="180" b="0" n="0">                                 xfunit_unit_assert_equal_array_integer_k2_common, &amp;</line>
        <line t="X" i="181" b="0" n="0">                                 xfunit_unit_assert_equal_array_integer_k4_common, &amp;</line>
        <line t="X" i="182" b="0" n="0">                                 xfunit_unit_assert_equal_array_integer_k8_common, &amp;</line>
        <line t="X" i="183" b="0" n="0">                                 xfunit_unit_assert_equal_array_real_k4, &amp;</line>
        <line t="X" i="184" b="0" n="0">                                 xfunit_unit_assert_equal_array_real_k4_thr, &amp;</line>
        <line t="X" i="185" b="0" n="0">                                 xfunit_unit_assert_equal_array_real_k4_common, &amp;</line>
        <line t="X" i="186" b="0" n="0">                                 xfunit_unit_assert_equal_array_real_k8, &amp;</line>
        <line t="X" i="187" b="0" n="0">                                 xfunit_unit_assert_equal_array_real_k8_thr, &amp;</line>
        <line t="X" i="188" b="0" n="0">                                 xfunit_unit_assert_equal_array_real_k8_common, &amp;</line>
        <line t="X" i="189" b="0" n="0">                                 xfunit_unit_assert_equal_array_complex_k4, &amp;</line>
        <line t="X" i="190" b="0" n="0">                                 xfunit_unit_assert_equal_array_complex_k4_thr, &amp;</line>
        <line t="X" i="191" b="0" n="0">                                 xfunit_unit_assert_equal_array_complex_k4_common, &amp;</line>
        <line t="X" i="192" b="0" n="0">                                 xfunit_unit_assert_equal_array_complex_k8, &amp;</line>
        <line t="X" i="193" b="0" n="0">                                 xfunit_unit_assert_equal_array_complex_k8_thr, &amp;</line>
        <line t="X" i="194" b="0" n="0">                                 xfunit_unit_assert_equal_array_complex_k8_common, &amp;</line>
        <line t="X" i="195" b="0" n="0">                                 xfunit_unit_assert_equal_array_character, &amp;</line>
        <line t="X" i="196" b="0" n="0">                                 xfunit_unit_assert_equal_array_character_common, &amp;</line>
        <line t="X" i="197" b="0" n="0">                                 xfunit_unit_assert_equal_array_string, &amp;</line>
        <line t="X" i="198" b="0" n="0">                                 xfunit_unit_assert_equal_array_string_common, &amp;</line>
        <line t="X" i="199" b="0" n="0">                                 xfunit_unit_assert_equal_array_logical_k1, &amp;</line>
        <line t="X" i="200" b="0" n="0">                                 xfunit_unit_assert_equal_array_logical_k2, &amp;</line>
        <line t="X" i="201" b="0" n="0">                                 xfunit_unit_assert_equal_array_logical_k4, &amp;</line>
        <line t="X" i="202" b="0" n="0">                                 xfunit_unit_assert_equal_array_logical_k1_common, &amp;</line>
        <line t="X" i="203" b="0" n="0">                                 xfunit_unit_assert_equal_array_logical_k2_common, &amp;</line>
        <line t="X" i="204" b="0" n="0">                                 xfunit_unit_assert_equal_array_logical_k4_common, &amp;</line>
        <line t="X" i="205" b="0" n="0">                                 xfunit_unit_assert_equal_array_class, &amp;</line>
        <line t="X" i="206" b="0" n="0">                                 xfunit_unit_assert_equal_array_class_common, &amp;</line>
        <line t="X" i="207" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_integer_k1, &amp;</line>
        <line t="X" i="208" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_integer_k2, &amp;</line>
        <line t="X" i="209" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_integer_k4, &amp;</line>
        <line t="X" i="210" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_integer_k8, &amp;</line>
        <line t="X" i="211" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_integer_k1_common, &amp;</line>
        <line t="X" i="212" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_integer_k2_common, &amp;</line>
        <line t="X" i="213" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_integer_k4_common, &amp;</line>
        <line t="X" i="214" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_integer_k8_common, &amp;</line>
        <line t="X" i="215" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_real_k4, &amp;</line>
        <line t="X" i="216" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_real_k4_thr, &amp;</line>
        <line t="X" i="217" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_real_k4_common, &amp;</line>
        <line t="X" i="218" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_real_k8, &amp;</line>
        <line t="X" i="219" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_real_k8_thr, &amp;</line>
        <line t="X" i="220" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_real_k8_common, &amp;</line>
        <line t="X" i="221" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_class, &amp;</line>
        <line t="X" i="222" b="0" n="0">                                 xfunit_unit_assert_equal_matrix_class_common</line>
        <line t="X" i="223" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_integer_k1</line>
        <line t="X" i="224" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_integer_k2</line>
        <line t="X" i="225" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_integer_k4</line>
        <line t="X" i="226" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_integer_k8</line>
        <line t="X" i="227" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_real_k4</line>
        <line t="X" i="228" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_real_k8</line>
        <line t="X" i="229" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_complex_k4</line>
        <line t="X" i="230" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_complex_k8</line>
        <line t="X" i="231" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_character</line>
        <line t="X" i="232" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_string</line>
        <line t="X" i="233" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_logical_k1</line>
        <line t="X" i="234" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_logical_k2</line>
        <line t="X" i="235" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_logical_k4</line>
        <line t="X" i="236" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_class</line>
        <line t="X" i="237" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_integer_k1</line>
        <line t="X" i="238" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_integer_k2</line>
        <line t="X" i="239" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_integer_k4</line>
        <line t="X" i="240" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_integer_k8</line>
        <line t="X" i="241" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_integer_k1_common</line>
        <line t="X" i="242" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_integer_k2_common</line>
        <line t="X" i="243" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_integer_k4_common</line>
        <line t="X" i="244" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_integer_k8_common</line>
        <line t="X" i="245" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_real_k4</line>
        <line t="X" i="246" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_real_k4_thr</line>
        <line t="X" i="247" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_real_k4_common</line>
        <line t="X" i="248" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_real_k8</line>
        <line t="X" i="249" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_real_k8_thr</line>
        <line t="X" i="250" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_real_k8_common</line>
        <line t="X" i="251" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_complex_k4</line>
        <line t="X" i="252" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_complex_k4_thr</line>
        <line t="X" i="253" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_complex_k4_common</line>
        <line t="X" i="254" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_complex_k8</line>
        <line t="X" i="255" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_complex_k8_thr</line>
        <line t="X" i="256" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_complex_k8_common</line>
        <line t="X" i="257" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_character</line>
        <line t="X" i="258" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_character_common</line>
        <line t="X" i="259" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_string</line>
        <line t="X" i="260" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_string_common</line>
        <line t="X" i="261" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_logical_k1</line>
        <line t="X" i="262" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_logical_k2</line>
        <line t="X" i="263" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_logical_k4</line>
        <line t="X" i="264" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_logical_k1_common</line>
        <line t="X" i="265" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_logical_k2_common</line>
        <line t="X" i="266" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_logical_k4_common</line>
        <line t="X" i="267" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_class</line>
        <line t="X" i="268" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_array_class_common</line>
        <line t="X" i="269" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_integer_k1</line>
        <line t="X" i="270" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_integer_k2</line>
        <line t="X" i="271" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_integer_k4</line>
        <line t="X" i="272" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_integer_k8</line>
        <line t="X" i="273" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_integer_k1_common</line>
        <line t="X" i="274" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_integer_k2_common</line>
        <line t="X" i="275" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_integer_k4_common</line>
        <line t="X" i="276" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_integer_k8_common</line>
        <line t="X" i="277" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_real_k4</line>
        <line t="X" i="278" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_real_k4_thr</line>
        <line t="X" i="279" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_real_k4_common</line>
        <line t="X" i="280" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_real_k8</line>
        <line t="X" i="281" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_real_k8_thr</line>
        <line t="X" i="282" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_real_k8_common</line>
        <line t="X" i="283" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_class</line>
        <line t="X" i="284" b="0" n="0">      procedure, private :: xfunit_unit_assert_equal_matrix_class_common</line>
        <line t="X" i="285" b="0" n="0"></line>
        <line t="C" i="286" b="0" n="0">!     Assertions for range comparison (between)</line>
        <line t="X" i="287" b="0" n="0">      generic :: assert_between =&gt; xfunit_unit_assert_between_integer_k1, &amp;</line>
        <line t="X" i="288" b="0" n="0">                                   xfunit_unit_assert_between_integer_k2, &amp;</line>
        <line t="X" i="289" b="0" n="0">                                   xfunit_unit_assert_between_integer_k4, &amp;</line>
        <line t="X" i="290" b="0" n="0">                                   xfunit_unit_assert_between_integer_k8, &amp;</line>
        <line t="X" i="291" b="0" n="0">                                   xfunit_unit_assert_between_real_k4, &amp;</line>
        <line t="X" i="292" b="0" n="0">                                   xfunit_unit_assert_between_real_k8, &amp;</line>
        <line t="X" i="293" b="0" n="0">                                   xfunit_unit_assert_between_array_integer_k1, &amp;</line>
        <line t="X" i="294" b="0" n="0">                                   xfunit_unit_assert_between_array_integer_k2, &amp;</line>
        <line t="X" i="295" b="0" n="0">                                   xfunit_unit_assert_between_array_integer_k4, &amp;</line>
        <line t="X" i="296" b="0" n="0">                                   xfunit_unit_assert_between_array_integer_k8, &amp;</line>
        <line t="X" i="297" b="0" n="0">                                   xfunit_unit_assert_between_array_real_k4, &amp;</line>
        <line t="X" i="298" b="0" n="0">                                   xfunit_unit_assert_between_array_real_k8, &amp;</line>
        <line t="X" i="299" b="0" n="0">                                   xfunit_unit_assert_between_array_integer_k1_common, &amp;</line>
        <line t="X" i="300" b="0" n="0">                                   xfunit_unit_assert_between_array_integer_k2_common, &amp;</line>
        <line t="X" i="301" b="0" n="0">                                   xfunit_unit_assert_between_array_integer_k4_common, &amp;</line>
        <line t="X" i="302" b="0" n="0">                                   xfunit_unit_assert_between_array_integer_k8_common, &amp;</line>
        <line t="X" i="303" b="0" n="0">                                   xfunit_unit_assert_between_array_real_k4_common, &amp;</line>
        <line t="X" i="304" b="0" n="0">                                   xfunit_unit_assert_between_array_real_k8_common</line>
        <line t="X" i="305" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_integer_k1</line>
        <line t="X" i="306" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_integer_k2</line>
        <line t="X" i="307" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_integer_k4</line>
        <line t="X" i="308" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_integer_k8</line>
        <line t="X" i="309" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_real_k4</line>
        <line t="X" i="310" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_real_k8</line>
        <line t="X" i="311" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_integer_k1</line>
        <line t="X" i="312" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_integer_k2</line>
        <line t="X" i="313" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_integer_k4</line>
        <line t="X" i="314" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_integer_k8</line>
        <line t="X" i="315" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_real_k4</line>
        <line t="X" i="316" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_real_k8</line>
        <line t="X" i="317" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_integer_k1_common</line>
        <line t="X" i="318" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_integer_k2_common</line>
        <line t="X" i="319" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_integer_k4_common</line>
        <line t="X" i="320" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_integer_k8_common</line>
        <line t="X" i="321" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_real_k4_common</line>
        <line t="X" i="322" b="0" n="0">      procedure, private :: xfunit_unit_assert_between_array_real_k8_common</line>
        <line t="X" i="323" b="0" n="0"></line>
        <line t="C" i="324" b="0" n="0">!     Assertions for inequality comparison (greater)</line>
        <line t="X" i="325" b="0" n="0">      generic :: assert_greater =&gt; xfunit_unit_assert_greater_integer_k1, &amp;</line>
        <line t="X" i="326" b="0" n="0">                                   xfunit_unit_assert_greater_integer_k2, &amp;</line>
        <line t="X" i="327" b="0" n="0">                                   xfunit_unit_assert_greater_integer_k4, &amp;</line>
        <line t="X" i="328" b="0" n="0">                                   xfunit_unit_assert_greater_integer_k8, &amp;</line>
        <line t="X" i="329" b="0" n="0">                                   xfunit_unit_assert_greater_real_k4, &amp;</line>
        <line t="X" i="330" b="0" n="0">                                   xfunit_unit_assert_greater_real_k8, &amp;</line>
        <line t="X" i="331" b="0" n="0">                                   xfunit_unit_assert_greater_array_integer_k1, &amp;</line>
        <line t="X" i="332" b="0" n="0">                                   xfunit_unit_assert_greater_array_integer_k2, &amp;</line>
        <line t="X" i="333" b="0" n="0">                                   xfunit_unit_assert_greater_array_integer_k4, &amp;</line>
        <line t="X" i="334" b="0" n="0">                                   xfunit_unit_assert_greater_array_integer_k8, &amp;</line>
        <line t="X" i="335" b="0" n="0">                                   xfunit_unit_assert_greater_array_real_k4, &amp;</line>
        <line t="X" i="336" b="0" n="0">                                   xfunit_unit_assert_greater_array_real_k8, &amp;</line>
        <line t="X" i="337" b="0" n="0">                                   xfunit_unit_assert_greater_array_integer_k1_common, &amp;</line>
        <line t="X" i="338" b="0" n="0">                                   xfunit_unit_assert_greater_array_integer_k2_common, &amp;</line>
        <line t="X" i="339" b="0" n="0">                                   xfunit_unit_assert_greater_array_integer_k4_common, &amp;</line>
        <line t="X" i="340" b="0" n="0">                                   xfunit_unit_assert_greater_array_integer_k8_common, &amp;</line>
        <line t="X" i="341" b="0" n="0">                                   xfunit_unit_assert_greater_array_real_k4_common, &amp;</line>
        <line t="X" i="342" b="0" n="0">                                   xfunit_unit_assert_greater_array_real_k8_common</line>
        <line t="X" i="343" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_integer_k1</line>
        <line t="X" i="344" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_integer_k2</line>
        <line t="X" i="345" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_integer_k4</line>
        <line t="X" i="346" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_integer_k8</line>
        <line t="X" i="347" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_real_k4</line>
        <line t="X" i="348" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_real_k8</line>
        <line t="X" i="349" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_integer_k1</line>
        <line t="X" i="350" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_integer_k2</line>
        <line t="X" i="351" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_integer_k4</line>
        <line t="X" i="352" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_integer_k8</line>
        <line t="X" i="353" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_real_k4</line>
        <line t="X" i="354" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_real_k8</line>
        <line t="X" i="355" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_integer_k1_common</line>
        <line t="X" i="356" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_integer_k2_common</line>
        <line t="X" i="357" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_integer_k4_common</line>
        <line t="X" i="358" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_integer_k8_common</line>
        <line t="X" i="359" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_real_k4_common</line>
        <line t="X" i="360" b="0" n="0">      procedure, private :: xfunit_unit_assert_greater_array_real_k8_common</line>
        <line t="X" i="361" b="0" n="0"></line>
        <line t="C" i="362" b="0" n="0">!     Assertions for inequality comparison (less)</line>
        <line t="X" i="363" b="0" n="0">      generic :: assert_less =&gt; xfunit_unit_assert_less_integer_k1, &amp;</line>
        <line t="X" i="364" b="0" n="0">                                xfunit_unit_assert_less_integer_k2, &amp;</line>
        <line t="X" i="365" b="0" n="0">                                xfunit_unit_assert_less_integer_k4, &amp;</line>
        <line t="X" i="366" b="0" n="0">                                xfunit_unit_assert_less_integer_k8, &amp;</line>
        <line t="X" i="367" b="0" n="0">                                xfunit_unit_assert_less_real_k4, &amp;</line>
        <line t="X" i="368" b="0" n="0">                                xfunit_unit_assert_less_real_k8, &amp;</line>
        <line t="X" i="369" b="0" n="0">                                xfunit_unit_assert_less_array_integer_k1, &amp;</line>
        <line t="X" i="370" b="0" n="0">                                xfunit_unit_assert_less_array_integer_k2, &amp;</line>
        <line t="X" i="371" b="0" n="0">                                xfunit_unit_assert_less_array_integer_k4, &amp;</line>
        <line t="X" i="372" b="0" n="0">                                xfunit_unit_assert_less_array_integer_k8, &amp;</line>
        <line t="X" i="373" b="0" n="0">                                xfunit_unit_assert_less_array_real_k4, &amp;</line>
        <line t="X" i="374" b="0" n="0">                                xfunit_unit_assert_less_array_real_k8, &amp;</line>
        <line t="X" i="375" b="0" n="0">                                xfunit_unit_assert_less_array_integer_k1_common, &amp;</line>
        <line t="X" i="376" b="0" n="0">                                xfunit_unit_assert_less_array_integer_k2_common, &amp;</line>
        <line t="X" i="377" b="0" n="0">                                xfunit_unit_assert_less_array_integer_k4_common, &amp;</line>
        <line t="X" i="378" b="0" n="0">                                xfunit_unit_assert_less_array_integer_k8_common, &amp;</line>
        <line t="X" i="379" b="0" n="0">                                xfunit_unit_assert_less_array_real_k4_common, &amp;</line>
        <line t="X" i="380" b="0" n="0">                                xfunit_unit_assert_less_array_real_k8_common</line>
        <line t="X" i="381" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_integer_k1</line>
        <line t="X" i="382" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_integer_k2</line>
        <line t="X" i="383" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_integer_k4</line>
        <line t="X" i="384" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_integer_k8</line>
        <line t="X" i="385" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_real_k4</line>
        <line t="X" i="386" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_real_k8</line>
        <line t="X" i="387" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_integer_k1</line>
        <line t="X" i="388" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_integer_k2</line>
        <line t="X" i="389" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_integer_k4</line>
        <line t="X" i="390" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_integer_k8</line>
        <line t="X" i="391" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_real_k4</line>
        <line t="X" i="392" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_real_k8</line>
        <line t="X" i="393" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_integer_k1_common</line>
        <line t="X" i="394" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_integer_k2_common</line>
        <line t="X" i="395" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_integer_k4_common</line>
        <line t="X" i="396" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_integer_k8_common</line>
        <line t="X" i="397" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_real_k4_common</line>
        <line t="X" i="398" b="0" n="0">      procedure, private :: xfunit_unit_assert_less_array_real_k8_common</line>
        <line t="X" i="399" b="0" n="0"></line>
        <line t="C" i="400" b="0" n="0">!     Assertions for true</line>
        <line t="X" i="401" b="0" n="0">      generic :: assert_true =&gt; xfunit_unit_assert_true_k1, &amp;</line>
        <line t="X" i="402" b="0" n="0">                                xfunit_unit_assert_true_k2, &amp;</line>
        <line t="X" i="403" b="0" n="0">                                xfunit_unit_assert_true_k4, &amp;</line>
        <line t="X" i="404" b="0" n="0">                                xfunit_unit_assert_array_true_k1, &amp;</line>
        <line t="X" i="405" b="0" n="0">                                xfunit_unit_assert_array_true_k2, &amp;</line>
        <line t="X" i="406" b="0" n="0">                                xfunit_unit_assert_array_true_k4</line>
        <line t="X" i="407" b="0" n="0">      procedure, private :: xfunit_unit_assert_true_k1</line>
        <line t="X" i="408" b="0" n="0">      procedure, private :: xfunit_unit_assert_true_k2</line>
        <line t="X" i="409" b="0" n="0">      procedure, private :: xfunit_unit_assert_true_k4</line>
        <line t="X" i="410" b="0" n="0">      procedure, private :: xfunit_unit_assert_array_true_k1</line>
        <line t="X" i="411" b="0" n="0">      procedure, private :: xfunit_unit_assert_array_true_k2</line>
        <line t="X" i="412" b="0" n="0">      procedure, private :: xfunit_unit_assert_array_true_k4</line>
        <line t="X" i="413" b="0" n="0"></line>
        <line t="C" i="414" b="0" n="0">!     Assertions for false</line>
        <line t="X" i="415" b="0" n="0">      generic :: assert_false =&gt; xfunit_unit_assert_false_k1, &amp;</line>
        <line t="X" i="416" b="0" n="0">                                 xfunit_unit_assert_false_k2, &amp;</line>
        <line t="X" i="417" b="0" n="0">                                 xfunit_unit_assert_false_k4, &amp;</line>
        <line t="X" i="418" b="0" n="0">                                 xfunit_unit_assert_array_false_k1, &amp;</line>
        <line t="X" i="419" b="0" n="0">                                 xfunit_unit_assert_array_false_k2, &amp;</line>
        <line t="X" i="420" b="0" n="0">                                 xfunit_unit_assert_array_false_k4</line>
        <line t="X" i="421" b="0" n="0">      procedure, private :: xfunit_unit_assert_false_k1</line>
        <line t="X" i="422" b="0" n="0">      procedure, private :: xfunit_unit_assert_false_k2</line>
        <line t="X" i="423" b="0" n="0">      procedure, private :: xfunit_unit_assert_false_k4</line>
        <line t="X" i="424" b="0" n="0">      procedure, private :: xfunit_unit_assert_array_false_k1</line>
        <line t="X" i="425" b="0" n="0">      procedure, private :: xfunit_unit_assert_array_false_k2</line>
        <line t="X" i="426" b="0" n="0">      procedure, private :: xfunit_unit_assert_array_false_k4</line>
        <line t="X" i="427" b="0" n="0"></line>
        <line t="C" i="428" b="0" n="0">!     Assertions that force pass and fail</line>
        <line t="X" i="429" b="0" n="0">      procedure :: assert_pass =&gt; xfunit_unit_assert_pass</line>
        <line t="X" i="430" b="0" n="0">      procedure :: assert_fail =&gt; xfunit_unit_assert_fail</line>
        <line t="X" i="431" b="0" n="0"></line>
        <line t="C" i="432" b="0" n="0">!     Assertion for file comparison</line>
        <line t="X" i="433" b="0" n="0">      generic :: assert_compare_files =&gt; xfunit_unit_assert_compare_files_character, &amp;</line>
        <line t="X" i="434" b="0" n="0">                                         xfunit_unit_assert_compare_files_string</line>
        <line t="X" i="435" b="0" n="0">      procedure, private :: xfunit_unit_assert_compare_files_character</line>
        <line t="X" i="436" b="0" n="0">      procedure, private :: xfunit_unit_assert_compare_files_string</line>
        <line t="X" i="437" b="0" n="0"></line>
        <line t="C" i="438" b="0" n="0">!     Serialization interfaces</line>
        <line t="X" i="439" b="0" n="0">      procedure :: write =&gt; xfunit_unit_write</line>
        <line t="X" i="440" b="0" n="0">      procedure :: write_xml =&gt; xfunit_unit_write_xml</line>
        <line t="X" i="441" b="0" n="0"></line>
        <line t="C" i="442" b="0" n="0">!     Execution handling</line>
        <line t="X" i="443" b="0" n="0">      procedure :: execute =&gt; xfunit_unit_execute</line>
        <line t="X" i="444" b="0" n="0">      procedure :: is_passed =&gt; xfunit_unit_is_passed</line>
        <line t="X" i="445" b="0" n="0">      procedure :: is_executed =&gt; xfunit_unit_is_executed</line>
        <line t="X" i="446" b="0" n="0"></line>
        <line t="C" i="447" b="0" n="0">!     Operator interfaces (to allow inclusion in dyanmic containers)</line>
        <line t="X" i="448" b="0" n="0">      generic :: operator(==) =&gt; xfunit_unit_equal</line>
        <line t="X" i="449" b="0" n="0">      procedure, private :: xfunit_unit_equal</line>
        <line t="X" i="450" b="0" n="0">      generic :: operator(&gt;)  =&gt; xfunit_unit_greater</line>
        <line t="X" i="451" b="0" n="0">      procedure, private :: xfunit_unit_greater</line>
        <line t="X" i="452" b="0" n="0">      generic :: operator(&lt;)  =&gt; xfunit_unit_less</line>
        <line t="X" i="453" b="0" n="0">      procedure, private :: xfunit_unit_less</line>
        <line t="X" i="454" b="0" n="0">      generic :: assignment(=) =&gt; xfunit_unit_assign_xfunit_unit</line>
        <line t="X" i="455" b="0" n="0">      procedure, private :: xfunit_unit_assign_xfunit_unit</line>
        <line t="X" i="456" b="0" n="0"></line>
        <line t="C" i="457" b="0" n="0">!     Error handling</line>
        <line t="X" i="458" b="0" n="0">      procedure :: error =&gt; xfunit_unit_error</line>
        <line t="X" i="459" b="0" n="0">      procedure :: is_error =&gt; xfunit_unit_is_errored</line>
        <line t="X" i="460" b="0" n="0"></line>
        <line t="C" i="461" b="0" n="0">!     Getters</line>
        <line t="X" i="462" b="0" n="0">      procedure :: get_name =&gt; xfunit_unit_get_name</line>
        <line t="X" i="463" b="0" n="0">      procedure :: get_passed_assertions =&gt; xfunit_unit_get_passed_assertions</line>
        <line t="X" i="464" b="0" n="0">      procedure :: get_failed_assertions =&gt; xfunit_unit_get_failed_assertions</line>
        <line t="X" i="465" b="0" n="0">      procedure :: get_total_assertions =&gt; xfunit_unit_get_total_assertions</line>
        <line t="X" i="466" b="0" n="0">      procedure :: get_msg_ptr =&gt; xfunit_unit_get_msg_ptr</line>
        <line t="X" i="467" b="0" n="0">      procedure :: get_elapsed =&gt; xfunit_unit_get_elapsed</line>
        <line t="X" i="468" b="0" n="0"></line>
        <line t="C" i="469" b="0" n="0">!     Skip unit test flag handling</line>
        <line t="X" i="470" b="0" n="0">      procedure :: get_skip =&gt; xfunit_unit_get_skip</line>
        <line t="X" i="471" b="0" n="0">      procedure :: set_skip =&gt; xfunit_unit_set_skip</line>
        <line t="X" i="472" b="0" n="0">      </line>
        <line t="C" i="473" b="0" n="0">!     Generic interface for assertion process</line>
        <line t="X" i="474" b="0" n="0">      procedure, private :: process_assertion =&gt; xfunit_unit_process_assertion</line>
        <line t="X" i="475" b="0" n="0"></line>
        <line t="T" i="476" b="0" n="0">  end type t_xfunit_unit</line>
        <line t="T" i="477" b="0" n="0"></line>
        <line t="C" i="478" b="0" n="0">! Constructor interface</line>
        <line t="X" i="479" b="0" n="0">  interface xfunit_unit</line>
        <line t="X" i="480" b="0" n="0">    module procedure xfunit_unit_character</line>
        <line t="X" i="481" b="0" n="0">    module procedure xfunit_unit_string</line>
        <line t="X" i="482" b="0" n="0">  end interface xfunit_unit</line>
        <line t="X" i="483" b="0" n="0"></line>
        <line t="C" i="484" b="0" n="0">! Interface for the executer subroutine</line>
        <line t="X" i="485" b="0" n="0">  interface</line>
        <line t="X" i="486" b="1" n="1">    subroutine xfunit_unit_executer( ut )</line>
        <line t="X" i="487" b="1" n="1">      import t_xfunit_unit</line>
        <line t="X" i="488" b="1" n="1">      class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="489" b="1" n="1">    end subroutine xfunit_unit_executer</line>
        <line t="X" i="490" b="1" n="1">  end interface</line>
        <line t="X" i="491" b="1" n="1"></line>
        <line t="C" i="492" b="1" n="1">!---End of declaration of module variables--------------------------------------</line>
        <line t="C" i="493" b="1" n="1"></line>
        <line t="X" i="494" b="1" n="1">contains</line>
        <line t="X" i="495" b="1" n="1"></line>
        <line t="C" i="496" b="1" n="1">! Constructor from character</line>
        <line k="xfunit_unit_character" t="F" i="497" b="1" n="1">function xfunit_unit_character( name, classname, annotation, executer, before, after ) result(res)</line>
        <line t="F" i="498" b="1" n="1"></line>
        <line t="C" i="499" b="1" n="1">! The unit test case name</line>
        <line t="X" i="500" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="501" b="1" n="1"></line>
        <line t="C" i="502" b="1" n="1">! The class name (for object oriented unit testing)</line>
        <line t="X" i="503" b="1" n="1">  character(len=*), optional, intent(in) :: classname</line>
        <line t="X" i="504" b="1" n="1"></line>
        <line t="C" i="505" b="1" n="1">! The test suite annotation</line>
        <line t="X" i="506" b="1" n="1">  character(len=*), optional, intent(in) :: annotation</line>
        <line t="X" i="507" b="1" n="1"></line>
        <line t="C" i="508" b="1" n="1">! The unit test executer</line>
        <line t="X" i="509" b="1" n="1">  procedure (xfunit_unit_executer) :: executer</line>
        <line t="X" i="510" b="1" n="1"></line>
        <line t="C" i="511" b="1" n="1">! The unit test procedure to be exectured before the test</line>
        <line t="X" i="512" b="1" n="1">  procedure (xfunit_unit_executer), optional :: before</line>
        <line t="X" i="513" b="1" n="1"></line>
        <line t="C" i="514" b="1" n="1">! The unit test procedure to be exectured after the test</line>
        <line t="X" i="515" b="1" n="1">  procedure (xfunit_unit_executer), optional :: after</line>
        <line t="X" i="516" b="1" n="1"></line>
        <line t="C" i="517" b="1" n="1">! The unit test case structure</line>
        <line t="X" i="518" b="1" n="1">  type(t_xfunit_unit) :: res</line>
        <line t="X" i="519" b="1" n="1"></line>
        <line t="C" i="520" b="1" n="1">! Assign the unit case name</line>
        <line t="X" i="521" b="1" n="1">  res%name = name</line>
        <line t="X" i="522" b="1" n="1"></line>
        <line t="C" i="523" b="1" n="1">! Assign the class name</line>
        <line t="X" i="524" b="2" n="2">  if( present(classname) ) then</line>
        <line t="X" i="525" b="2" n="2">    res%classname = classname</line>
        <line t="X" i="526" b="2" n="1">  end if</line>
        <line t="X" i="527" b="2" n="1"></line>
        <line t="C" i="528" b="2" n="1">! Assign annotation</line>
        <line t="X" i="529" b="3" n="2">  if( present(annotation) ) then</line>
        <line t="X" i="530" b="3" n="2">    res%annotation = annotation</line>
        <line t="X" i="531" b="3" n="1">  end if</line>
        <line t="X" i="532" b="3" n="1"></line>
        <line t="C" i="533" b="3" n="1">! Initialise report</line>
        <line t="X" i="534" b="3" n="1">  allocate( res%report )</line>
        <line t="X" i="535" b="3" n="1">  res%report = xfunit_report()</line>
        <line t="X" i="536" b="3" n="1"></line>
        <line t="C" i="537" b="3" n="1">! Initialise execution time</line>
        <line t="X" i="538" b="3" n="1">  res%time0 = 0.0_8</line>
        <line t="X" i="539" b="3" n="1">  res%time1 = 0.0_8</line>
        <line t="X" i="540" b="3" n="1"></line>
        <line t="C" i="541" b="3" n="1">! Initialise the test executer</line>
        <line t="X" i="542" b="3" n="1">  res%executer =&gt; executer</line>
        <line t="X" i="543" b="3" n="1"></line>
        <line t="C" i="544" b="3" n="1">! Initialise the error condition</line>
        <line t="X" i="545" b="3" n="1">  res%status = 0</line>
        <line t="X" i="546" b="3" n="1">  res%error_message = ''</line>
        <line t="X" i="547" b="3" n="1">  call res%msg%reset_error()</line>
        <line t="X" i="548" b="3" n="1"></line>
        <line t="C" i="549" b="3" n="1">! Initialise the procedures to prepare the test execution</line>
        <line t="X" i="550" b="4" n="2">  if( present(before) ) then</line>
        <line t="X" i="551" b="4" n="2">    res%before =&gt; before</line>
        <line t="X" i="552" b="4" n="1">  end if</line>
        <line t="X" i="553" b="4" n="1"></line>
        <line t="C" i="554" b="4" n="1">! Initialise the procedures to clean-up test execution</line>
        <line t="X" i="555" b="5" n="2">  if( present(after) ) then</line>
        <line t="X" i="556" b="5" n="2">    res%after =&gt; after</line>
        <line t="X" i="557" b="5" n="1">  end if</line>
        <line t="X" i="558" b="5" n="1"></line>
        <line t="EF" i="559" b="5" n="1">end function xfunit_unit_character</line>
        <line t="EF" i="560" b="1" n="1"></line>
        <line t="EF" i="561" b="1" n="1"></line>
        <line t="C" i="562" b="1" n="1">! Constructor from string</line>
        <line k="xfunit_unit_string" t="F" i="563" b="1" n="1">function xfunit_unit_string( name, classname, annotation, executer, before, after ) result(res)</line>
        <line t="F" i="564" b="1" n="1"></line>
        <line t="C" i="565" b="1" n="1">! The unit test case name</line>
        <line t="X" i="566" b="1" n="1">  type(t_string), intent(in) :: name</line>
        <line t="X" i="567" b="1" n="1"></line>
        <line t="C" i="568" b="1" n="1">! The class name (for object oriented unit testing)</line>
        <line t="X" i="569" b="1" n="1">  type(t_string), optional, intent(in) :: classname</line>
        <line t="X" i="570" b="1" n="1"></line>
        <line t="C" i="571" b="1" n="1">! The test suite annotation</line>
        <line t="X" i="572" b="1" n="1">  type(t_string), optional, intent(in) :: annotation</line>
        <line t="X" i="573" b="1" n="1"></line>
        <line t="C" i="574" b="1" n="1">! The unit test executer</line>
        <line t="X" i="575" b="1" n="1">  procedure (xfunit_unit_executer) :: executer</line>
        <line t="X" i="576" b="1" n="1"></line>
        <line t="C" i="577" b="1" n="1">! The unit test procedure to be exectured before the test</line>
        <line t="X" i="578" b="1" n="1">  procedure (xfunit_unit_executer), optional :: before</line>
        <line t="X" i="579" b="1" n="1"></line>
        <line t="C" i="580" b="1" n="1">! The unit test procedure to be exectured after the test</line>
        <line t="X" i="581" b="1" n="1">  procedure (xfunit_unit_executer), optional :: after</line>
        <line t="X" i="582" b="1" n="1"></line>
        <line t="C" i="583" b="1" n="1">! The unit test case structure</line>
        <line t="X" i="584" b="1" n="1">  type(t_xfunit_unit) :: res</line>
        <line t="X" i="585" b="1" n="1"></line>
        <line t="C" i="586" b="1" n="1">! Invoke the character interface</line>
        <line t="X" i="587" b="1" n="1">  res = xfunit_unit( name%character(), classname%character(), annotation%character(), executer, before, after )</line>
        <line t="X" i="588" b="1" n="1"></line>
        <line t="EF" i="589" b="1" n="1">end function xfunit_unit_string</line>
        <line t="EF" i="590" b="1" n="1"></line>
        <line t="EF" i="591" b="1" n="1"></line>
        <line t="C" i="592" b="1" n="1">! Execute the test</line>
        <line k="xfunit_unit_execute" t="S" i="593" b="1" n="1">subroutine xfunit_unit_execute( ut )</line>
        <line t="S" i="594" b="1" n="1"></line>
        <line t="C" i="595" b="1" n="1">! The test case strcuture</line>
        <line t="X" i="596" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="597" b="1" n="1"></line>
        <line t="C" i="598" b="1" n="1">! Initialise</line>
        <line t="X" i="599" b="1" n="1">  ut%status = 0</line>
        <line t="X" i="600" b="1" n="1"></line>
        <line t="C" i="601" b="1" n="1">! Execute the preparation routine</line>
        <line t="X" i="602" b="2" n="2">  if( associated(ut%before) ) then</line>
        <line t="X" i="603" b="2" n="2">    call ut%before()</line>
        <line t="X" i="604" b="2" n="1">  end if</line>
        <line t="X" i="605" b="2" n="1"></line>
        <line t="C" i="606" b="2" n="1">! Check status</line>
        <line t="X" i="607" b="3" n="2">  if( ut%status == 0 ) then</line>
        <line t="X" i="608" b="3" n="2"></line>
        <line t="C" i="609" b="3" n="2">!   Initialise cummulated time</line>
        <line t="X" i="610" b="3" n="2">    call cpu_time( ut%time0 )</line>
        <line t="X" i="611" b="3" n="2"></line>
        <line t="C" i="612" b="3" n="2">!   Execute the test</line>
        <line t="X" i="613" b="3" n="2">    call ut%executer()</line>
        <line t="X" i="614" b="3" n="2"></line>
        <line t="C" i="615" b="3" n="2">!   Compute cummulated time</line>
        <line t="X" i="616" b="3" n="2">    call cpu_time( ut%time1 )</line>
        <line t="X" i="617" b="3" n="2"></line>
        <line t="C" i="618" b="3" n="2">!   Set execution flag</line>
        <line t="X" i="619" b="3" n="2">    ut%executed = .true.</line>
        <line t="X" i="620" b="3" n="2"></line>
        <line t="X" i="621" b="3" n="1">  end if</line>
        <line t="X" i="622" b="3" n="1"></line>
        <line t="C" i="623" b="3" n="1">! Execute the teardown routine</line>
        <line t="X" i="624" b="4" n="2">  if( associated(ut%after) ) then</line>
        <line t="X" i="625" b="4" n="2">    call ut%after()</line>
        <line t="X" i="626" b="4" n="1">  end if</line>
        <line t="X" i="627" b="4" n="1"></line>
        <line t="ES" i="628" b="4" n="1">end subroutine xfunit_unit_execute</line>
        <line t="ES" i="629" b="1" n="1"></line>
        <line t="ES" i="630" b="1" n="1"></line>
        <line t="C" i="631" b="1" n="1">! Retrieve passed status</line>
        <line k="xfunit_unit_is_passed" t="F" i="632" b="1" n="1">elemental function xfunit_unit_is_passed( ut ) result(res)</line>
        <line t="F" i="633" b="1" n="1"></line>
        <line t="C" i="634" b="1" n="1">! The unit test case</line>
        <line t="X" i="635" b="1" n="1">  class(t_xfunit_unit), intent(in) :: ut</line>
        <line t="X" i="636" b="1" n="1"></line>
        <line t="C" i="637" b="1" n="1">! The passed status</line>
        <line t="X" i="638" b="1" n="1">  logical :: res</line>
        <line t="X" i="639" b="1" n="1"></line>
        <line t="C" i="640" b="1" n="1">! Compute the result</line>
        <line t="X" i="641" b="1" n="1">  res = ut%executed .and. ut%status == 0 .and. ( ut%failed_assertions == 0 )</line>
        <line t="X" i="642" b="1" n="1"></line>
        <line t="EF" i="643" b="1" n="1">end function xfunit_unit_is_passed</line>
        <line t="EF" i="644" b="1" n="1"></line>
        <line t="EF" i="645" b="1" n="1"></line>
        <line t="C" i="646" b="1" n="1">! Retrieve passed status</line>
        <line k="xfunit_unit_is_errored" t="F" i="647" b="1" n="1">elemental function xfunit_unit_is_errored( ut ) result(res)</line>
        <line t="F" i="648" b="1" n="1"></line>
        <line t="C" i="649" b="1" n="1">! The unit test case</line>
        <line t="X" i="650" b="1" n="1">  class(t_xfunit_unit), intent(in) :: ut</line>
        <line t="X" i="651" b="1" n="1"></line>
        <line t="C" i="652" b="1" n="1">! The passed status</line>
        <line t="X" i="653" b="1" n="1">  logical :: res</line>
        <line t="X" i="654" b="1" n="1"></line>
        <line t="C" i="655" b="1" n="1">! Compute the result</line>
        <line t="X" i="656" b="1" n="1">  res = ( ut%status /= 0 )</line>
        <line t="X" i="657" b="1" n="1"></line>
        <line t="EF" i="658" b="1" n="1">end function xfunit_unit_is_errored</line>
        <line t="EF" i="659" b="1" n="1"></line>
        <line t="EF" i="660" b="1" n="1"></line>
        <line t="C" i="661" b="1" n="1">! Retrieve executed status</line>
        <line k="xfunit_unit_is_executed" t="F" i="662" b="1" n="1">elemental function xfunit_unit_is_executed( ut ) result(res)</line>
        <line t="F" i="663" b="1" n="1"></line>
        <line t="C" i="664" b="1" n="1">! The unit test case</line>
        <line t="X" i="665" b="1" n="1">  class(t_xfunit_unit), intent(in) :: ut</line>
        <line t="X" i="666" b="1" n="1"></line>
        <line t="C" i="667" b="1" n="1">! The executed status</line>
        <line t="X" i="668" b="1" n="1">  logical :: res</line>
        <line t="X" i="669" b="1" n="1"></line>
        <line t="C" i="670" b="1" n="1">! Compute the result</line>
        <line t="X" i="671" b="1" n="1">  res = ut%executed</line>
        <line t="X" i="672" b="1" n="1"></line>
        <line t="EF" i="673" b="1" n="1">end function xfunit_unit_is_executed</line>
        <line t="EF" i="674" b="1" n="1"></line>
        <line t="EF" i="675" b="1" n="1"></line>
        <line t="C" i="676" b="1" n="1">! Set the unit test execution on error (status=0 to reset)</line>
        <line k="xfunit_unit_error" t="S" i="677" b="1" n="1">pure subroutine xfunit_unit_error( ut, status, text, msg )</line>
        <line t="S" i="678" b="1" n="1"></line>
        <line t="C" i="679" b="1" n="1">! The unit test case</line>
        <line t="X" i="680" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="681" b="1" n="1"></line>
        <line t="C" i="682" b="1" n="1">! The provided error status</line>
        <line t="X" i="683" b="1" n="1">  integer, intent(in) :: status</line>
        <line t="X" i="684" b="1" n="1"></line>
        <line t="C" i="685" b="1" n="1">! The error message</line>
        <line t="X" i="686" b="1" n="1">  character(len=*), optional, intent(in) :: text</line>
        <line t="X" i="687" b="1" n="1"></line>
        <line t="C" i="688" b="1" n="1">! Message stack generated during the test execution</line>
        <line t="X" i="689" b="1" n="1">  type(t_messages), optional, intent(in) :: msg</line>
        <line t="X" i="690" b="1" n="1"></line>
        <line t="C" i="691" b="1" n="1">! Set the status</line>
        <line t="X" i="692" b="1" n="1">  ut%status = status</line>
        <line t="X" i="693" b="1" n="1"></line>
        <line t="C" i="694" b="1" n="1">! Set the text</line>
        <line t="X" i="695" b="2" n="2">  if( present(text) ) then</line>
        <line t="X" i="696" b="2" n="2">    ut%error_message = text</line>
        <line t="X" i="697" b="3" n="2">  else</line>
        <line t="X" i="698" b="3" n="2">    ut%error_message = ' '</line>
        <line t="X" i="699" b="3" n="1">  end if</line>
        <line t="X" i="700" b="3" n="1"></line>
        <line t="C" i="701" b="3" n="1">! Set the error stack</line>
        <line t="X" i="702" b="4" n="2">  if( present(msg) ) then</line>
        <line t="X" i="703" b="4" n="2">    ut%msg = msg</line>
        <line t="X" i="704" b="4" n="1">  end if</line>
        <line t="X" i="705" b="4" n="1"></line>
        <line t="ES" i="706" b="4" n="1">end subroutine xfunit_unit_error</line>
        <line t="ES" i="707" b="1" n="1"></line>
        <line t="ES" i="708" b="1" n="1"></line>
        <line t="C" i="709" b="1" n="1">! Write report in plain text</line>
        <line k="xfunit_unit_write" t="S" i="710" b="1" n="1">subroutine xfunit_unit_write( ut, unit, fail_only )</line>
        <line t="S" i="711" b="1" n="1"></line>
        <line t="C" i="712" b="1" n="1">! The unit test case</line>
        <line t="X" i="713" b="1" n="1">  class(t_xfunit_unit), intent(in) :: ut</line>
        <line t="X" i="714" b="1" n="1"></line>
        <line t="C" i="715" b="1" n="1">! The open fortran unit to write to</line>
        <line t="X" i="716" b="1" n="1">  integer, intent(in) :: unit</line>
        <line t="X" i="717" b="1" n="1"></line>
        <line t="C" i="718" b="1" n="1">! Flag to select only failed assertions for the report</line>
        <line t="X" i="719" b="1" n="1">  logical, intent(in) :: fail_only</line>
        <line t="X" i="720" b="1" n="1"></line>
        <line t="C" i="721" b="1" n="1">! Local variables</line>
        <line t="X" i="722" b="1" n="1">  type(t_string) :: local</line>
        <line t="X" i="723" b="1" n="1"></line>
        <line t="C" i="724" b="1" n="1">! Write the test header</line>
        <line t="X" i="725" b="1" n="1">  local = trim(adjustl(ut%name))</line>
        <line t="X" i="726" b="1" n="1">  write( unit, '(a)' ) repeat('#',78)</line>
        <line t="X" i="727" b="1" n="1">  write( unit, '(a,1x,a,1x,a)' ) repeat('#',10), character(local), repeat('#',66-len(local))</line>
        <line t="X" i="728" b="1" n="1">  write( unit, '(a)' ) repeat('#',78)</line>
        <line t="X" i="729" b="1" n="1"></line>
        <line t="C" i="730" b="1" n="1">! Generate the report</line>
        <line t="X" i="731" b="1" n="1">  call ut%report%write( unit, fail_only )</line>
        <line t="X" i="732" b="1" n="1"></line>
        <line t="C" i="733" b="1" n="1">! Write the test footer</line>
        <line t="X" i="734" b="1" n="1">  write( unit, '(a)' ) repeat('-',78)</line>
        <line t="X" i="735" b="1" n="1"></line>
        <line t="ES" i="736" b="1" n="1">end subroutine xfunit_unit_write</line>
        <line t="ES" i="737" b="1" n="1"></line>
        <line t="ES" i="738" b="1" n="1"></line>
        <line t="C" i="739" b="1" n="1">! Write report in XML</line>
        <line k="xfunit_unit_write_xml" t="S" i="740" b="1" n="1">subroutine xfunit_unit_write_xml( ut, xml, junit_strict, fail_only )</line>
        <line t="S" i="741" b="1" n="1"></line>
        <line t="C" i="742" b="1" n="1">! The unit test case</line>
        <line t="X" i="743" b="1" n="1">  class(t_xfunit_unit), intent(in) :: ut</line>
        <line t="X" i="744" b="1" n="1"></line>
        <line t="C" i="745" b="1" n="1">! The XML context</line>
        <line t="X" i="746" b="1" n="1">  type(t_xml_writer), intent(inout) :: xml</line>
        <line t="X" i="747" b="1" n="1"></line>
        <line t="C" i="748" b="1" n="1">! The flag for strict JUnit generation report</line>
        <line t="X" i="749" b="1" n="1">  logical, intent(in) :: junit_strict</line>
        <line t="X" i="750" b="1" n="1"></line>
        <line t="C" i="751" b="1" n="1">! The flag to output failed assertions only</line>
        <line t="X" i="752" b="1" n="1">  logical, intent(in) :: fail_only</line>
        <line t="X" i="753" b="1" n="1"></line>
        <line t="C" i="754" b="1" n="1">! Local variables</line>
        <line t="X" i="755" b="1" n="1">  type(t_xml_attribute), dimension(3) :: attr</line>
        <line t="X" i="756" b="1" n="1">  character(len=32) :: stime</line>
        <line t="X" i="757" b="1" n="1"></line>
        <line t="C" i="758" b="1" n="1">! Write the report start tag</line>
        <line t="X" i="759" b="1" n="1">  write( stime, '(f0.3)' ) ut%time1 - ut%time0</line>
        <line t="X" i="760" b="1" n="1">  attr(1) = xml_attribute( 'name', ut%name )</line>
        <line t="X" i="761" b="1" n="1">  attr(2) = xml_attribute( 'time', trim(stime) )</line>
        <line t="X" i="762" b="1" n="1">  attr(3) = xml_attribute( 'classname', ut%classname )</line>
        <line t="X" i="763" b="1" n="1">  call xml%write_start_tag( 'testcase', attr=attr, newline=.true. )</line>
        <line t="X" i="764" b="1" n="1"></line>
        <line t="C" i="765" b="1" n="1">! Check is skip this test has been requested</line>
        <line t="X" i="766" b="2" n="2">  if( .not. ut%skip ) then</line>
        <line t="X" i="767" b="2" n="2"></line>
        <line t="C" i="768" b="2" n="2">!   If on error, generate the error entry</line>
        <line t="X" i="769" b="3" n="3">    if( ut%is_error() ) then</line>
        <line t="X" i="770" b="3" n="3">      attr(1) = xml_attribute( 'type', ut%status )</line>
        <line t="X" i="771" b="3" n="3">      attr(2) = xml_attribute( 'message', ut%error_message )</line>
        <line t="X" i="772" b="3" n="3">      call xml%write_start_tag( 'error', attr=attr(:2), newline=.true. )</line>
        <line t="X" i="773" b="3" n="3">      call ut%msg%dump_errors( xml%get_unit() )</line>
        <line t="X" i="774" b="3" n="3">      call xml%write_end_tag( 'error' )</line>
        <line t="X" i="775" b="3" n="2">    end if</line>
        <line t="X" i="776" b="3" n="2"></line>
        <line t="C" i="777" b="3" n="2">!   If test is failed, genereate the failure entry</line>
        <line t="X" i="778" b="4" n="3">    if( .not. ut%is_passed() ) then</line>
        <line t="X" i="779" b="4" n="3">      attr(1) = xml_attribute( 'type', 'assertion failed' )</line>
        <line t="X" i="780" b="4" n="3">      call xml%write_start_tag( 'failure', attr=attr(:1), newline=.true. )</line>
        <line t="X" i="781" b="4" n="3">      call ut%write( xml%get_unit(), fail_only=.true. )</line>
        <line t="X" i="782" b="4" n="3">      call xml%write_end_tag( 'failure' )</line>
        <line t="X" i="783" b="4" n="2">    end if</line>
        <line t="X" i="784" b="4" n="2"></line>
        <line t="C" i="785" b="4" n="2">!   Check if detailed report is to be generated</line>
        <line t="X" i="786" b="5" n="3">    if( .not. junit_strict ) then</line>
        <line t="X" i="787" b="5" n="3"></line>
        <line t="C" i="788" b="5" n="3">!     Write the start tag (not compatible with JUnit XML schema)</line>
        <line t="X" i="789" b="5" n="3">      attr(1) = xml_attribute( 'assertions', ut%passed_assertions + ut%failed_assertions )</line>
        <line t="X" i="790" b="5" n="3">      attr(2) = xml_attribute( 'failures',ut%failed_assertions )</line>
        <line t="X" i="791" b="5" n="3">      attr(3) = xml_attribute( 'annotation',ut%annotation )</line>
        <line t="X" i="792" b="5" n="3">      call xml%write_start_tag( 'testcase-detail', attr=attr, newline=.true. )</line>
        <line t="X" i="793" b="5" n="3"></line>
        <line t="C" i="794" b="5" n="3">!     Generate the report</line>
        <line t="X" i="795" b="5" n="3">      call ut%report%write_xml( xml, fail_only )</line>
        <line t="X" i="796" b="5" n="3"></line>
        <line t="C" i="797" b="5" n="3">!     Write the end tag</line>
        <line t="X" i="798" b="5" n="3">      call xml%write_end_tag( 'testcase-detail' )</line>
        <line t="X" i="799" b="5" n="3"></line>
        <line t="X" i="800" b="5" n="2">    end if</line>
        <line t="X" i="801" b="5" n="2">    </line>
        <line t="X" i="802" b="6" n="2">  else</line>
        <line t="X" i="803" b="6" n="2">  </line>
        <line t="C" i="804" b="6" n="2">!   Test is skipped</line>
        <line t="X" i="805" b="6" n="2">    call xml%write_terminal( 'skipped' )</line>
        <line t="X" i="806" b="6" n="2">  </line>
        <line t="X" i="807" b="6" n="1">  end if</line>
        <line t="X" i="808" b="6" n="1"></line>
        <line t="C" i="809" b="6" n="1">! Write the report end tag</line>
        <line t="X" i="810" b="6" n="1">  call xml%write_end_tag( 'testcase' )</line>
        <line t="X" i="811" b="6" n="1"></line>
        <line t="ES" i="812" b="6" n="1">end subroutine xfunit_unit_write_xml</line>
        <line t="ES" i="813" b="1" n="1"></line>
        <line t="ES" i="814" b="1" n="1"></line>
        <line t="C" i="815" b="1" n="1">! Assertion for integer equality (kind=1)</line>
        <line k="xfunit_unit_assert_equal_integer_k1" t="S" i="816" b="1" n="1">subroutine xfunit_unit_assert_equal_integer_k1( ut, name, actual, expected, status )</line>
        <line t="S" i="817" b="1" n="1"></line>
        <line t="C" i="818" b="1" n="1">! The unit test case</line>
        <line t="X" i="819" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="820" b="1" n="1"></line>
        <line t="C" i="821" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="822" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="823" b="1" n="1"></line>
        <line t="C" i="824" b="1" n="1">! The actual computed value</line>
        <line t="X" i="825" b="1" n="1">  integer(kind=1), intent(in) :: actual</line>
        <line t="X" i="826" b="1" n="1"></line>
        <line t="C" i="827" b="1" n="1">! The expected value</line>
        <line t="X" i="828" b="1" n="1">  integer(kind=1), intent(in) :: expected</line>
        <line t="X" i="829" b="1" n="1"></line>
        <line t="C" i="830" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="831" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="832" b="1" n="1"></line>
        <line t="C" i="833" b="1" n="1">! Local variables</line>
        <line t="C" i="834" b="1" n="1"></line>
        <line t="C" i="835" b="1" n="1">! Use maximum integer kind for assertion</line>
        <line t="X" i="836" b="1" n="1">  call ut%xfunit_unit_assert_equal_integer_k8( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="837" b="1" n="1"></line>
        <line t="ES" i="838" b="1" n="1">end subroutine xfunit_unit_assert_equal_integer_k1</line>
        <line t="ES" i="839" b="1" n="1"></line>
        <line t="ES" i="840" b="1" n="1"></line>
        <line t="C" i="841" b="1" n="1">! Assertion for integer equality (kind=2)</line>
        <line k="xfunit_unit_assert_equal_integer_k2" t="S" i="842" b="1" n="1">subroutine xfunit_unit_assert_equal_integer_k2( ut, name, actual, expected, status )</line>
        <line t="S" i="843" b="1" n="1"></line>
        <line t="C" i="844" b="1" n="1">! The unit test case</line>
        <line t="X" i="845" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="846" b="1" n="1"></line>
        <line t="C" i="847" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="848" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="849" b="1" n="1"></line>
        <line t="C" i="850" b="1" n="1">! The actual computed value</line>
        <line t="X" i="851" b="1" n="1">  integer(kind=2), intent(in) :: actual</line>
        <line t="X" i="852" b="1" n="1"></line>
        <line t="C" i="853" b="1" n="1">! The expected value</line>
        <line t="X" i="854" b="1" n="1">  integer(kind=2), intent(in) :: expected</line>
        <line t="X" i="855" b="1" n="1"></line>
        <line t="C" i="856" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="857" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="858" b="1" n="1"></line>
        <line t="C" i="859" b="1" n="1">! Use maximum integer kind for assertion</line>
        <line t="X" i="860" b="1" n="1">  call ut%xfunit_unit_assert_equal_integer_k8( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="861" b="1" n="1"></line>
        <line t="ES" i="862" b="1" n="1">end subroutine xfunit_unit_assert_equal_integer_k2</line>
        <line t="ES" i="863" b="1" n="1"></line>
        <line t="ES" i="864" b="1" n="1"></line>
        <line t="C" i="865" b="1" n="1">! Assertion for integer equality (kind=4)</line>
        <line k="xfunit_unit_assert_equal_integer_k4" t="S" i="866" b="1" n="1">subroutine xfunit_unit_assert_equal_integer_k4( ut, name, actual, expected, status )</line>
        <line t="S" i="867" b="1" n="1"></line>
        <line t="C" i="868" b="1" n="1">! The unit test case</line>
        <line t="X" i="869" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="870" b="1" n="1"></line>
        <line t="C" i="871" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="872" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="873" b="1" n="1"></line>
        <line t="C" i="874" b="1" n="1">! The actual computed value</line>
        <line t="X" i="875" b="1" n="1">  integer(kind=4), intent(in) :: actual</line>
        <line t="X" i="876" b="1" n="1"></line>
        <line t="C" i="877" b="1" n="1">! The expected value</line>
        <line t="X" i="878" b="1" n="1">  integer(kind=4), intent(in) :: expected</line>
        <line t="X" i="879" b="1" n="1"></line>
        <line t="C" i="880" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="881" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="882" b="1" n="1"></line>
        <line t="C" i="883" b="1" n="1">! Use maximum integer kind for assertion</line>
        <line t="X" i="884" b="1" n="1">  call ut%xfunit_unit_assert_equal_integer_k8( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="885" b="1" n="1"></line>
        <line t="ES" i="886" b="1" n="1">end subroutine xfunit_unit_assert_equal_integer_k4</line>
        <line t="ES" i="887" b="1" n="1"></line>
        <line t="ES" i="888" b="1" n="1"></line>
        <line t="C" i="889" b="1" n="1">! Assertion for integer equality (kind=4)</line>
        <line k="xfunit_unit_assert_equal_integer_k8" t="S" i="890" b="1" n="1">subroutine xfunit_unit_assert_equal_integer_k8( ut, name, actual, expected, status )</line>
        <line t="S" i="891" b="1" n="1"></line>
        <line t="C" i="892" b="1" n="1">! The unit test case</line>
        <line t="X" i="893" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="894" b="1" n="1"></line>
        <line t="C" i="895" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="896" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="897" b="1" n="1"></line>
        <line t="C" i="898" b="1" n="1">! The actual computed value</line>
        <line t="X" i="899" b="1" n="1">  integer(kind=8), intent(in) :: actual</line>
        <line t="X" i="900" b="1" n="1"></line>
        <line t="C" i="901" b="1" n="1">! The expected value</line>
        <line t="X" i="902" b="1" n="1">  integer(kind=8), intent(in) :: expected</line>
        <line t="X" i="903" b="1" n="1"></line>
        <line t="C" i="904" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="905" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="906" b="1" n="1"></line>
        <line t="C" i="907" b="1" n="1">! Local variables</line>
        <line t="X" i="908" b="1" n="1">  type(t_xfunit_assertion_integer) :: assertion</line>
        <line t="X" i="909" b="1" n="1"></line>
        <line t="C" i="910" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="911" b="1" n="1">  assertion = xfunit_assertion_integer( name, actual, expected )</line>
        <line t="X" i="912" b="1" n="1"></line>
        <line t="C" i="913" b="1" n="1">! Process the assertion</line>
        <line t="X" i="914" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="915" b="1" n="1"></line>
        <line t="ES" i="916" b="1" n="1">end subroutine xfunit_unit_assert_equal_integer_k8</line>
        <line t="ES" i="917" b="1" n="1"></line>
        <line t="ES" i="918" b="1" n="1"></line>
        <line t="C" i="919" b="1" n="1">! Assertion for real equality (kind=4)</line>
        <line k="xfunit_unit_assert_equal_real_k4" t="S" i="920" b="1" n="1">subroutine xfunit_unit_assert_equal_real_k4( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="921" b="1" n="1"></line>
        <line t="C" i="922" b="1" n="1">! The unit test case</line>
        <line t="X" i="923" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="924" b="1" n="1"></line>
        <line t="C" i="925" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="926" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="927" b="1" n="1"></line>
        <line t="C" i="928" b="1" n="1">! The actual computed value</line>
        <line t="X" i="929" b="1" n="1">  real, intent(in) :: actual</line>
        <line t="X" i="930" b="1" n="1"></line>
        <line t="C" i="931" b="1" n="1">! The expected value</line>
        <line t="X" i="932" b="1" n="1">  real, intent(in) :: expected</line>
        <line t="X" i="933" b="1" n="1"></line>
        <line t="C" i="934" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="935" b="1" n="1">  real, optional, intent(in) :: threshold</line>
        <line t="X" i="936" b="1" n="1"></line>
        <line t="C" i="937" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="938" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="939" b="1" n="1"></line>
        <line t="C" i="940" b="1" n="1">! Use maximum real kind for assertion</line>
        <line t="X" i="941" b="2" n="2">  if( present(threshold) ) then</line>
        <line t="X" i="942" b="2" n="2">    call ut%xfunit_unit_assert_equal_real_k8( name, real(actual,8), real(expected,8), real(threshold,kind=8), status )</line>
        <line t="X" i="943" b="3" n="2">  else</line>
        <line t="X" i="944" b="3" n="2">    call ut%xfunit_unit_assert_equal_real_k8( name, real(actual,8), real(expected,8), status=status )</line>
        <line t="X" i="945" b="3" n="1">  end if</line>
        <line t="X" i="946" b="3" n="1"></line>
        <line t="ES" i="947" b="3" n="1">end subroutine xfunit_unit_assert_equal_real_k4</line>
        <line t="ES" i="948" b="1" n="1"></line>
        <line t="ES" i="949" b="1" n="1"></line>
        <line t="C" i="950" b="1" n="1">! Assertion for real(kind=8) equality</line>
        <line k="xfunit_unit_assert_equal_real_k8" t="S" i="951" b="1" n="1">subroutine xfunit_unit_assert_equal_real_k8( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="952" b="1" n="1"></line>
        <line t="C" i="953" b="1" n="1">! The unit test case</line>
        <line t="X" i="954" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="955" b="1" n="1"></line>
        <line t="C" i="956" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="957" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="958" b="1" n="1"></line>
        <line t="C" i="959" b="1" n="1">! The actual computed value</line>
        <line t="X" i="960" b="1" n="1">  real(kind=8), intent(in) :: actual</line>
        <line t="X" i="961" b="1" n="1"></line>
        <line t="C" i="962" b="1" n="1">! The expected value</line>
        <line t="X" i="963" b="1" n="1">  real(kind=8), intent(in) :: expected</line>
        <line t="X" i="964" b="1" n="1"></line>
        <line t="C" i="965" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="966" b="1" n="1">  real(kind=8), optional, intent(in) :: threshold</line>
        <line t="X" i="967" b="1" n="1"></line>
        <line t="C" i="968" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="969" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="970" b="1" n="1"></line>
        <line t="C" i="971" b="1" n="1">! Local variables</line>
        <line t="X" i="972" b="1" n="1">  type(t_xfunit_assertion_real) :: assertion</line>
        <line t="X" i="973" b="1" n="1"></line>
        <line t="C" i="974" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="975" b="1" n="1">  assertion = xfunit_assertion_real( name, actual, expected, threshold )</line>
        <line t="X" i="976" b="1" n="1"></line>
        <line t="C" i="977" b="1" n="1">! Process the assertion</line>
        <line t="X" i="978" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="979" b="1" n="1"></line>
        <line t="ES" i="980" b="1" n="1">end subroutine xfunit_unit_assert_equal_real_k8</line>
        <line t="ES" i="981" b="1" n="1"></line>
        <line t="ES" i="982" b="1" n="1"></line>
        <line t="C" i="983" b="1" n="1">! Assertion for complex equality</line>
        <line k="xfunit_unit_assert_equal_complex_k4" t="S" i="984" b="1" n="1">subroutine xfunit_unit_assert_equal_complex_k4( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="985" b="1" n="1"></line>
        <line t="C" i="986" b="1" n="1">! The unit test case</line>
        <line t="X" i="987" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="988" b="1" n="1"></line>
        <line t="C" i="989" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="990" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="991" b="1" n="1"></line>
        <line t="C" i="992" b="1" n="1">! The actual computed value</line>
        <line t="X" i="993" b="1" n="1">  complex(kind=4), intent(in) :: actual</line>
        <line t="X" i="994" b="1" n="1"></line>
        <line t="C" i="995" b="1" n="1">! The expected value</line>
        <line t="X" i="996" b="1" n="1">  complex(kind=4), intent(in) :: expected</line>
        <line t="X" i="997" b="1" n="1"></line>
        <line t="C" i="998" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="999" b="1" n="1">  real(kind=4), optional, intent(in) :: threshold</line>
        <line t="X" i="1000" b="1" n="1"></line>
        <line t="C" i="1001" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1002" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1003" b="1" n="1"></line>
        <line t="C" i="1004" b="1" n="1">! Use maximum complex kind for assertion</line>
        <line t="C" i="1005" b="1" n="1">! Use maximum real kind for assertion</line>
        <line t="X" i="1006" b="2" n="2">  if( present(threshold) ) then</line>
        <line t="X" i="1007" b="2" n="2">    call ut%xfunit_unit_assert_equal_complex_k8( name, cmplx(actual,kind=8), cmplx(expected,kind=8), real(threshold,8), status )</line>
        <line t="X" i="1008" b="3" n="2">  else</line>
        <line t="X" i="1009" b="3" n="2">    call ut%xfunit_unit_assert_equal_complex_k8( name, cmplx(actual,kind=8), cmplx(expected,kind=8), status=status )</line>
        <line t="X" i="1010" b="3" n="1">  end if</line>
        <line t="X" i="1011" b="3" n="1"></line>
        <line t="ES" i="1012" b="3" n="1">end subroutine xfunit_unit_assert_equal_complex_k4</line>
        <line t="ES" i="1013" b="1" n="1"></line>
        <line t="ES" i="1014" b="1" n="1"></line>
        <line t="C" i="1015" b="1" n="1">! Assertion for complex(kind=8) equality</line>
        <line k="xfunit_unit_assert_equal_complex_k8" t="S" i="1016" b="1" n="1">subroutine xfunit_unit_assert_equal_complex_k8( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="1017" b="1" n="1"></line>
        <line t="C" i="1018" b="1" n="1">! The unit test case</line>
        <line t="X" i="1019" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1020" b="1" n="1"></line>
        <line t="C" i="1021" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1022" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1023" b="1" n="1"></line>
        <line t="C" i="1024" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1025" b="1" n="1">  complex(kind=8), intent(in) :: actual</line>
        <line t="X" i="1026" b="1" n="1"></line>
        <line t="C" i="1027" b="1" n="1">! The expected value</line>
        <line t="X" i="1028" b="1" n="1">  complex(kind=8), intent(in) :: expected</line>
        <line t="X" i="1029" b="1" n="1"></line>
        <line t="C" i="1030" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="1031" b="1" n="1">  real(kind=8), optional, intent(in) :: threshold</line>
        <line t="X" i="1032" b="1" n="1"></line>
        <line t="C" i="1033" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1034" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1035" b="1" n="1"></line>
        <line t="C" i="1036" b="1" n="1">! Local variables</line>
        <line t="X" i="1037" b="1" n="1">  type(t_xfunit_assertion_complex) :: assertion</line>
        <line t="X" i="1038" b="1" n="1"></line>
        <line t="C" i="1039" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="1040" b="1" n="1">  assertion = xfunit_assertion_complex( name, actual, expected, threshold )</line>
        <line t="X" i="1041" b="1" n="1"></line>
        <line t="C" i="1042" b="1" n="1">! Process the assertion</line>
        <line t="X" i="1043" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1044" b="1" n="1"></line>
        <line t="ES" i="1045" b="1" n="1">end subroutine xfunit_unit_assert_equal_complex_k8</line>
        <line t="ES" i="1046" b="1" n="1"></line>
        <line t="ES" i="1047" b="1" n="1"></line>
        <line t="C" i="1048" b="1" n="1">! Assertion for character equality</line>
        <line k="xfunit_unit_assert_equal_character" t="S" i="1049" b="1" n="1">subroutine xfunit_unit_assert_equal_character( ut, name, actual, expected, matching, ignorecase, status )</line>
        <line t="S" i="1050" b="1" n="1"></line>
        <line t="C" i="1051" b="1" n="1">! The unit test case</line>
        <line t="X" i="1052" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1053" b="1" n="1"></line>
        <line t="C" i="1054" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1055" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1056" b="1" n="1"></line>
        <line t="C" i="1057" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1058" b="1" n="1">  character(len=*), intent(in) :: actual</line>
        <line t="X" i="1059" b="1" n="1"></line>
        <line t="C" i="1060" b="1" n="1">! The expected value</line>
        <line t="X" i="1061" b="1" n="1">  character(len=*), intent(in) :: expected</line>
        <line t="X" i="1062" b="1" n="1"></line>
        <line t="C" i="1063" b="1" n="1">! The character matching strategy (optional, default to exact)</line>
        <line t="C" i="1064" b="1" n="1">! Enumerated values in m_xfunit_assertion</line>
        <line t="X" i="1065" b="1" n="1">  integer, optional, intent(in) :: matching</line>
        <line t="X" i="1066" b="1" n="1"></line>
        <line t="C" i="1067" b="1" n="1">! Ignore case in comparison (optional)</line>
        <line t="X" i="1068" b="1" n="1">  logical, optional, intent(in) :: ignorecase</line>
        <line t="X" i="1069" b="1" n="1"></line>
        <line t="C" i="1070" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1071" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1072" b="1" n="1"></line>
        <line t="C" i="1073" b="1" n="1">! Local variables</line>
        <line t="X" i="1074" b="1" n="1">  type(t_xfunit_assertion_character) :: assertion</line>
        <line t="X" i="1075" b="1" n="1"></line>
        <line t="C" i="1076" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="1077" b="1" n="1">  assertion = xfunit_assertion_character( name, actual, expected, matching=matching, ignorecase=ignorecase )</line>
        <line t="X" i="1078" b="1" n="1"></line>
        <line t="C" i="1079" b="1" n="1">! Process the assertion</line>
        <line t="X" i="1080" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1081" b="1" n="1"></line>
        <line t="ES" i="1082" b="1" n="1">end subroutine xfunit_unit_assert_equal_character</line>
        <line t="ES" i="1083" b="1" n="1"></line>
        <line t="ES" i="1084" b="1" n="1"></line>
        <line t="C" i="1085" b="1" n="1">! Assertion for string equality</line>
        <line k="xfunit_unit_assert_equal_string" t="S" i="1086" b="1" n="1">subroutine xfunit_unit_assert_equal_string( ut, name, actual, expected, matching, ignorecase, status )</line>
        <line t="S" i="1087" b="1" n="1"></line>
        <line t="C" i="1088" b="1" n="1">! The unit test case</line>
        <line t="X" i="1089" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1090" b="1" n="1"></line>
        <line t="C" i="1091" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1092" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1093" b="1" n="1"></line>
        <line t="C" i="1094" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1095" b="1" n="1">  type(t_string), intent(in) :: actual</line>
        <line t="X" i="1096" b="1" n="1"></line>
        <line t="C" i="1097" b="1" n="1">! The expected value</line>
        <line t="X" i="1098" b="1" n="1">  type(t_string), intent(in) :: expected</line>
        <line t="X" i="1099" b="1" n="1"></line>
        <line t="C" i="1100" b="1" n="1">! The character matching strategy (optional, default to exact)</line>
        <line t="C" i="1101" b="1" n="1">! Enumerated values in m_xfunit_assertion</line>
        <line t="X" i="1102" b="1" n="1">  integer, optional, intent(in) :: matching</line>
        <line t="X" i="1103" b="1" n="1"></line>
        <line t="C" i="1104" b="1" n="1">! Ignore case in comparison (optional)</line>
        <line t="X" i="1105" b="1" n="1">  logical, optional, intent(in) :: ignorecase</line>
        <line t="X" i="1106" b="1" n="1"></line>
        <line t="C" i="1107" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1108" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1109" b="1" n="1"></line>
        <line t="C" i="1110" b="1" n="1">! Local variables</line>
        <line t="X" i="1111" b="1" n="1">  type(t_xfunit_assertion_string) :: assertion</line>
        <line t="X" i="1112" b="1" n="1"></line>
        <line t="C" i="1113" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="1114" b="1" n="1">  assertion = xfunit_assertion_string( name, actual, expected, matching=matching, ignorecase=ignorecase )</line>
        <line t="X" i="1115" b="1" n="1"></line>
        <line t="C" i="1116" b="1" n="1">! Process the assertion</line>
        <line t="X" i="1117" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1118" b="1" n="1"></line>
        <line t="ES" i="1119" b="1" n="1">end subroutine xfunit_unit_assert_equal_string</line>
        <line t="ES" i="1120" b="1" n="1"></line>
        <line t="ES" i="1121" b="1" n="1"></line>
        <line t="C" i="1122" b="1" n="1">! Assertion for logical equality (kind=1)</line>
        <line k="xfunit_unit_assert_equal_logical_k1" t="S" i="1123" b="1" n="1">subroutine xfunit_unit_assert_equal_logical_k1( ut, name, actual, expected, status )</line>
        <line t="S" i="1124" b="1" n="1"></line>
        <line t="C" i="1125" b="1" n="1">! The unit test case</line>
        <line t="X" i="1126" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1127" b="1" n="1"></line>
        <line t="C" i="1128" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1129" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1130" b="1" n="1"></line>
        <line t="C" i="1131" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1132" b="1" n="1">  logical(kind=1), intent(in) :: actual</line>
        <line t="X" i="1133" b="1" n="1"></line>
        <line t="C" i="1134" b="1" n="1">! The expected value</line>
        <line t="X" i="1135" b="1" n="1">  logical(kind=1), intent(in) :: expected</line>
        <line t="X" i="1136" b="1" n="1"></line>
        <line t="C" i="1137" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1138" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1139" b="1" n="1"></line>
        <line t="C" i="1140" b="1" n="1">! Use maximum logical kind for assertion</line>
        <line t="X" i="1141" b="1" n="1">  call ut%xfunit_unit_assert_equal_logical_k4( name, logical(actual,4), logical(expected,4), status )</line>
        <line t="X" i="1142" b="1" n="1"></line>
        <line t="ES" i="1143" b="1" n="1">end subroutine xfunit_unit_assert_equal_logical_k1</line>
        <line t="ES" i="1144" b="1" n="1"></line>
        <line t="ES" i="1145" b="1" n="1"></line>
        <line t="C" i="1146" b="1" n="1">! Assertion for logical equality (kind=2)</line>
        <line k="xfunit_unit_assert_equal_logical_k2" t="S" i="1147" b="1" n="1">subroutine xfunit_unit_assert_equal_logical_k2( ut, name, actual, expected, status )</line>
        <line t="S" i="1148" b="1" n="1"></line>
        <line t="C" i="1149" b="1" n="1">! The unit test case</line>
        <line t="X" i="1150" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1151" b="1" n="1"></line>
        <line t="C" i="1152" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1153" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1154" b="1" n="1"></line>
        <line t="C" i="1155" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1156" b="1" n="1">  logical(kind=2), intent(in) :: actual</line>
        <line t="X" i="1157" b="1" n="1"></line>
        <line t="C" i="1158" b="1" n="1">! The expected value</line>
        <line t="X" i="1159" b="1" n="1">  logical(kind=2), intent(in) :: expected</line>
        <line t="X" i="1160" b="1" n="1"></line>
        <line t="C" i="1161" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1162" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1163" b="1" n="1"></line>
        <line t="C" i="1164" b="1" n="1">! Use maximum logical kind for assertion</line>
        <line t="X" i="1165" b="1" n="1">  call ut%xfunit_unit_assert_equal_logical_k4( name, logical(actual,4), logical(expected,4), status )</line>
        <line t="X" i="1166" b="1" n="1"></line>
        <line t="ES" i="1167" b="1" n="1">end subroutine xfunit_unit_assert_equal_logical_k2</line>
        <line t="ES" i="1168" b="1" n="1"></line>
        <line t="ES" i="1169" b="1" n="1"></line>
        <line t="C" i="1170" b="1" n="1">! Assertion for logical equality (kind=4)</line>
        <line k="xfunit_unit_assert_equal_logical_k4" t="S" i="1171" b="1" n="1">subroutine xfunit_unit_assert_equal_logical_k4( ut, name, actual, expected, status )</line>
        <line t="S" i="1172" b="1" n="1"></line>
        <line t="C" i="1173" b="1" n="1">! The unit test case</line>
        <line t="X" i="1174" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1175" b="1" n="1"></line>
        <line t="C" i="1176" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1177" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1178" b="1" n="1"></line>
        <line t="C" i="1179" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1180" b="1" n="1">  logical(kind=4), intent(in) :: actual</line>
        <line t="X" i="1181" b="1" n="1"></line>
        <line t="C" i="1182" b="1" n="1">! The expected value</line>
        <line t="X" i="1183" b="1" n="1">  logical(kind=4), intent(in) :: expected</line>
        <line t="X" i="1184" b="1" n="1"></line>
        <line t="C" i="1185" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1186" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1187" b="1" n="1"></line>
        <line t="C" i="1188" b="1" n="1">! Local variables</line>
        <line t="X" i="1189" b="1" n="1">  type(t_xfunit_assertion_logical) :: assertion</line>
        <line t="X" i="1190" b="1" n="1"></line>
        <line t="C" i="1191" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="1192" b="1" n="1">  assertion = xfunit_assertion_logical( name, actual, expected )</line>
        <line t="X" i="1193" b="1" n="1"></line>
        <line t="C" i="1194" b="1" n="1">! Process the assertion</line>
        <line t="X" i="1195" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1196" b="1" n="1"></line>
        <line t="ES" i="1197" b="1" n="1">end subroutine xfunit_unit_assert_equal_logical_k4</line>
        <line t="ES" i="1198" b="1" n="1"></line>
        <line t="ES" i="1199" b="1" n="1"></line>
        <line t="C" i="1200" b="1" n="1">! Assertion for logical equality (kind=4)</line>
        <line k="xfunit_unit_assert_equal_class" t="S" i="1201" b="1" n="1">subroutine xfunit_unit_assert_equal_class( ut, name, actual, expected, equal, serialize, status )</line>
        <line t="S" i="1202" b="1" n="1"></line>
        <line t="C" i="1203" b="1" n="1">! The unit test case</line>
        <line t="X" i="1204" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1205" b="1" n="1"></line>
        <line t="C" i="1206" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1207" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1208" b="1" n="1"></line>
        <line t="C" i="1209" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1210" b="1" n="1">  class(*), intent(in) :: actual</line>
        <line t="X" i="1211" b="1" n="1"></line>
        <line t="C" i="1212" b="1" n="1">! The expected value</line>
        <line t="X" i="1213" b="1" n="1">  class(*), intent(in) :: expected</line>
        <line t="X" i="1214" b="1" n="1"></line>
        <line t="C" i="1215" b="1" n="1">! The equality comparer</line>
        <line t="X" i="1216" b="1" n="1">  procedure(xfunit_assertion_class_equal) :: equal</line>
        <line t="X" i="1217" b="1" n="1"></line>
        <line t="C" i="1218" b="1" n="1">! Serialization function</line>
        <line t="X" i="1219" b="1" n="1">  procedure(xfunit_assertion_class_serialize), optional :: serialize</line>
        <line t="X" i="1220" b="1" n="1"></line>
        <line t="C" i="1221" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1222" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1223" b="1" n="1"></line>
        <line t="C" i="1224" b="1" n="1">! Local variables</line>
        <line t="X" i="1225" b="1" n="1">  type(t_xfunit_assertion_class) :: assertion</line>
        <line t="X" i="1226" b="1" n="1"></line>
        <line t="C" i="1227" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="1228" b="1" n="1">  assertion = xfunit_assertion_class( name, actual, expected, equal, serialize )</line>
        <line t="X" i="1229" b="1" n="1"></line>
        <line t="C" i="1230" b="1" n="1">! Process the assertion</line>
        <line t="X" i="1231" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1232" b="1" n="1"></line>
        <line t="ES" i="1233" b="1" n="1">end subroutine xfunit_unit_assert_equal_class</line>
        <line t="ES" i="1234" b="1" n="1"></line>
        <line t="ES" i="1235" b="1" n="1"></line>
        <line t="C" i="1236" b="1" n="1">! Assertion for integer range (kind=1)</line>
        <line k="xfunit_unit_assert_between_integer_k1" t="S" i="1237" b="1" n="1">subroutine xfunit_unit_assert_between_integer_k1( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="1238" b="1" n="1"></line>
        <line t="C" i="1239" b="1" n="1">! The unit test case</line>
        <line t="X" i="1240" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1241" b="1" n="1"></line>
        <line t="C" i="1242" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1243" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1244" b="1" n="1"></line>
        <line t="C" i="1245" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1246" b="1" n="1">  integer(kind=1), intent(in) :: actual</line>
        <line t="X" i="1247" b="1" n="1"></line>
        <line t="C" i="1248" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1249" b="1" n="1">  integer(kind=1), intent(in) :: low</line>
        <line t="X" i="1250" b="1" n="1"></line>
        <line t="C" i="1251" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1252" b="1" n="1">  integer(kind=1), intent(in) :: high</line>
        <line t="X" i="1253" b="1" n="1"></line>
        <line t="C" i="1254" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1255" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1256" b="1" n="1"></line>
        <line t="C" i="1257" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1258" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1259" b="1" n="1"></line>
        <line t="C" i="1260" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1261" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1262" b="1" n="1"></line>
        <line t="C" i="1263" b="1" n="1">! Use maximum intege kind for assertion</line>
        <line t="X" i="1264" b="1" n="1">  call ut%xfunit_unit_assert_between_integer_k8( name, int(actual,8), int(low,8), int(high,8), open_low, open_high, status )</line>
        <line t="X" i="1265" b="1" n="1"></line>
        <line t="ES" i="1266" b="1" n="1">end subroutine xfunit_unit_assert_between_integer_k1</line>
        <line t="ES" i="1267" b="1" n="1"></line>
        <line t="ES" i="1268" b="1" n="1"></line>
        <line t="C" i="1269" b="1" n="1">! Assertion for integer range (kind=2)</line>
        <line k="xfunit_unit_assert_between_integer_k2" t="S" i="1270" b="1" n="1">subroutine xfunit_unit_assert_between_integer_k2( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="1271" b="1" n="1"></line>
        <line t="C" i="1272" b="1" n="1">! The unit test case</line>
        <line t="X" i="1273" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1274" b="1" n="1"></line>
        <line t="C" i="1275" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1276" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1277" b="1" n="1"></line>
        <line t="C" i="1278" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1279" b="1" n="1">  integer(kind=2), intent(in) :: actual</line>
        <line t="X" i="1280" b="1" n="1"></line>
        <line t="C" i="1281" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1282" b="1" n="1">  integer(kind=2), intent(in) :: low</line>
        <line t="X" i="1283" b="1" n="1"></line>
        <line t="C" i="1284" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1285" b="1" n="1">  integer(kind=2), intent(in) :: high</line>
        <line t="X" i="1286" b="1" n="1"></line>
        <line t="C" i="1287" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1288" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1289" b="1" n="1"></line>
        <line t="C" i="1290" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1291" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1292" b="1" n="1"></line>
        <line t="C" i="1293" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1294" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1295" b="1" n="1"></line>
        <line t="C" i="1296" b="1" n="1">! Use maximum integer kind for assertion</line>
        <line t="X" i="1297" b="1" n="1">  call ut%xfunit_unit_assert_between_integer_k8( name, int(actual,8), int(low,8), int(high,8), open_low, open_high, status )</line>
        <line t="X" i="1298" b="1" n="1"></line>
        <line t="ES" i="1299" b="1" n="1">end subroutine xfunit_unit_assert_between_integer_k2</line>
        <line t="ES" i="1300" b="1" n="1"></line>
        <line t="ES" i="1301" b="1" n="1"></line>
        <line t="C" i="1302" b="1" n="1">! Assertion for integer range (kind=4)</line>
        <line k="xfunit_unit_assert_between_integer_k4" t="S" i="1303" b="1" n="1">subroutine xfunit_unit_assert_between_integer_k4( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="1304" b="1" n="1"></line>
        <line t="C" i="1305" b="1" n="1">! The unit test case</line>
        <line t="X" i="1306" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1307" b="1" n="1"></line>
        <line t="C" i="1308" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1309" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1310" b="1" n="1"></line>
        <line t="C" i="1311" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1312" b="1" n="1">  integer(kind=4), intent(in) :: actual</line>
        <line t="X" i="1313" b="1" n="1"></line>
        <line t="C" i="1314" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1315" b="1" n="1">  integer(kind=4), intent(in) :: low</line>
        <line t="X" i="1316" b="1" n="1"></line>
        <line t="C" i="1317" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1318" b="1" n="1">  integer(kind=4), intent(in) :: high</line>
        <line t="X" i="1319" b="1" n="1"></line>
        <line t="C" i="1320" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1321" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1322" b="1" n="1"></line>
        <line t="C" i="1323" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1324" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1325" b="1" n="1"></line>
        <line t="C" i="1326" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1327" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1328" b="1" n="1"></line>
        <line t="C" i="1329" b="1" n="1">! Use maximum intege kind for assertion</line>
        <line t="X" i="1330" b="1" n="1">  call ut%xfunit_unit_assert_between_integer_k8( name, int(actual,8), int(low,8), int(high,8), open_low, open_high, status )</line>
        <line t="X" i="1331" b="1" n="1"></line>
        <line t="ES" i="1332" b="1" n="1">end subroutine xfunit_unit_assert_between_integer_k4</line>
        <line t="ES" i="1333" b="1" n="1"></line>
        <line t="ES" i="1334" b="1" n="1"></line>
        <line t="C" i="1335" b="1" n="1">! Assertion for integer range (kind=8)</line>
        <line k="xfunit_unit_assert_between_integer_k8" t="S" i="1336" b="1" n="1">subroutine xfunit_unit_assert_between_integer_k8( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="1337" b="1" n="1"></line>
        <line t="C" i="1338" b="1" n="1">! The unit test case</line>
        <line t="X" i="1339" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1340" b="1" n="1"></line>
        <line t="C" i="1341" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1342" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1343" b="1" n="1"></line>
        <line t="C" i="1344" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1345" b="1" n="1">  integer(kind=8), intent(in) :: actual</line>
        <line t="X" i="1346" b="1" n="1"></line>
        <line t="C" i="1347" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1348" b="1" n="1">  integer(kind=8), intent(in) :: low</line>
        <line t="X" i="1349" b="1" n="1"></line>
        <line t="C" i="1350" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1351" b="1" n="1">  integer(kind=8), intent(in) :: high</line>
        <line t="X" i="1352" b="1" n="1"></line>
        <line t="C" i="1353" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1354" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1355" b="1" n="1"></line>
        <line t="C" i="1356" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1357" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1358" b="1" n="1"></line>
        <line t="C" i="1359" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1360" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1361" b="1" n="1"></line>
        <line t="C" i="1362" b="1" n="1">! Local variables</line>
        <line t="X" i="1363" b="1" n="1">  type(t_xfunit_assertion_integer_between) :: assertion</line>
        <line t="X" i="1364" b="1" n="1"></line>
        <line t="C" i="1365" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="1366" b="1" n="1">  assertion = xfunit_assertion_integer_between( name, actual, low, high, open_low, open_high )</line>
        <line t="X" i="1367" b="1" n="1"></line>
        <line t="C" i="1368" b="1" n="1">! Process the assertion</line>
        <line t="X" i="1369" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1370" b="1" n="1"></line>
        <line t="ES" i="1371" b="1" n="1">end subroutine xfunit_unit_assert_between_integer_k8</line>
        <line t="ES" i="1372" b="1" n="1"></line>
        <line t="ES" i="1373" b="1" n="1"></line>
        <line t="C" i="1374" b="1" n="1">! Assertion for integer range (kind=1)</line>
        <line k="xfunit_unit_assert_greater_integer_k1" t="S" i="1375" b="1" n="1">subroutine xfunit_unit_assert_greater_integer_k1( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="1376" b="1" n="1"></line>
        <line t="C" i="1377" b="1" n="1">! The unit test case</line>
        <line t="X" i="1378" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1379" b="1" n="1"></line>
        <line t="C" i="1380" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1381" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1382" b="1" n="1"></line>
        <line t="C" i="1383" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1384" b="1" n="1">  integer(kind=1), intent(in) :: actual</line>
        <line t="X" i="1385" b="1" n="1"></line>
        <line t="C" i="1386" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1387" b="1" n="1">  integer(kind=1), intent(in) :: low</line>
        <line t="X" i="1388" b="1" n="1"></line>
        <line t="C" i="1389" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1390" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1391" b="1" n="1"></line>
        <line t="C" i="1392" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1393" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1394" b="1" n="1"></line>
        <line t="C" i="1395" b="1" n="1">! Use maximum intege rkind for assertion</line>
        <line t="X" i="1396" b="1" n="1">  call ut%xfunit_unit_assert_greater_integer_k8( name, int(actual,8), int(low,8), open_low, status )</line>
        <line t="X" i="1397" b="1" n="1"></line>
        <line t="ES" i="1398" b="1" n="1">end subroutine xfunit_unit_assert_greater_integer_k1</line>
        <line t="ES" i="1399" b="1" n="1"></line>
        <line t="ES" i="1400" b="1" n="1"></line>
        <line t="C" i="1401" b="1" n="1">! Assertion for integer range (kind=2)</line>
        <line k="xfunit_unit_assert_greater_integer_k2" t="S" i="1402" b="1" n="1">subroutine xfunit_unit_assert_greater_integer_k2( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="1403" b="1" n="1"></line>
        <line t="C" i="1404" b="1" n="1">! The unit test case</line>
        <line t="X" i="1405" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1406" b="1" n="1"></line>
        <line t="C" i="1407" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1408" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1409" b="1" n="1"></line>
        <line t="C" i="1410" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1411" b="1" n="1">  integer(kind=2), intent(in) :: actual</line>
        <line t="X" i="1412" b="1" n="1"></line>
        <line t="C" i="1413" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1414" b="1" n="1">  integer(kind=2), intent(in) :: low</line>
        <line t="X" i="1415" b="1" n="1"></line>
        <line t="C" i="1416" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1417" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1418" b="1" n="1"></line>
        <line t="C" i="1419" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1420" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1421" b="1" n="1"></line>
        <line t="C" i="1422" b="1" n="1">! Use maximum integer kind for assertion</line>
        <line t="X" i="1423" b="1" n="1">  call ut%xfunit_unit_assert_greater_integer_k8( name, int(actual,8), int(low,8), open_low, status )</line>
        <line t="X" i="1424" b="1" n="1"></line>
        <line t="ES" i="1425" b="1" n="1">end subroutine xfunit_unit_assert_greater_integer_k2</line>
        <line t="ES" i="1426" b="1" n="1"></line>
        <line t="ES" i="1427" b="1" n="1"></line>
        <line t="C" i="1428" b="1" n="1">! Assertion for integer range (kind=4)</line>
        <line k="xfunit_unit_assert_greater_integer_k4" t="S" i="1429" b="1" n="1">subroutine xfunit_unit_assert_greater_integer_k4( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="1430" b="1" n="1"></line>
        <line t="C" i="1431" b="1" n="1">! The unit test case</line>
        <line t="X" i="1432" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1433" b="1" n="1"></line>
        <line t="C" i="1434" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1435" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1436" b="1" n="1"></line>
        <line t="C" i="1437" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1438" b="1" n="1">  integer(kind=4), intent(in) :: actual</line>
        <line t="X" i="1439" b="1" n="1"></line>
        <line t="C" i="1440" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1441" b="1" n="1">  integer(kind=4), intent(in) :: low</line>
        <line t="X" i="1442" b="1" n="1"></line>
        <line t="C" i="1443" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1444" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1445" b="1" n="1"></line>
        <line t="C" i="1446" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1447" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1448" b="1" n="1"></line>
        <line t="C" i="1449" b="1" n="1">! Use maximum intege rkind for assertion</line>
        <line t="X" i="1450" b="1" n="1">  call ut%xfunit_unit_assert_greater_integer_k8( name, int(actual,8), int(low,8), open_low, status )</line>
        <line t="X" i="1451" b="1" n="1"></line>
        <line t="ES" i="1452" b="1" n="1">end subroutine xfunit_unit_assert_greater_integer_k4</line>
        <line t="ES" i="1453" b="1" n="1"></line>
        <line t="ES" i="1454" b="1" n="1"></line>
        <line t="C" i="1455" b="1" n="1">! Assertion for integer range (kind=8)</line>
        <line k="xfunit_unit_assert_greater_integer_k8" t="S" i="1456" b="1" n="1">subroutine xfunit_unit_assert_greater_integer_k8( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="1457" b="1" n="1"></line>
        <line t="C" i="1458" b="1" n="1">! The unit test case</line>
        <line t="X" i="1459" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1460" b="1" n="1"></line>
        <line t="C" i="1461" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1462" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1463" b="1" n="1"></line>
        <line t="C" i="1464" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1465" b="1" n="1">  integer(kind=8), intent(in) :: actual</line>
        <line t="X" i="1466" b="1" n="1"></line>
        <line t="C" i="1467" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1468" b="1" n="1">  integer(kind=8), intent(in) :: low</line>
        <line t="X" i="1469" b="1" n="1"></line>
        <line t="C" i="1470" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1471" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1472" b="1" n="1"></line>
        <line t="C" i="1473" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1474" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1475" b="1" n="1"></line>
        <line t="C" i="1476" b="1" n="1">! Local variables</line>
        <line t="X" i="1477" b="1" n="1">  type(t_xfunit_assertion_integer_greater) :: assertion</line>
        <line t="X" i="1478" b="1" n="1"></line>
        <line t="C" i="1479" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="1480" b="1" n="1">  assertion = xfunit_assertion_integer_greater( name, actual, low, open_low )</line>
        <line t="X" i="1481" b="1" n="1"></line>
        <line t="C" i="1482" b="1" n="1">! Process the assertion</line>
        <line t="X" i="1483" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1484" b="1" n="1"></line>
        <line t="ES" i="1485" b="1" n="1">end subroutine xfunit_unit_assert_greater_integer_k8</line>
        <line t="ES" i="1486" b="1" n="1"></line>
        <line t="ES" i="1487" b="1" n="1"></line>
        <line t="C" i="1488" b="1" n="1">! Assertion for integer range (kind=1)</line>
        <line k="xfunit_unit_assert_less_integer_k1" t="S" i="1489" b="1" n="1">subroutine xfunit_unit_assert_less_integer_k1( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="1490" b="1" n="1"></line>
        <line t="C" i="1491" b="1" n="1">! The unit test case</line>
        <line t="X" i="1492" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1493" b="1" n="1"></line>
        <line t="C" i="1494" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1495" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1496" b="1" n="1"></line>
        <line t="C" i="1497" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1498" b="1" n="1">  integer(kind=1), intent(in) :: actual</line>
        <line t="X" i="1499" b="1" n="1"></line>
        <line t="C" i="1500" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1501" b="1" n="1">  integer(kind=1), intent(in) :: high</line>
        <line t="X" i="1502" b="1" n="1"></line>
        <line t="C" i="1503" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1504" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1505" b="1" n="1"></line>
        <line t="C" i="1506" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1507" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1508" b="1" n="1"></line>
        <line t="C" i="1509" b="1" n="1">! Use maximum integer kind for assertion</line>
        <line t="X" i="1510" b="1" n="1">  call ut%xfunit_unit_assert_less_integer_k8( name, int(actual,8), int(high,8), open_high, status )</line>
        <line t="X" i="1511" b="1" n="1"></line>
        <line t="ES" i="1512" b="1" n="1">end subroutine xfunit_unit_assert_less_integer_k1</line>
        <line t="ES" i="1513" b="1" n="1"></line>
        <line t="ES" i="1514" b="1" n="1"></line>
        <line t="C" i="1515" b="1" n="1">! Assertion for integer range (kind=2)</line>
        <line k="xfunit_unit_assert_less_integer_k2" t="S" i="1516" b="1" n="1">subroutine xfunit_unit_assert_less_integer_k2( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="1517" b="1" n="1"></line>
        <line t="C" i="1518" b="1" n="1">! The unit test case</line>
        <line t="X" i="1519" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1520" b="1" n="1"></line>
        <line t="C" i="1521" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1522" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1523" b="1" n="1"></line>
        <line t="C" i="1524" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1525" b="1" n="1">  integer(kind=2), intent(in) :: actual</line>
        <line t="X" i="1526" b="1" n="1"></line>
        <line t="C" i="1527" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1528" b="1" n="1">  integer(kind=2), intent(in) :: high</line>
        <line t="X" i="1529" b="1" n="1"></line>
        <line t="C" i="1530" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1531" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1532" b="1" n="1"></line>
        <line t="C" i="1533" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1534" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1535" b="1" n="1"></line>
        <line t="C" i="1536" b="1" n="1">! Use maximum integer kind for assertion</line>
        <line t="X" i="1537" b="1" n="1">  call ut%xfunit_unit_assert_less_integer_k8( name, int(actual,8), int(high,8), open_high, status )</line>
        <line t="X" i="1538" b="1" n="1"></line>
        <line t="ES" i="1539" b="1" n="1">end subroutine xfunit_unit_assert_less_integer_k2</line>
        <line t="ES" i="1540" b="1" n="1"></line>
        <line t="ES" i="1541" b="1" n="1"></line>
        <line t="C" i="1542" b="1" n="1">! Assertion for integer range (kind=4)</line>
        <line k="xfunit_unit_assert_less_integer_k4" t="S" i="1543" b="1" n="1">subroutine xfunit_unit_assert_less_integer_k4( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="1544" b="1" n="1"></line>
        <line t="C" i="1545" b="1" n="1">! The unit test case</line>
        <line t="X" i="1546" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1547" b="1" n="1"></line>
        <line t="C" i="1548" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1549" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1550" b="1" n="1"></line>
        <line t="C" i="1551" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1552" b="1" n="1">  integer(kind=4), intent(in) :: actual</line>
        <line t="X" i="1553" b="1" n="1"></line>
        <line t="C" i="1554" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1555" b="1" n="1">  integer(kind=4), intent(in) :: high</line>
        <line t="X" i="1556" b="1" n="1"></line>
        <line t="C" i="1557" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1558" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1559" b="1" n="1"></line>
        <line t="C" i="1560" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1561" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1562" b="1" n="1"></line>
        <line t="C" i="1563" b="1" n="1">! Use maximum integer kind for assertion</line>
        <line t="X" i="1564" b="1" n="1">  call ut%xfunit_unit_assert_less_integer_k8( name, int(actual,8), int(high,8), open_high, status )</line>
        <line t="X" i="1565" b="1" n="1"></line>
        <line t="ES" i="1566" b="1" n="1">end subroutine xfunit_unit_assert_less_integer_k4</line>
        <line t="ES" i="1567" b="1" n="1"></line>
        <line t="ES" i="1568" b="1" n="1"></line>
        <line t="C" i="1569" b="1" n="1">! Assertion for integer range (kind=8)</line>
        <line k="xfunit_unit_assert_less_integer_k8" t="S" i="1570" b="1" n="1">subroutine xfunit_unit_assert_less_integer_k8( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="1571" b="1" n="1"></line>
        <line t="C" i="1572" b="1" n="1">! The unit test case</line>
        <line t="X" i="1573" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1574" b="1" n="1"></line>
        <line t="C" i="1575" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1576" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1577" b="1" n="1"></line>
        <line t="C" i="1578" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1579" b="1" n="1">  integer(kind=8), intent(in) :: actual</line>
        <line t="X" i="1580" b="1" n="1"></line>
        <line t="C" i="1581" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1582" b="1" n="1">  integer(kind=8), intent(in) :: high</line>
        <line t="X" i="1583" b="1" n="1"></line>
        <line t="C" i="1584" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1585" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1586" b="1" n="1"></line>
        <line t="C" i="1587" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1588" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1589" b="1" n="1"></line>
        <line t="C" i="1590" b="1" n="1">! Local variables</line>
        <line t="X" i="1591" b="1" n="1">  type(t_xfunit_assertion_integer_less) :: assertion</line>
        <line t="X" i="1592" b="1" n="1"></line>
        <line t="C" i="1593" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="1594" b="1" n="1">  assertion = xfunit_assertion_integer_less( name, actual, high, open_high )</line>
        <line t="X" i="1595" b="1" n="1"></line>
        <line t="C" i="1596" b="1" n="1">! Process the assertion</line>
        <line t="X" i="1597" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1598" b="1" n="1"></line>
        <line t="ES" i="1599" b="1" n="1">end subroutine xfunit_unit_assert_less_integer_k8</line>
        <line t="ES" i="1600" b="1" n="1"></line>
        <line t="ES" i="1601" b="1" n="1"></line>
        <line t="C" i="1602" b="1" n="1">! Assertion for real range (kind=4)</line>
        <line k="xfunit_unit_assert_between_real_k4" t="S" i="1603" b="1" n="1">subroutine xfunit_unit_assert_between_real_k4( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="1604" b="1" n="1"></line>
        <line t="C" i="1605" b="1" n="1">! The unit test case</line>
        <line t="X" i="1606" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1607" b="1" n="1"></line>
        <line t="C" i="1608" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1609" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1610" b="1" n="1"></line>
        <line t="C" i="1611" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1612" b="1" n="1">  real(kind=4), intent(in) :: actual</line>
        <line t="X" i="1613" b="1" n="1"></line>
        <line t="C" i="1614" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1615" b="1" n="1">  real(kind=4), intent(in) :: low</line>
        <line t="X" i="1616" b="1" n="1"></line>
        <line t="C" i="1617" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1618" b="1" n="1">  real(kind=4), intent(in) :: high</line>
        <line t="X" i="1619" b="1" n="1"></line>
        <line t="C" i="1620" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1621" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1622" b="1" n="1"></line>
        <line t="C" i="1623" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1624" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1625" b="1" n="1"></line>
        <line t="C" i="1626" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1627" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1628" b="1" n="1"></line>
        <line t="C" i="1629" b="1" n="1">! Use maximum real kind for assertion</line>
        <line t="X" i="1630" b="1" n="1">  call ut%xfunit_unit_assert_between_real_k8( name, real(actual,8), real(low,8), real(high,8), open_low, open_high, status )</line>
        <line t="X" i="1631" b="1" n="1"></line>
        <line t="ES" i="1632" b="1" n="1">end subroutine xfunit_unit_assert_between_real_k4</line>
        <line t="ES" i="1633" b="1" n="1"></line>
        <line t="ES" i="1634" b="1" n="1"></line>
        <line t="C" i="1635" b="1" n="1">! Assertion for real range (kind=8)</line>
        <line k="xfunit_unit_assert_between_real_k8" t="S" i="1636" b="1" n="1">subroutine xfunit_unit_assert_between_real_k8( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="1637" b="1" n="1"></line>
        <line t="C" i="1638" b="1" n="1">! The unit test case</line>
        <line t="X" i="1639" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1640" b="1" n="1"></line>
        <line t="C" i="1641" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1642" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1643" b="1" n="1"></line>
        <line t="C" i="1644" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1645" b="1" n="1">  real(kind=8), intent(in) :: actual</line>
        <line t="X" i="1646" b="1" n="1"></line>
        <line t="C" i="1647" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1648" b="1" n="1">  real(kind=8), intent(in) :: low</line>
        <line t="X" i="1649" b="1" n="1"></line>
        <line t="C" i="1650" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1651" b="1" n="1">  real(kind=8), intent(in) :: high</line>
        <line t="X" i="1652" b="1" n="1"></line>
        <line t="C" i="1653" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1654" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1655" b="1" n="1"></line>
        <line t="C" i="1656" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1657" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1658" b="1" n="1"></line>
        <line t="C" i="1659" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1660" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1661" b="1" n="1"></line>
        <line t="C" i="1662" b="1" n="1">! Local variables</line>
        <line t="X" i="1663" b="1" n="1">  type(t_xfunit_assertion_real_between) :: assertion</line>
        <line t="X" i="1664" b="1" n="1"></line>
        <line t="C" i="1665" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="1666" b="1" n="1">  assertion = xfunit_assertion_real_between( name, actual, low, high, open_low, open_high )</line>
        <line t="X" i="1667" b="1" n="1"></line>
        <line t="C" i="1668" b="1" n="1">! Process the assertion</line>
        <line t="X" i="1669" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1670" b="1" n="1"></line>
        <line t="ES" i="1671" b="1" n="1">end subroutine xfunit_unit_assert_between_real_k8</line>
        <line t="ES" i="1672" b="1" n="1"></line>
        <line t="ES" i="1673" b="1" n="1"></line>
        <line t="C" i="1674" b="1" n="1">! Assertion for real range (kind=4)</line>
        <line k="xfunit_unit_assert_less_real_k4" t="S" i="1675" b="1" n="1">subroutine xfunit_unit_assert_less_real_k4( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="1676" b="1" n="1"></line>
        <line t="C" i="1677" b="1" n="1">! The unit test case</line>
        <line t="X" i="1678" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1679" b="1" n="1"></line>
        <line t="C" i="1680" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1681" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1682" b="1" n="1"></line>
        <line t="C" i="1683" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1684" b="1" n="1">  real(kind=4), intent(in) :: actual</line>
        <line t="X" i="1685" b="1" n="1"></line>
        <line t="C" i="1686" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1687" b="1" n="1">  real(kind=4), intent(in) :: high</line>
        <line t="X" i="1688" b="1" n="1"></line>
        <line t="C" i="1689" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1690" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1691" b="1" n="1"></line>
        <line t="C" i="1692" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1693" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1694" b="1" n="1"></line>
        <line t="C" i="1695" b="1" n="1">! Use maximum real kind for assertion</line>
        <line t="X" i="1696" b="1" n="1">  call ut%xfunit_unit_assert_less_real_k8( name, real(actual,8), real(high,8), open_high, status )</line>
        <line t="X" i="1697" b="1" n="1"></line>
        <line t="ES" i="1698" b="1" n="1">end subroutine xfunit_unit_assert_less_real_k4</line>
        <line t="ES" i="1699" b="1" n="1"></line>
        <line t="ES" i="1700" b="1" n="1"></line>
        <line t="C" i="1701" b="1" n="1">! Assertion for real range (kind=8)</line>
        <line k="xfunit_unit_assert_less_real_k8" t="S" i="1702" b="1" n="1">subroutine xfunit_unit_assert_less_real_k8( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="1703" b="1" n="1"></line>
        <line t="C" i="1704" b="1" n="1">! The unit test case</line>
        <line t="X" i="1705" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1706" b="1" n="1"></line>
        <line t="C" i="1707" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1708" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1709" b="1" n="1"></line>
        <line t="C" i="1710" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1711" b="1" n="1">  real(kind=8), intent(in) :: actual</line>
        <line t="X" i="1712" b="1" n="1"></line>
        <line t="C" i="1713" b="1" n="1">! The assertion high bound value</line>
        <line t="X" i="1714" b="1" n="1">  real(kind=8), intent(in) :: high</line>
        <line t="X" i="1715" b="1" n="1"></line>
        <line t="C" i="1716" b="1" n="1">! The high bound is open (optional; close by default)</line>
        <line t="X" i="1717" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="1718" b="1" n="1"></line>
        <line t="C" i="1719" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1720" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1721" b="1" n="1"></line>
        <line t="C" i="1722" b="1" n="1">! Local variables</line>
        <line t="X" i="1723" b="1" n="1">  type(t_xfunit_assertion_real_less) :: assertion</line>
        <line t="X" i="1724" b="1" n="1"></line>
        <line t="C" i="1725" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="1726" b="1" n="1">  assertion = xfunit_assertion_real_less( name, actual, high, open_high )</line>
        <line t="X" i="1727" b="1" n="1"></line>
        <line t="C" i="1728" b="1" n="1">! Process the assertion</line>
        <line t="X" i="1729" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1730" b="1" n="1"></line>
        <line t="ES" i="1731" b="1" n="1">end subroutine xfunit_unit_assert_less_real_k8</line>
        <line t="ES" i="1732" b="1" n="1"></line>
        <line t="ES" i="1733" b="1" n="1"></line>
        <line t="C" i="1734" b="1" n="1">! Assertion for real range (kind=4)</line>
        <line k="xfunit_unit_assert_greater_real_k4" t="S" i="1735" b="1" n="1">subroutine xfunit_unit_assert_greater_real_k4( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="1736" b="1" n="1"></line>
        <line t="C" i="1737" b="1" n="1">! The unit test case</line>
        <line t="X" i="1738" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1739" b="1" n="1"></line>
        <line t="C" i="1740" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1741" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1742" b="1" n="1"></line>
        <line t="C" i="1743" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1744" b="1" n="1">  real(kind=4), intent(in) :: actual</line>
        <line t="X" i="1745" b="1" n="1"></line>
        <line t="C" i="1746" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1747" b="1" n="1">  real(kind=4), intent(in) :: low</line>
        <line t="X" i="1748" b="1" n="1"></line>
        <line t="C" i="1749" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1750" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1751" b="1" n="1"></line>
        <line t="C" i="1752" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1753" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1754" b="1" n="1"></line>
        <line t="C" i="1755" b="1" n="1">! Use maximum real kind for assertion</line>
        <line t="X" i="1756" b="1" n="1">  call ut%xfunit_unit_assert_greater_real_k8( name, real(actual,8), real(low,8), open_low, status )</line>
        <line t="X" i="1757" b="1" n="1"></line>
        <line t="ES" i="1758" b="1" n="1">end subroutine xfunit_unit_assert_greater_real_k4</line>
        <line t="ES" i="1759" b="1" n="1"></line>
        <line t="ES" i="1760" b="1" n="1"></line>
        <line t="C" i="1761" b="1" n="1">! Assertion for real range (kind=8)</line>
        <line k="xfunit_unit_assert_greater_real_k8" t="S" i="1762" b="1" n="1">subroutine xfunit_unit_assert_greater_real_k8( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="1763" b="1" n="1"></line>
        <line t="C" i="1764" b="1" n="1">! The unit test case</line>
        <line t="X" i="1765" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1766" b="1" n="1"></line>
        <line t="C" i="1767" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1768" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1769" b="1" n="1"></line>
        <line t="C" i="1770" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1771" b="1" n="1">  real(kind=8), intent(in) :: actual</line>
        <line t="X" i="1772" b="1" n="1"></line>
        <line t="C" i="1773" b="1" n="1">! The assertion low bound value</line>
        <line t="X" i="1774" b="1" n="1">  real(kind=8), intent(in) :: low</line>
        <line t="X" i="1775" b="1" n="1"></line>
        <line t="C" i="1776" b="1" n="1">! The low bound is open (optional; close by default)</line>
        <line t="X" i="1777" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="1778" b="1" n="1"></line>
        <line t="C" i="1779" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1780" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1781" b="1" n="1"></line>
        <line t="C" i="1782" b="1" n="1">! Local variables</line>
        <line t="X" i="1783" b="1" n="1">  type(t_xfunit_assertion_real_greater) :: assertion</line>
        <line t="X" i="1784" b="1" n="1"></line>
        <line t="C" i="1785" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="1786" b="1" n="1">  assertion = xfunit_assertion_real_greater( name, actual, low, open_low )</line>
        <line t="X" i="1787" b="1" n="1"></line>
        <line t="C" i="1788" b="1" n="1">! Process the assertion</line>
        <line t="X" i="1789" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1790" b="1" n="1"></line>
        <line t="ES" i="1791" b="1" n="1">end subroutine xfunit_unit_assert_greater_real_k8</line>
        <line t="ES" i="1792" b="1" n="1"></line>
        <line t="ES" i="1793" b="1" n="1"></line>
        <line t="C" i="1794" b="1" n="1">! Assertion for integer equality (kind=1)</line>
        <line k="xfunit_unit_assert_equal_array_integer_k1" t="S" i="1795" b="1" n="1">subroutine xfunit_unit_assert_equal_array_integer_k1( ut, name, actual, expected, status )</line>
        <line t="S" i="1796" b="1" n="1"></line>
        <line t="C" i="1797" b="1" n="1">! The unit test case</line>
        <line t="X" i="1798" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1799" b="1" n="1"></line>
        <line t="C" i="1800" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1801" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1802" b="1" n="1"></line>
        <line t="C" i="1803" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1804" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="1805" b="1" n="1"></line>
        <line t="C" i="1806" b="1" n="1">! The expected value</line>
        <line t="X" i="1807" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: expected</line>
        <line t="X" i="1808" b="1" n="1"></line>
        <line t="C" i="1809" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1810" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1811" b="1" n="1"></line>
        <line t="C" i="1812" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="1813" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_integer_k8( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="1814" b="1" n="1"></line>
        <line t="ES" i="1815" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_integer_k1</line>
        <line t="ES" i="1816" b="1" n="1"></line>
        <line t="ES" i="1817" b="1" n="1"></line>
        <line t="C" i="1818" b="1" n="1">! Assertion for integer equality (kind=2)</line>
        <line k="xfunit_unit_assert_equal_array_integer_k2" t="S" i="1819" b="1" n="1">subroutine xfunit_unit_assert_equal_array_integer_k2( ut, name, actual, expected, status )</line>
        <line t="S" i="1820" b="1" n="1"></line>
        <line t="C" i="1821" b="1" n="1">! The unit test case</line>
        <line t="X" i="1822" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1823" b="1" n="1"></line>
        <line t="C" i="1824" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1825" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1826" b="1" n="1"></line>
        <line t="C" i="1827" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1828" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="1829" b="1" n="1"></line>
        <line t="C" i="1830" b="1" n="1">! The expected value</line>
        <line t="X" i="1831" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: expected</line>
        <line t="X" i="1832" b="1" n="1"></line>
        <line t="C" i="1833" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1834" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1835" b="1" n="1"></line>
        <line t="C" i="1836" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="1837" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_integer_k8( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="1838" b="1" n="1"></line>
        <line t="ES" i="1839" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_integer_k2</line>
        <line t="ES" i="1840" b="1" n="1"></line>
        <line t="ES" i="1841" b="1" n="1"></line>
        <line t="C" i="1842" b="1" n="1">! Assertion for integer equality (kind=4)</line>
        <line k="xfunit_unit_assert_equal_array_integer_k4" t="S" i="1843" b="1" n="1">subroutine xfunit_unit_assert_equal_array_integer_k4( ut, name, actual, expected, status )</line>
        <line t="S" i="1844" b="1" n="1"></line>
        <line t="C" i="1845" b="1" n="1">! The unit test case</line>
        <line t="X" i="1846" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1847" b="1" n="1"></line>
        <line t="C" i="1848" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1849" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1850" b="1" n="1"></line>
        <line t="C" i="1851" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1852" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="1853" b="1" n="1"></line>
        <line t="C" i="1854" b="1" n="1">! The expected value</line>
        <line t="X" i="1855" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: expected</line>
        <line t="X" i="1856" b="1" n="1"></line>
        <line t="C" i="1857" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1858" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1859" b="1" n="1"></line>
        <line t="C" i="1860" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="1861" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_integer_k8( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="1862" b="1" n="1"></line>
        <line t="ES" i="1863" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_integer_k4</line>
        <line t="ES" i="1864" b="1" n="1"></line>
        <line t="ES" i="1865" b="1" n="1"></line>
        <line t="C" i="1866" b="1" n="1">! Assertion for integer equality (kind=8)</line>
        <line k="xfunit_unit_assert_equal_array_integer_k8" t="S" i="1867" b="1" n="1">subroutine xfunit_unit_assert_equal_array_integer_k8( ut, name, actual, expected, status )</line>
        <line t="S" i="1868" b="1" n="1"></line>
        <line t="C" i="1869" b="1" n="1">! The unit test case</line>
        <line t="X" i="1870" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1871" b="1" n="1"></line>
        <line t="C" i="1872" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1873" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1874" b="1" n="1"></line>
        <line t="C" i="1875" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1876" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="1877" b="1" n="1"></line>
        <line t="C" i="1878" b="1" n="1">! The expected value</line>
        <line t="X" i="1879" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: expected</line>
        <line t="X" i="1880" b="1" n="1"></line>
        <line t="C" i="1881" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1882" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1883" b="1" n="1"></line>
        <line t="C" i="1884" b="1" n="1">! Local variables</line>
        <line t="X" i="1885" b="1" n="1">  type(t_xfunit_assertion_array_integer) :: assertion</line>
        <line t="X" i="1886" b="1" n="1">  integer :: na, ne</line>
        <line t="X" i="1887" b="1" n="1">  integer :: i</line>
        <line t="X" i="1888" b="1" n="1"></line>
        <line t="C" i="1889" b="1" n="1">! Initialise</line>
        <line t="X" i="1890" b="1" n="1">  na = size(actual)</line>
        <line t="X" i="1891" b="1" n="1">  ne = size(expected)</line>
        <line t="X" i="1892" b="1" n="1"></line>
        <line t="C" i="1893" b="1" n="1">! Check the relative sizes</line>
        <line t="X" i="1894" b="2" n="2">  if( na &gt; ne ) then</line>
        <line t="X" i="1895" b="2" n="2"></line>
        <line t="C" i="1896" b="2" n="2">!   Construct the assertion structure paddind the expected array</line>
        <line t="X" i="1897" b="2" n="2">    assertion = xfunit_assertion_array_integer( name, actual, [ expected, (0_8, i=1, na - ne + 1) ] )</line>
        <line t="X" i="1898" b="2" n="2"></line>
        <line t="X" i="1899" b="3" n="2">  else</line>
        <line t="X" i="1900" b="3" n="2"></line>
        <line t="C" i="1901" b="3" n="2">!   Construct the assertion structure truncating the expected array</line>
        <line t="X" i="1902" b="3" n="2">    assertion = xfunit_assertion_array_integer( name, actual, expected(:na) )</line>
        <line t="X" i="1903" b="3" n="2"></line>
        <line t="X" i="1904" b="3" n="1">  end if</line>
        <line t="X" i="1905" b="3" n="1"></line>
        <line t="C" i="1906" b="3" n="1">! Process the assertion</line>
        <line t="X" i="1907" b="3" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="1908" b="3" n="1"></line>
        <line t="ES" i="1909" b="3" n="1">end subroutine xfunit_unit_assert_equal_array_integer_k8</line>
        <line t="ES" i="1910" b="1" n="1"></line>
        <line t="ES" i="1911" b="1" n="1"></line>
        <line t="C" i="1912" b="1" n="1">! Assertion for integer equality (kind=1) with common expected</line>
        <line k="xfunit_unit_assert_equal_array_integer_k1_common" t="S" i="1913" b="1" n="1">subroutine xfunit_unit_assert_equal_array_integer_k1_common( ut, name, actual, expected, status )</line>
        <line t="S" i="1914" b="1" n="1"></line>
        <line t="C" i="1915" b="1" n="1">! The unit test case</line>
        <line t="X" i="1916" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1917" b="1" n="1"></line>
        <line t="C" i="1918" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1919" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1920" b="1" n="1"></line>
        <line t="C" i="1921" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1922" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="1923" b="1" n="1"></line>
        <line t="C" i="1924" b="1" n="1">! The expected value</line>
        <line t="X" i="1925" b="1" n="1">  integer(kind=1), intent(in) :: expected</line>
        <line t="X" i="1926" b="1" n="1"></line>
        <line t="C" i="1927" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1928" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1929" b="1" n="1"></line>
        <line t="C" i="1930" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="1931" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_integer_k8_common( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="1932" b="1" n="1"></line>
        <line t="ES" i="1933" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_integer_k1_common</line>
        <line t="ES" i="1934" b="1" n="1"></line>
        <line t="ES" i="1935" b="1" n="1"></line>
        <line t="C" i="1936" b="1" n="1">! Assertion for integer equality (kind=2) with common expected</line>
        <line k="xfunit_unit_assert_equal_array_integer_k2_common" t="S" i="1937" b="1" n="1">subroutine xfunit_unit_assert_equal_array_integer_k2_common( ut, name, actual, expected, status )</line>
        <line t="S" i="1938" b="1" n="1"></line>
        <line t="C" i="1939" b="1" n="1">! The unit test case</line>
        <line t="X" i="1940" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1941" b="1" n="1"></line>
        <line t="C" i="1942" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1943" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1944" b="1" n="1"></line>
        <line t="C" i="1945" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1946" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="1947" b="1" n="1"></line>
        <line t="C" i="1948" b="1" n="1">! The expected value</line>
        <line t="X" i="1949" b="1" n="1">  integer(kind=2), intent(in) :: expected</line>
        <line t="X" i="1950" b="1" n="1"></line>
        <line t="C" i="1951" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1952" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1953" b="1" n="1"></line>
        <line t="C" i="1954" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="1955" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_integer_k8_common( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="1956" b="1" n="1"></line>
        <line t="ES" i="1957" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_integer_k2_common</line>
        <line t="ES" i="1958" b="1" n="1"></line>
        <line t="ES" i="1959" b="1" n="1"></line>
        <line t="C" i="1960" b="1" n="1">! Assertion for integer equality (kind=4) with common expected</line>
        <line k="xfunit_unit_assert_equal_array_integer_k4_common" t="S" i="1961" b="1" n="1">subroutine xfunit_unit_assert_equal_array_integer_k4_common( ut, name, actual, expected, status )</line>
        <line t="S" i="1962" b="1" n="1"></line>
        <line t="C" i="1963" b="1" n="1">! The unit test case</line>
        <line t="X" i="1964" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1965" b="1" n="1"></line>
        <line t="C" i="1966" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1967" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1968" b="1" n="1"></line>
        <line t="C" i="1969" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1970" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="1971" b="1" n="1"></line>
        <line t="C" i="1972" b="1" n="1">! The expected value</line>
        <line t="X" i="1973" b="1" n="1">  integer(kind=4), intent(in) :: expected</line>
        <line t="X" i="1974" b="1" n="1"></line>
        <line t="C" i="1975" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="1976" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="1977" b="1" n="1"></line>
        <line t="C" i="1978" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="1979" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_integer_k8_common( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="1980" b="1" n="1"></line>
        <line t="ES" i="1981" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_integer_k4_common</line>
        <line t="ES" i="1982" b="1" n="1"></line>
        <line t="ES" i="1983" b="1" n="1"></line>
        <line t="C" i="1984" b="1" n="1">! Assertion for integer equality (kind=8) with common expected</line>
        <line k="xfunit_unit_assert_equal_array_integer_k8_common" t="S" i="1985" b="1" n="1">subroutine xfunit_unit_assert_equal_array_integer_k8_common( ut, name, actual, expected, status )</line>
        <line t="S" i="1986" b="1" n="1"></line>
        <line t="C" i="1987" b="1" n="1">! The unit test case</line>
        <line t="X" i="1988" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="1989" b="1" n="1"></line>
        <line t="C" i="1990" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="1991" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="1992" b="1" n="1"></line>
        <line t="C" i="1993" b="1" n="1">! The actual computed value</line>
        <line t="X" i="1994" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="1995" b="1" n="1"></line>
        <line t="C" i="1996" b="1" n="1">! The expected value</line>
        <line t="X" i="1997" b="1" n="1">  integer(kind=8), intent(in) :: expected</line>
        <line t="X" i="1998" b="1" n="1"></line>
        <line t="C" i="1999" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2000" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2001" b="1" n="1"></line>
        <line t="C" i="2002" b="1" n="1">! Local variables</line>
        <line t="X" i="2003" b="1" n="1">  type(t_xfunit_assertion_array_integer) :: assertion</line>
        <line t="X" i="2004" b="1" n="1"></line>
        <line t="C" i="2005" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2006" b="1" n="1">  assertion = xfunit_assertion_array_integer( name, actual, expected )</line>
        <line t="X" i="2007" b="1" n="1"></line>
        <line t="C" i="2008" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2009" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2010" b="1" n="1"></line>
        <line t="ES" i="2011" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_integer_k8_common</line>
        <line t="ES" i="2012" b="1" n="1"></line>
        <line t="ES" i="2013" b="1" n="1"></line>
        <line t="C" i="2014" b="1" n="1">! Assertion for real equality (array threshold, kind=4)</line>
        <line k="xfunit_unit_assert_equal_array_real_k4" t="S" i="2015" b="1" n="1">subroutine xfunit_unit_assert_equal_array_real_k4( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2016" b="1" n="1"></line>
        <line t="C" i="2017" b="1" n="1">! The unit test case</line>
        <line t="X" i="2018" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2019" b="1" n="1"></line>
        <line t="C" i="2020" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2021" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2022" b="1" n="1"></line>
        <line t="C" i="2023" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2024" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2025" b="1" n="1"></line>
        <line t="C" i="2026" b="1" n="1">! The expected value</line>
        <line t="X" i="2027" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2028" b="1" n="1"></line>
        <line t="C" i="2029" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2030" b="1" n="1">  real(kind=4), optional, dimension(:), intent(in) :: threshold</line>
        <line t="X" i="2031" b="1" n="1"></line>
        <line t="C" i="2032" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2033" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2034" b="1" n="1"></line>
        <line t="C" i="2035" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="2036" b="2" n="2">  if( present(threshold) ) then</line>
        <line t="X" i="2037" b="2" n="2">    call ut%xfunit_unit_assert_equal_array_real_k8( name, real(actual,8), real(expected,8), real(threshold,kind=8), status )</line>
        <line t="X" i="2038" b="3" n="2">  else</line>
        <line t="X" i="2039" b="3" n="2">    call ut%xfunit_unit_assert_equal_array_real_k8( name, real(actual,8), real(expected,8), status=status )</line>
        <line t="X" i="2040" b="3" n="1">  end if</line>
        <line t="X" i="2041" b="3" n="1"></line>
        <line t="ES" i="2042" b="3" n="1">end subroutine xfunit_unit_assert_equal_array_real_k4</line>
        <line t="ES" i="2043" b="1" n="1"></line>
        <line t="ES" i="2044" b="1" n="1"></line>
        <line t="C" i="2045" b="1" n="1">! Assertion for real equality (common threshold, kind=4)</line>
        <line k="xfunit_unit_assert_equal_array_real_k4_thr" t="S" i="2046" b="1" n="1">subroutine xfunit_unit_assert_equal_array_real_k4_thr( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2047" b="1" n="1"></line>
        <line t="C" i="2048" b="1" n="1">! The unit test case</line>
        <line t="X" i="2049" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2050" b="1" n="1"></line>
        <line t="C" i="2051" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2052" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2053" b="1" n="1"></line>
        <line t="C" i="2054" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2055" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2056" b="1" n="1"></line>
        <line t="C" i="2057" b="1" n="1">! The expected value</line>
        <line t="X" i="2058" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2059" b="1" n="1"></line>
        <line t="C" i="2060" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2061" b="1" n="1">  real(kind=4), intent(in) :: threshold</line>
        <line t="X" i="2062" b="1" n="1"></line>
        <line t="C" i="2063" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2064" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2065" b="1" n="1"></line>
        <line t="C" i="2066" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="2067" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_real_k8_thr( name, real(actual,8), real(expected,8), real(threshold,8), status )</line>
        <line t="X" i="2068" b="1" n="1"></line>
        <line t="ES" i="2069" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_real_k4_thr</line>
        <line t="ES" i="2070" b="1" n="1"></line>
        <line t="ES" i="2071" b="1" n="1"></line>
        <line t="C" i="2072" b="1" n="1">! Assertion for real equality (common expected and threshold, kind=4)</line>
        <line k="xfunit_unit_assert_equal_array_real_k4_common" t="S" i="2073" b="1" n="1">subroutine xfunit_unit_assert_equal_array_real_k4_common( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2074" b="1" n="1"></line>
        <line t="C" i="2075" b="1" n="1">! The unit test case</line>
        <line t="X" i="2076" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2077" b="1" n="1"></line>
        <line t="C" i="2078" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2079" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2080" b="1" n="1"></line>
        <line t="C" i="2081" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2082" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2083" b="1" n="1"></line>
        <line t="C" i="2084" b="1" n="1">! The expected value</line>
        <line t="X" i="2085" b="1" n="1">  real(kind=4), intent(in) :: expected</line>
        <line t="X" i="2086" b="1" n="1"></line>
        <line t="C" i="2087" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2088" b="1" n="1">  real(kind=4), optional, intent(in) :: threshold</line>
        <line t="X" i="2089" b="1" n="1"></line>
        <line t="C" i="2090" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2091" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2092" b="1" n="1"></line>
        <line t="C" i="2093" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="2094" b="2" n="2">  if( present(threshold) ) then</line>
        <line t="X" i="2095" b="2" n="2">    call ut%xfunit_unit_assert_equal_array_real_k8_common( name, real(actual,8), real(expected,8), real(threshold,kind=8), status )</line>
        <line t="X" i="2096" b="3" n="2">  else</line>
        <line t="X" i="2097" b="3" n="2">    call ut%xfunit_unit_assert_equal_array_real_k8_common( name, real(actual,8), real(expected,8), status=status )</line>
        <line t="X" i="2098" b="3" n="1">  end if</line>
        <line t="X" i="2099" b="3" n="1"></line>
        <line t="ES" i="2100" b="3" n="1">end subroutine xfunit_unit_assert_equal_array_real_k4_common</line>
        <line t="ES" i="2101" b="1" n="1"></line>
        <line t="ES" i="2102" b="1" n="1"></line>
        <line t="C" i="2103" b="1" n="1">! Assertion for real (kind=8) equality</line>
        <line k="xfunit_unit_assert_equal_array_real_k8" t="S" i="2104" b="1" n="1">subroutine xfunit_unit_assert_equal_array_real_k8( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2105" b="1" n="1"></line>
        <line t="C" i="2106" b="1" n="1">! The unit test case</line>
        <line t="X" i="2107" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2108" b="1" n="1"></line>
        <line t="C" i="2109" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2110" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2111" b="1" n="1"></line>
        <line t="C" i="2112" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2113" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2114" b="1" n="1"></line>
        <line t="C" i="2115" b="1" n="1">! The expected value</line>
        <line t="X" i="2116" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2117" b="1" n="1"></line>
        <line t="C" i="2118" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2119" b="1" n="1">  real(kind=8), optional, dimension(:), intent(in) :: threshold</line>
        <line t="X" i="2120" b="1" n="1"></line>
        <line t="C" i="2121" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2122" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2123" b="1" n="1"></line>
        <line t="C" i="2124" b="1" n="1">! Local variables</line>
        <line t="X" i="2125" b="1" n="1">  type(t_xfunit_assertion_array_real) :: assertion</line>
        <line t="X" i="2126" b="1" n="1"></line>
        <line t="C" i="2127" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2128" b="1" n="1">  assertion = xfunit_assertion_array_real( name, actual, expected, threshold )</line>
        <line t="X" i="2129" b="1" n="1"></line>
        <line t="C" i="2130" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2131" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2132" b="1" n="1"></line>
        <line t="ES" i="2133" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_real_k8</line>
        <line t="ES" i="2134" b="1" n="1"></line>
        <line t="ES" i="2135" b="1" n="1"></line>
        <line t="C" i="2136" b="1" n="1">! Assertion for real (kind=8) equality (common threshold)</line>
        <line k="xfunit_unit_assert_equal_array_real_k8_thr" t="S" i="2137" b="1" n="1">subroutine xfunit_unit_assert_equal_array_real_k8_thr( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2138" b="1" n="1"></line>
        <line t="C" i="2139" b="1" n="1">! The unit test case</line>
        <line t="X" i="2140" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2141" b="1" n="1"></line>
        <line t="C" i="2142" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2143" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2144" b="1" n="1"></line>
        <line t="C" i="2145" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2146" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2147" b="1" n="1"></line>
        <line t="C" i="2148" b="1" n="1">! The expected value</line>
        <line t="X" i="2149" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2150" b="1" n="1"></line>
        <line t="C" i="2151" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2152" b="1" n="1">  real(kind=8), intent(in) :: threshold</line>
        <line t="X" i="2153" b="1" n="1"></line>
        <line t="C" i="2154" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2155" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2156" b="1" n="1"></line>
        <line t="C" i="2157" b="1" n="1">! Local variables</line>
        <line t="X" i="2158" b="1" n="1">  type(t_xfunit_assertion_array_real) :: assertion</line>
        <line t="X" i="2159" b="1" n="1"></line>
        <line t="C" i="2160" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2161" b="1" n="1">  assertion = xfunit_assertion_array_real( name, actual, expected, threshold )</line>
        <line t="X" i="2162" b="1" n="1"></line>
        <line t="C" i="2163" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2164" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2165" b="1" n="1"></line>
        <line t="ES" i="2166" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_real_k8_thr</line>
        <line t="ES" i="2167" b="1" n="1"></line>
        <line t="ES" i="2168" b="1" n="1"></line>
        <line t="C" i="2169" b="1" n="1">! Assertion for real (kind=8) equality (common expected and threshold)</line>
        <line k="xfunit_unit_assert_equal_array_real_k8_common" t="S" i="2170" b="1" n="1">subroutine xfunit_unit_assert_equal_array_real_k8_common( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2171" b="1" n="1"></line>
        <line t="C" i="2172" b="1" n="1">! The unit test case</line>
        <line t="X" i="2173" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2174" b="1" n="1"></line>
        <line t="C" i="2175" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2176" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2177" b="1" n="1"></line>
        <line t="C" i="2178" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2179" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2180" b="1" n="1"></line>
        <line t="C" i="2181" b="1" n="1">! The expected value</line>
        <line t="X" i="2182" b="1" n="1">  real(kind=8), intent(in) :: expected</line>
        <line t="X" i="2183" b="1" n="1"></line>
        <line t="C" i="2184" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2185" b="1" n="1">  real(kind=8), optional, intent(in) :: threshold</line>
        <line t="X" i="2186" b="1" n="1"></line>
        <line t="C" i="2187" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2188" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2189" b="1" n="1"></line>
        <line t="C" i="2190" b="1" n="1">! Local variables</line>
        <line t="X" i="2191" b="1" n="1">  type(t_xfunit_assertion_array_real) :: assertion</line>
        <line t="X" i="2192" b="1" n="1"></line>
        <line t="C" i="2193" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2194" b="1" n="1">  assertion = xfunit_assertion_array_real( name, actual, expected, threshold )</line>
        <line t="X" i="2195" b="1" n="1"></line>
        <line t="C" i="2196" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2197" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2198" b="1" n="1"></line>
        <line t="ES" i="2199" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_real_k8_common</line>
        <line t="ES" i="2200" b="1" n="1"></line>
        <line t="ES" i="2201" b="1" n="1"></line>
        <line t="C" i="2202" b="1" n="1">! Assertion for complex equality (kind=4)</line>
        <line k="xfunit_unit_assert_equal_array_complex_k4" t="S" i="2203" b="1" n="1">subroutine xfunit_unit_assert_equal_array_complex_k4( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2204" b="1" n="1"></line>
        <line t="C" i="2205" b="1" n="1">! The unit test case</line>
        <line t="X" i="2206" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2207" b="1" n="1"></line>
        <line t="C" i="2208" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2209" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2210" b="1" n="1"></line>
        <line t="C" i="2211" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2212" b="1" n="1">  complex, dimension(:), intent(in) :: actual</line>
        <line t="X" i="2213" b="1" n="1"></line>
        <line t="C" i="2214" b="1" n="1">! The expected value</line>
        <line t="X" i="2215" b="1" n="1">  complex, dimension(:), intent(in) :: expected</line>
        <line t="X" i="2216" b="1" n="1"></line>
        <line t="C" i="2217" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2218" b="1" n="1">  real, optional, dimension(:), intent(in) :: threshold</line>
        <line t="X" i="2219" b="1" n="1"></line>
        <line t="C" i="2220" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2221" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2222" b="1" n="1"></line>
        <line t="C" i="2223" b="1" n="1">! Use maximum kind complex assertion</line>
        <line t="X" i="2224" b="2" n="2">  if( present(threshold) ) then</line>
        <line t="X" i="2225" b="2" n="2">    call ut%xfunit_unit_assert_equal_array_complex_k8( name, cmplx(actual,kind=8), cmplx(expected,kind=8), &amp;</line>
        <line t="X" i="2226" b="2" n="2">                                                       real(threshold,kind=8), status )</line>
        <line t="X" i="2227" b="3" n="2">  else</line>
        <line t="X" i="2228" b="3" n="2">    call ut%xfunit_unit_assert_equal_array_complex_k8( name, cmplx(actual,kind=8), cmplx(expected,kind=8), status=status )</line>
        <line t="X" i="2229" b="3" n="1">  end if</line>
        <line t="X" i="2230" b="3" n="1"></line>
        <line t="ES" i="2231" b="3" n="1">end subroutine xfunit_unit_assert_equal_array_complex_k4</line>
        <line t="ES" i="2232" b="1" n="1"></line>
        <line t="ES" i="2233" b="1" n="1"></line>
        <line t="C" i="2234" b="1" n="1">! Assertion for complex equality (common threshold, kind=4)</line>
        <line k="xfunit_unit_assert_equal_array_complex_k4_thr" t="S" i="2235" b="1" n="1">subroutine xfunit_unit_assert_equal_array_complex_k4_thr( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2236" b="1" n="1"></line>
        <line t="C" i="2237" b="1" n="1">! The unit test case</line>
        <line t="X" i="2238" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2239" b="1" n="1"></line>
        <line t="C" i="2240" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2241" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2242" b="1" n="1"></line>
        <line t="C" i="2243" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2244" b="1" n="1">  complex(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2245" b="1" n="1"></line>
        <line t="C" i="2246" b="1" n="1">! The expected value</line>
        <line t="X" i="2247" b="1" n="1">  complex(kind=4), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2248" b="1" n="1"></line>
        <line t="C" i="2249" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2250" b="1" n="1">  real(kind=4), intent(in) :: threshold</line>
        <line t="X" i="2251" b="1" n="1"></line>
        <line t="C" i="2252" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2253" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2254" b="1" n="1"></line>
        <line t="C" i="2255" b="1" n="1">! Use maximum kind complex assertion</line>
        <line t="X" i="2256" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_complex_k8_thr( name, cmplx(actual,kind=8), cmplx(expected,kind=8), &amp;</line>
        <line t="X" i="2257" b="1" n="1">                                                         real(threshold,kind=8), status )</line>
        <line t="X" i="2258" b="1" n="1"></line>
        <line t="ES" i="2259" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_complex_k4_thr</line>
        <line t="ES" i="2260" b="1" n="1"></line>
        <line t="ES" i="2261" b="1" n="1"></line>
        <line t="C" i="2262" b="1" n="1">! Assertion for complex equality (common expected and threshold, kind=4)</line>
        <line k="xfunit_unit_assert_equal_array_complex_k4_common" t="S" i="2263" b="1" n="1">subroutine xfunit_unit_assert_equal_array_complex_k4_common( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2264" b="1" n="1"></line>
        <line t="C" i="2265" b="1" n="1">! The unit test case</line>
        <line t="X" i="2266" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2267" b="1" n="1"></line>
        <line t="C" i="2268" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2269" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2270" b="1" n="1"></line>
        <line t="C" i="2271" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2272" b="1" n="1">  complex, dimension(:), intent(in) :: actual</line>
        <line t="X" i="2273" b="1" n="1"></line>
        <line t="C" i="2274" b="1" n="1">! The expected value</line>
        <line t="X" i="2275" b="1" n="1">  complex, intent(in) :: expected</line>
        <line t="X" i="2276" b="1" n="1"></line>
        <line t="C" i="2277" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2278" b="1" n="1">  real, optional, intent(in) :: threshold</line>
        <line t="X" i="2279" b="1" n="1"></line>
        <line t="C" i="2280" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2281" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2282" b="1" n="1"></line>
        <line t="C" i="2283" b="1" n="1">! Use maximum kind complex assertion</line>
        <line t="X" i="2284" b="2" n="2">  if( present(threshold) ) then</line>
        <line t="X" i="2285" b="2" n="2">    call ut%xfunit_unit_assert_equal_array_complex_k8_common( name, cmplx(actual,kind=8), cmplx(expected,kind=8), &amp;</line>
        <line t="X" i="2286" b="2" n="2">                                                              real(threshold,kind=8), status )</line>
        <line t="X" i="2287" b="3" n="2">  else</line>
        <line t="X" i="2288" b="3" n="2">    call ut%xfunit_unit_assert_equal_array_complex_k8_common( name, cmplx(actual,kind=8), cmplx(expected,kind=8), status=status )</line>
        <line t="X" i="2289" b="3" n="1">  end if</line>
        <line t="X" i="2290" b="3" n="1"></line>
        <line t="ES" i="2291" b="3" n="1">end subroutine xfunit_unit_assert_equal_array_complex_k4_common</line>
        <line t="ES" i="2292" b="1" n="1"></line>
        <line t="ES" i="2293" b="1" n="1"></line>
        <line t="C" i="2294" b="1" n="1">! Assertion for double complex equality</line>
        <line k="xfunit_unit_assert_equal_array_complex_k8" t="S" i="2295" b="1" n="1">subroutine xfunit_unit_assert_equal_array_complex_k8( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2296" b="1" n="1"></line>
        <line t="C" i="2297" b="1" n="1">! The unit test case</line>
        <line t="X" i="2298" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2299" b="1" n="1"></line>
        <line t="C" i="2300" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2301" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2302" b="1" n="1"></line>
        <line t="C" i="2303" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2304" b="1" n="1">  complex(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2305" b="1" n="1"></line>
        <line t="C" i="2306" b="1" n="1">! The expected value</line>
        <line t="X" i="2307" b="1" n="1">  complex(kind=8), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2308" b="1" n="1"></line>
        <line t="C" i="2309" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2310" b="1" n="1">  real(kind=8), optional, dimension(:), intent(in) :: threshold</line>
        <line t="X" i="2311" b="1" n="1"></line>
        <line t="C" i="2312" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2313" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2314" b="1" n="1"></line>
        <line t="C" i="2315" b="1" n="1">! Local variables</line>
        <line t="X" i="2316" b="1" n="1">  type(t_xfunit_assertion_array_complex) :: assertion</line>
        <line t="X" i="2317" b="1" n="1"></line>
        <line t="C" i="2318" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2319" b="1" n="1">  assertion = xfunit_assertion_array_complex( name, actual, expected, threshold )</line>
        <line t="X" i="2320" b="1" n="1"></line>
        <line t="C" i="2321" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2322" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2323" b="1" n="1"></line>
        <line t="ES" i="2324" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_complex_k8</line>
        <line t="ES" i="2325" b="1" n="1"></line>
        <line t="ES" i="2326" b="1" n="1"></line>
        <line t="C" i="2327" b="1" n="1">! Assertion for double complex equality (common threshold)</line>
        <line k="xfunit_unit_assert_equal_array_complex_k8_thr" t="S" i="2328" b="1" n="1">subroutine xfunit_unit_assert_equal_array_complex_k8_thr( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2329" b="1" n="1"></line>
        <line t="C" i="2330" b="1" n="1">! The unit test case</line>
        <line t="X" i="2331" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2332" b="1" n="1"></line>
        <line t="C" i="2333" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2334" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2335" b="1" n="1"></line>
        <line t="C" i="2336" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2337" b="1" n="1">  complex(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2338" b="1" n="1"></line>
        <line t="C" i="2339" b="1" n="1">! The expected value</line>
        <line t="X" i="2340" b="1" n="1">  complex(kind=8), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2341" b="1" n="1"></line>
        <line t="C" i="2342" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2343" b="1" n="1">  real(kind=8), intent(in) :: threshold</line>
        <line t="X" i="2344" b="1" n="1"></line>
        <line t="C" i="2345" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2346" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2347" b="1" n="1"></line>
        <line t="C" i="2348" b="1" n="1">! Local variables</line>
        <line t="X" i="2349" b="1" n="1">  type(t_xfunit_assertion_array_complex) :: assertion</line>
        <line t="X" i="2350" b="1" n="1"></line>
        <line t="C" i="2351" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2352" b="1" n="1">  assertion = xfunit_assertion_array_complex( name, actual, expected, threshold )</line>
        <line t="X" i="2353" b="1" n="1"></line>
        <line t="C" i="2354" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2355" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2356" b="1" n="1"></line>
        <line t="ES" i="2357" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_complex_k8_thr</line>
        <line t="ES" i="2358" b="1" n="1"></line>
        <line t="ES" i="2359" b="1" n="1"></line>
        <line t="C" i="2360" b="1" n="1">! Assertion for double complex equality (common expected and threshold)</line>
        <line k="xfunit_unit_assert_equal_array_complex_k8_common" t="S" i="2361" b="1" n="1">subroutine xfunit_unit_assert_equal_array_complex_k8_common( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2362" b="1" n="1"></line>
        <line t="C" i="2363" b="1" n="1">! The unit test case</line>
        <line t="X" i="2364" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2365" b="1" n="1"></line>
        <line t="C" i="2366" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2367" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2368" b="1" n="1"></line>
        <line t="C" i="2369" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2370" b="1" n="1">  complex(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2371" b="1" n="1"></line>
        <line t="C" i="2372" b="1" n="1">! The expected value</line>
        <line t="X" i="2373" b="1" n="1">  complex(kind=8), intent(in) :: expected</line>
        <line t="X" i="2374" b="1" n="1"></line>
        <line t="C" i="2375" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2376" b="1" n="1">  real(kind=8), optional, intent(in) :: threshold</line>
        <line t="X" i="2377" b="1" n="1"></line>
        <line t="C" i="2378" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2379" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2380" b="1" n="1"></line>
        <line t="C" i="2381" b="1" n="1">! Local variables</line>
        <line t="X" i="2382" b="1" n="1">  type(t_xfunit_assertion_array_complex) :: assertion</line>
        <line t="X" i="2383" b="1" n="1"></line>
        <line t="C" i="2384" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2385" b="1" n="1">  assertion = xfunit_assertion_array_complex( name, actual, expected, threshold )</line>
        <line t="X" i="2386" b="1" n="1"></line>
        <line t="C" i="2387" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2388" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2389" b="1" n="1"></line>
        <line t="ES" i="2390" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_complex_k8_common</line>
        <line t="ES" i="2391" b="1" n="1"></line>
        <line t="ES" i="2392" b="1" n="1"></line>
        <line t="C" i="2393" b="1" n="1">! Assertion for character equality</line>
        <line k="xfunit_unit_assert_equal_array_character" t="S" i="2394" b="1" n="1">subroutine xfunit_unit_assert_equal_array_character( ut, name, actual, expected, matching, ignorecase, status )</line>
        <line t="S" i="2395" b="1" n="1"></line>
        <line t="C" i="2396" b="1" n="1">! The unit test case</line>
        <line t="X" i="2397" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2398" b="1" n="1"></line>
        <line t="C" i="2399" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2400" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2401" b="1" n="1"></line>
        <line t="C" i="2402" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2403" b="1" n="1">  character(len=*), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2404" b="1" n="1"></line>
        <line t="C" i="2405" b="1" n="1">! The expected value</line>
        <line t="X" i="2406" b="1" n="1">  character(len=*), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2407" b="1" n="1"></line>
        <line t="C" i="2408" b="1" n="1">! The character matching strategy (optional, default to exact)</line>
        <line t="C" i="2409" b="1" n="1">! Enumerated values in m_xfunit_assertion</line>
        <line t="X" i="2410" b="1" n="1">  integer, optional, intent(in) :: matching</line>
        <line t="X" i="2411" b="1" n="1"></line>
        <line t="C" i="2412" b="1" n="1">! Ignore case in comparison (optional)</line>
        <line t="X" i="2413" b="1" n="1">  logical, optional, intent(in) :: ignorecase</line>
        <line t="X" i="2414" b="1" n="1"></line>
        <line t="C" i="2415" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2416" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2417" b="1" n="1"></line>
        <line t="C" i="2418" b="1" n="1">! Local variables</line>
        <line t="X" i="2419" b="1" n="1">  type(t_xfunit_assertion_array_character) :: assertion</line>
        <line t="X" i="2420" b="1" n="1"></line>
        <line t="C" i="2421" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2422" b="1" n="1">  assertion = xfunit_assertion_array_character( name, actual, expected, matching=matching, ignorecase=ignorecase )</line>
        <line t="X" i="2423" b="1" n="1"></line>
        <line t="C" i="2424" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2425" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2426" b="1" n="1"></line>
        <line t="ES" i="2427" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_character</line>
        <line t="ES" i="2428" b="1" n="1"></line>
        <line t="ES" i="2429" b="1" n="1"></line>
        <line t="C" i="2430" b="1" n="1">! Assertion for character equality</line>
        <line k="xfunit_unit_assert_equal_array_character_common" t="S" i="2431" b="1" n="1">subroutine xfunit_unit_assert_equal_array_character_common( ut, name, actual, expected, matching, ignorecase, status )</line>
        <line t="S" i="2432" b="1" n="1"></line>
        <line t="C" i="2433" b="1" n="1">! The unit test case</line>
        <line t="X" i="2434" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2435" b="1" n="1"></line>
        <line t="C" i="2436" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2437" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2438" b="1" n="1"></line>
        <line t="C" i="2439" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2440" b="1" n="1">  character(len=*), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2441" b="1" n="1"></line>
        <line t="C" i="2442" b="1" n="1">! The expected value</line>
        <line t="X" i="2443" b="1" n="1">  character(len=*), intent(in) :: expected</line>
        <line t="X" i="2444" b="1" n="1"></line>
        <line t="C" i="2445" b="1" n="1">! The character matching strategy (optional, default to exact)</line>
        <line t="C" i="2446" b="1" n="1">! Enumerated values in m_xfunit_assertion</line>
        <line t="X" i="2447" b="1" n="1">  integer, optional, intent(in) :: matching</line>
        <line t="X" i="2448" b="1" n="1"></line>
        <line t="C" i="2449" b="1" n="1">! Ignore case in comparison (optional)</line>
        <line t="X" i="2450" b="1" n="1">  logical, optional, intent(in) :: ignorecase</line>
        <line t="X" i="2451" b="1" n="1"></line>
        <line t="C" i="2452" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2453" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2454" b="1" n="1"></line>
        <line t="C" i="2455" b="1" n="1">! Local variables</line>
        <line t="X" i="2456" b="1" n="1">  type(t_xfunit_assertion_array_character) :: assertion</line>
        <line t="X" i="2457" b="1" n="1"></line>
        <line t="C" i="2458" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2459" b="1" n="1">  assertion = xfunit_assertion_array_character( name, actual, expected, matching=matching, ignorecase=ignorecase )</line>
        <line t="X" i="2460" b="1" n="1"></line>
        <line t="C" i="2461" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2462" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2463" b="1" n="1"></line>
        <line t="ES" i="2464" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_character_common</line>
        <line t="ES" i="2465" b="1" n="1"></line>
        <line t="ES" i="2466" b="1" n="1"></line>
        <line t="C" i="2467" b="1" n="1">! Assertion for string equality</line>
        <line k="xfunit_unit_assert_equal_array_string" t="S" i="2468" b="1" n="1">subroutine xfunit_unit_assert_equal_array_string( ut, name, actual, expected, matching, ignorecase, status )</line>
        <line t="S" i="2469" b="1" n="1"></line>
        <line t="C" i="2470" b="1" n="1">! The unit test case</line>
        <line t="X" i="2471" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2472" b="1" n="1"></line>
        <line t="C" i="2473" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2474" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2475" b="1" n="1"></line>
        <line t="C" i="2476" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2477" b="1" n="1">  type(t_string), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2478" b="1" n="1"></line>
        <line t="C" i="2479" b="1" n="1">! The expected value</line>
        <line t="X" i="2480" b="1" n="1">  type(t_string), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2481" b="1" n="1"></line>
        <line t="C" i="2482" b="1" n="1">! The character matching strategy (optional, default to exact)</line>
        <line t="C" i="2483" b="1" n="1">! Enumerated values in m_xfunit_assertion</line>
        <line t="X" i="2484" b="1" n="1">  integer, optional, intent(in) :: matching</line>
        <line t="X" i="2485" b="1" n="1"></line>
        <line t="C" i="2486" b="1" n="1">! Ignore case in comparison (optional)</line>
        <line t="X" i="2487" b="1" n="1">  logical, optional, intent(in) :: ignorecase</line>
        <line t="X" i="2488" b="1" n="1"></line>
        <line t="C" i="2489" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2490" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2491" b="1" n="1"></line>
        <line t="C" i="2492" b="1" n="1">! Local variables</line>
        <line t="X" i="2493" b="1" n="1">  type(t_xfunit_assertion_array_string) :: assertion</line>
        <line t="X" i="2494" b="1" n="1"></line>
        <line t="C" i="2495" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2496" b="1" n="1">  assertion = xfunit_assertion_array_string( name, actual, expected, matching=matching, ignorecase=ignorecase )</line>
        <line t="X" i="2497" b="1" n="1"></line>
        <line t="C" i="2498" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2499" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2500" b="1" n="1"></line>
        <line t="ES" i="2501" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_string</line>
        <line t="ES" i="2502" b="1" n="1"></line>
        <line t="ES" i="2503" b="1" n="1"></line>
        <line t="C" i="2504" b="1" n="1">! Assertion for string equality</line>
        <line k="xfunit_unit_assert_equal_array_string_common" t="S" i="2505" b="1" n="1">subroutine xfunit_unit_assert_equal_array_string_common( ut, name, actual, expected, matching, ignorecase, status )</line>
        <line t="S" i="2506" b="1" n="1"></line>
        <line t="C" i="2507" b="1" n="1">! The unit test case</line>
        <line t="X" i="2508" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2509" b="1" n="1"></line>
        <line t="C" i="2510" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2511" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2512" b="1" n="1"></line>
        <line t="C" i="2513" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2514" b="1" n="1">  type(t_string), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2515" b="1" n="1"></line>
        <line t="C" i="2516" b="1" n="1">! The expected value</line>
        <line t="X" i="2517" b="1" n="1">  type(t_string), intent(in) :: expected</line>
        <line t="X" i="2518" b="1" n="1"></line>
        <line t="C" i="2519" b="1" n="1">! The character matching strategy (optional, default to exact)</line>
        <line t="C" i="2520" b="1" n="1">! Enumerated values in m_xfunit_assertion</line>
        <line t="X" i="2521" b="1" n="1">  integer, optional, intent(in) :: matching</line>
        <line t="X" i="2522" b="1" n="1"></line>
        <line t="C" i="2523" b="1" n="1">! Ignore case in comparison (optional)</line>
        <line t="X" i="2524" b="1" n="1">  logical, optional, intent(in) :: ignorecase</line>
        <line t="X" i="2525" b="1" n="1"></line>
        <line t="C" i="2526" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2527" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2528" b="1" n="1"></line>
        <line t="C" i="2529" b="1" n="1">! Local variables</line>
        <line t="X" i="2530" b="1" n="1">  type(t_xfunit_assertion_array_string) :: assertion</line>
        <line t="X" i="2531" b="1" n="1"></line>
        <line t="C" i="2532" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2533" b="1" n="1">  assertion = xfunit_assertion_array_string( name, actual, expected, matching=matching, ignorecase=ignorecase )</line>
        <line t="X" i="2534" b="1" n="1"></line>
        <line t="C" i="2535" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2536" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2537" b="1" n="1"></line>
        <line t="ES" i="2538" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_string_common</line>
        <line t="ES" i="2539" b="1" n="1"></line>
        <line t="ES" i="2540" b="1" n="1"></line>
        <line t="C" i="2541" b="1" n="1">! Assertion for logical equality (kind=1)</line>
        <line k="xfunit_unit_assert_equal_array_logical_k1" t="S" i="2542" b="1" n="1">subroutine xfunit_unit_assert_equal_array_logical_k1( ut, name, actual, expected, status )</line>
        <line t="S" i="2543" b="1" n="1"></line>
        <line t="C" i="2544" b="1" n="1">! The unit test case</line>
        <line t="X" i="2545" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2546" b="1" n="1"></line>
        <line t="C" i="2547" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2548" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2549" b="1" n="1"></line>
        <line t="C" i="2550" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2551" b="1" n="1">  logical(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2552" b="1" n="1"></line>
        <line t="C" i="2553" b="1" n="1">! The expected value</line>
        <line t="X" i="2554" b="1" n="1">  logical(kind=1), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2555" b="1" n="1"></line>
        <line t="C" i="2556" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2557" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2558" b="1" n="1"></line>
        <line t="C" i="2559" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="2560" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_logical_k4( name, logical(actual,4), logical(expected,4), status )</line>
        <line t="X" i="2561" b="1" n="1"></line>
        <line t="ES" i="2562" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_logical_k1</line>
        <line t="ES" i="2563" b="1" n="1"></line>
        <line t="ES" i="2564" b="1" n="1"></line>
        <line t="C" i="2565" b="1" n="1">! Assertion for logical equality (kind=2)</line>
        <line k="xfunit_unit_assert_equal_array_logical_k2" t="S" i="2566" b="1" n="1">subroutine xfunit_unit_assert_equal_array_logical_k2( ut, name, actual, expected, status )</line>
        <line t="S" i="2567" b="1" n="1"></line>
        <line t="C" i="2568" b="1" n="1">! The unit test case</line>
        <line t="X" i="2569" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2570" b="1" n="1"></line>
        <line t="C" i="2571" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2572" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2573" b="1" n="1"></line>
        <line t="C" i="2574" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2575" b="1" n="1">  logical(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2576" b="1" n="1"></line>
        <line t="C" i="2577" b="1" n="1">! The expected value</line>
        <line t="X" i="2578" b="1" n="1">  logical(kind=2), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2579" b="1" n="1"></line>
        <line t="C" i="2580" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2581" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2582" b="1" n="1"></line>
        <line t="C" i="2583" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="2584" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_logical_k4( name, logical(actual,4), logical(expected,4), status )</line>
        <line t="X" i="2585" b="1" n="1"></line>
        <line t="ES" i="2586" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_logical_k2</line>
        <line t="ES" i="2587" b="1" n="1"></line>
        <line t="ES" i="2588" b="1" n="1"></line>
        <line t="C" i="2589" b="1" n="1">! Assertion for logical equality (kind=4)</line>
        <line k="xfunit_unit_assert_equal_array_logical_k4" t="S" i="2590" b="1" n="1">subroutine xfunit_unit_assert_equal_array_logical_k4( ut, name, actual, expected, status )</line>
        <line t="S" i="2591" b="1" n="1"></line>
        <line t="C" i="2592" b="1" n="1">! The unit test case</line>
        <line t="X" i="2593" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2594" b="1" n="1"></line>
        <line t="C" i="2595" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2596" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2597" b="1" n="1"></line>
        <line t="C" i="2598" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2599" b="1" n="1">  logical(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2600" b="1" n="1"></line>
        <line t="C" i="2601" b="1" n="1">! The expected value</line>
        <line t="X" i="2602" b="1" n="1">  logical(kind=4), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2603" b="1" n="1"></line>
        <line t="C" i="2604" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2605" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2606" b="1" n="1"></line>
        <line t="C" i="2607" b="1" n="1">! Local variables</line>
        <line t="X" i="2608" b="1" n="1">  type(t_xfunit_assertion_array_logical) :: assertion</line>
        <line t="X" i="2609" b="1" n="1"></line>
        <line t="C" i="2610" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2611" b="1" n="1">  assertion = xfunit_assertion_array_logical( name, actual, expected )</line>
        <line t="X" i="2612" b="1" n="1"></line>
        <line t="C" i="2613" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2614" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2615" b="1" n="1"></line>
        <line t="ES" i="2616" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_logical_k4</line>
        <line t="ES" i="2617" b="1" n="1"></line>
        <line t="ES" i="2618" b="1" n="1"></line>
        <line t="C" i="2619" b="1" n="1">! Assertion for logical equality (kind=1, common expected)</line>
        <line k="xfunit_unit_assert_equal_array_logical_k1_common" t="S" i="2620" b="1" n="1">subroutine xfunit_unit_assert_equal_array_logical_k1_common( ut, name, actual, expected, status )</line>
        <line t="S" i="2621" b="1" n="1"></line>
        <line t="C" i="2622" b="1" n="1">! The unit test case</line>
        <line t="X" i="2623" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2624" b="1" n="1"></line>
        <line t="C" i="2625" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2626" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2627" b="1" n="1"></line>
        <line t="C" i="2628" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2629" b="1" n="1">  logical(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2630" b="1" n="1"></line>
        <line t="C" i="2631" b="1" n="1">! The expected value</line>
        <line t="X" i="2632" b="1" n="1">  logical(kind=1), intent(in) :: expected</line>
        <line t="X" i="2633" b="1" n="1"></line>
        <line t="C" i="2634" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2635" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2636" b="1" n="1"></line>
        <line t="C" i="2637" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="2638" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_logical_k4_common( name, logical(actual,4), logical(expected,4), status )</line>
        <line t="X" i="2639" b="1" n="1"></line>
        <line t="ES" i="2640" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_logical_k1_common</line>
        <line t="ES" i="2641" b="1" n="1"></line>
        <line t="ES" i="2642" b="1" n="1"></line>
        <line t="C" i="2643" b="1" n="1">! Assertion for logical equality (kind=2, common expected)</line>
        <line k="xfunit_unit_assert_equal_array_logical_k2_common" t="S" i="2644" b="1" n="1">subroutine xfunit_unit_assert_equal_array_logical_k2_common( ut, name, actual, expected, status )</line>
        <line t="S" i="2645" b="1" n="1"></line>
        <line t="C" i="2646" b="1" n="1">! The unit test case</line>
        <line t="X" i="2647" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2648" b="1" n="1"></line>
        <line t="C" i="2649" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2650" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2651" b="1" n="1"></line>
        <line t="C" i="2652" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2653" b="1" n="1">  logical(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2654" b="1" n="1"></line>
        <line t="C" i="2655" b="1" n="1">! The expected value</line>
        <line t="X" i="2656" b="1" n="1">  logical(kind=2), intent(in) :: expected</line>
        <line t="X" i="2657" b="1" n="1"></line>
        <line t="C" i="2658" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2659" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2660" b="1" n="1"></line>
        <line t="C" i="2661" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="2662" b="1" n="1">  call ut%xfunit_unit_assert_equal_array_logical_k4_common( name, logical(actual,4), logical(expected,4), status )</line>
        <line t="X" i="2663" b="1" n="1"></line>
        <line t="ES" i="2664" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_logical_k2_common</line>
        <line t="ES" i="2665" b="1" n="1"></line>
        <line t="ES" i="2666" b="1" n="1"></line>
        <line t="C" i="2667" b="1" n="1">! Assertion for logical equality (kind=4, common expected)</line>
        <line k="xfunit_unit_assert_equal_array_logical_k4_common" t="S" i="2668" b="1" n="1">subroutine xfunit_unit_assert_equal_array_logical_k4_common( ut, name, actual, expected, status )</line>
        <line t="S" i="2669" b="1" n="1"></line>
        <line t="C" i="2670" b="1" n="1">! The unit test case</line>
        <line t="X" i="2671" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2672" b="1" n="1"></line>
        <line t="C" i="2673" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2674" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2675" b="1" n="1"></line>
        <line t="C" i="2676" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2677" b="1" n="1">  logical(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2678" b="1" n="1"></line>
        <line t="C" i="2679" b="1" n="1">! The expected value</line>
        <line t="X" i="2680" b="1" n="1">  logical(kind=4), intent(in) :: expected</line>
        <line t="X" i="2681" b="1" n="1"></line>
        <line t="C" i="2682" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2683" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2684" b="1" n="1"></line>
        <line t="C" i="2685" b="1" n="1">! Local variables</line>
        <line t="X" i="2686" b="1" n="1">  type(t_xfunit_assertion_array_logical) :: assertion</line>
        <line t="X" i="2687" b="1" n="1"></line>
        <line t="C" i="2688" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2689" b="1" n="1">  assertion = xfunit_assertion_array_logical( name, actual, expected )</line>
        <line t="X" i="2690" b="1" n="1"></line>
        <line t="C" i="2691" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2692" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2693" b="1" n="1"></line>
        <line t="ES" i="2694" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_logical_k4_common</line>
        <line t="ES" i="2695" b="1" n="1"></line>
        <line t="ES" i="2696" b="1" n="1"></line>
        <line t="C" i="2697" b="1" n="1">! Assertion for generic class equality</line>
        <line k="xfunit_unit_assert_equal_array_class" t="S" i="2698" b="1" n="1">subroutine xfunit_unit_assert_equal_array_class( ut, name, actual, expected, equal, serialize, status )</line>
        <line t="S" i="2699" b="1" n="1"></line>
        <line t="C" i="2700" b="1" n="1">! The unit test case</line>
        <line t="X" i="2701" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2702" b="1" n="1"></line>
        <line t="C" i="2703" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2704" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2705" b="1" n="1"></line>
        <line t="C" i="2706" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2707" b="1" n="1">  class(*), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2708" b="1" n="1"></line>
        <line t="C" i="2709" b="1" n="1">! The expected value</line>
        <line t="X" i="2710" b="1" n="1">  class(*), dimension(:), intent(in) :: expected</line>
        <line t="X" i="2711" b="1" n="1"></line>
        <line t="C" i="2712" b="1" n="1">! The equality comparer</line>
        <line t="X" i="2713" b="1" n="1">  procedure(xfunit_assertion_class_equal) :: equal</line>
        <line t="X" i="2714" b="1" n="1"></line>
        <line t="C" i="2715" b="1" n="1">! Serialization function</line>
        <line t="X" i="2716" b="1" n="1">  procedure(xfunit_assertion_class_serialize), optional :: serialize</line>
        <line t="X" i="2717" b="1" n="1"></line>
        <line t="C" i="2718" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2719" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2720" b="1" n="1"></line>
        <line t="C" i="2721" b="1" n="1">! Local variables</line>
        <line t="X" i="2722" b="1" n="1">  type(t_xfunit_assertion_array_class) :: assertion</line>
        <line t="X" i="2723" b="1" n="1"></line>
        <line t="C" i="2724" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2725" b="1" n="1">  assertion = xfunit_assertion_array_class( name, actual, expected, equal, serialize )</line>
        <line t="X" i="2726" b="1" n="1"></line>
        <line t="C" i="2727" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2728" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2729" b="1" n="1"></line>
        <line t="ES" i="2730" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_class</line>
        <line t="ES" i="2731" b="1" n="1"></line>
        <line t="ES" i="2732" b="1" n="1"></line>
        <line t="C" i="2733" b="1" n="1">! Assertion for generic class equality</line>
        <line k="xfunit_unit_assert_equal_array_class_common" t="S" i="2734" b="1" n="1">subroutine xfunit_unit_assert_equal_array_class_common( ut, name, actual, expected, equal, serialize, status )</line>
        <line t="S" i="2735" b="1" n="1"></line>
        <line t="C" i="2736" b="1" n="1">! The unit test case</line>
        <line t="X" i="2737" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2738" b="1" n="1"></line>
        <line t="C" i="2739" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2740" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2741" b="1" n="1"></line>
        <line t="C" i="2742" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2743" b="1" n="1">  class(*), dimension(:), intent(in) :: actual</line>
        <line t="X" i="2744" b="1" n="1"></line>
        <line t="C" i="2745" b="1" n="1">! The expected value</line>
        <line t="X" i="2746" b="1" n="1">  class(*), intent(in) :: expected</line>
        <line t="X" i="2747" b="1" n="1"></line>
        <line t="C" i="2748" b="1" n="1">! The equality comparer</line>
        <line t="X" i="2749" b="1" n="1">  procedure(xfunit_assertion_class_equal) :: equal</line>
        <line t="X" i="2750" b="1" n="1"></line>
        <line t="C" i="2751" b="1" n="1">! Serialization function</line>
        <line t="X" i="2752" b="1" n="1">  procedure(xfunit_assertion_class_serialize), optional :: serialize</line>
        <line t="X" i="2753" b="1" n="1"></line>
        <line t="C" i="2754" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2755" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2756" b="1" n="1"></line>
        <line t="C" i="2757" b="1" n="1">! Local variables</line>
        <line t="X" i="2758" b="1" n="1">  type(t_xfunit_assertion_array_class) :: assertion</line>
        <line t="X" i="2759" b="1" n="1"></line>
        <line t="C" i="2760" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2761" b="1" n="1">  assertion = xfunit_assertion_array_class( name, actual, expected, equal, serialize )</line>
        <line t="X" i="2762" b="1" n="1"></line>
        <line t="C" i="2763" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2764" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2765" b="1" n="1"></line>
        <line t="ES" i="2766" b="1" n="1">end subroutine xfunit_unit_assert_equal_array_class_common</line>
        <line t="ES" i="2767" b="1" n="1"></line>
        <line t="ES" i="2768" b="1" n="1"></line>
        <line t="C" i="2769" b="1" n="1">! Assertion for integer equality (kind=1)</line>
        <line k="xfunit_unit_assert_equal_matrix_integer_k1" t="S" i="2770" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_integer_k1( ut, name, actual, expected, status )</line>
        <line t="S" i="2771" b="1" n="1"></line>
        <line t="C" i="2772" b="1" n="1">! The unit test case</line>
        <line t="X" i="2773" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2774" b="1" n="1"></line>
        <line t="C" i="2775" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2776" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2777" b="1" n="1"></line>
        <line t="C" i="2778" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2779" b="1" n="1">  integer(kind=1), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="2780" b="1" n="1"></line>
        <line t="C" i="2781" b="1" n="1">! The expected value</line>
        <line t="X" i="2782" b="1" n="1">  integer(kind=1), dimension(:,:), intent(in) :: expected</line>
        <line t="X" i="2783" b="1" n="1"></line>
        <line t="C" i="2784" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2785" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2786" b="1" n="1"></line>
        <line t="C" i="2787" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="2788" b="1" n="1">  call ut%xfunit_unit_assert_equal_matrix_integer_k8( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="2789" b="1" n="1"></line>
        <line t="ES" i="2790" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_integer_k1</line>
        <line t="ES" i="2791" b="1" n="1"></line>
        <line t="ES" i="2792" b="1" n="1"></line>
        <line t="C" i="2793" b="1" n="1">! Assertion for integer equality (kind=2)</line>
        <line k="xfunit_unit_assert_equal_matrix_integer_k2" t="S" i="2794" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_integer_k2( ut, name, actual, expected, status )</line>
        <line t="S" i="2795" b="1" n="1"></line>
        <line t="C" i="2796" b="1" n="1">! The unit test case</line>
        <line t="X" i="2797" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2798" b="1" n="1"></line>
        <line t="C" i="2799" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2800" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2801" b="1" n="1"></line>
        <line t="C" i="2802" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2803" b="1" n="1">  integer(kind=2), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="2804" b="1" n="1"></line>
        <line t="C" i="2805" b="1" n="1">! The expected value</line>
        <line t="X" i="2806" b="1" n="1">  integer(kind=2), dimension(:,:), intent(in) :: expected</line>
        <line t="X" i="2807" b="1" n="1"></line>
        <line t="C" i="2808" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2809" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2810" b="1" n="1"></line>
        <line t="C" i="2811" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="2812" b="1" n="1">  call ut%xfunit_unit_assert_equal_matrix_integer_k8( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="2813" b="1" n="1"></line>
        <line t="ES" i="2814" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_integer_k2</line>
        <line t="ES" i="2815" b="1" n="1"></line>
        <line t="ES" i="2816" b="1" n="1"></line>
        <line t="C" i="2817" b="1" n="1">! Assertion for integer equality (kind=4)</line>
        <line k="xfunit_unit_assert_equal_matrix_integer_k4" t="S" i="2818" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_integer_k4( ut, name, actual, expected, status )</line>
        <line t="S" i="2819" b="1" n="1"></line>
        <line t="C" i="2820" b="1" n="1">! The unit test case</line>
        <line t="X" i="2821" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2822" b="1" n="1"></line>
        <line t="C" i="2823" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2824" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2825" b="1" n="1"></line>
        <line t="C" i="2826" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2827" b="1" n="1">  integer(kind=4), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="2828" b="1" n="1"></line>
        <line t="C" i="2829" b="1" n="1">! The expected value</line>
        <line t="X" i="2830" b="1" n="1">  integer(kind=4), dimension(:,:), intent(in) :: expected</line>
        <line t="X" i="2831" b="1" n="1"></line>
        <line t="C" i="2832" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2833" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2834" b="1" n="1"></line>
        <line t="C" i="2835" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="2836" b="1" n="1">  call ut%xfunit_unit_assert_equal_matrix_integer_k8( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="2837" b="1" n="1"></line>
        <line t="ES" i="2838" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_integer_k4</line>
        <line t="ES" i="2839" b="1" n="1"></line>
        <line t="ES" i="2840" b="1" n="1"></line>
        <line t="C" i="2841" b="1" n="1">! Assertion for integer equality (kind=8)</line>
        <line k="xfunit_unit_assert_equal_matrix_integer_k8" t="S" i="2842" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_integer_k8( ut, name, actual, expected, status )</line>
        <line t="S" i="2843" b="1" n="1"></line>
        <line t="C" i="2844" b="1" n="1">! The unit test case</line>
        <line t="X" i="2845" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2846" b="1" n="1"></line>
        <line t="C" i="2847" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2848" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2849" b="1" n="1"></line>
        <line t="C" i="2850" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2851" b="1" n="1">  integer(kind=8), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="2852" b="1" n="1"></line>
        <line t="C" i="2853" b="1" n="1">! The expected value</line>
        <line t="X" i="2854" b="1" n="1">  integer(kind=8), dimension(:,:), intent(in) :: expected</line>
        <line t="X" i="2855" b="1" n="1"></line>
        <line t="C" i="2856" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2857" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2858" b="1" n="1"></line>
        <line t="C" i="2859" b="1" n="1">! Local variables</line>
        <line t="X" i="2860" b="1" n="1">  type(t_xfunit_assertion_matrix_integer) :: assertion</line>
        <line t="X" i="2861" b="1" n="1"></line>
        <line t="C" i="2862" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2863" b="1" n="1">  assertion = xfunit_assertion_matrix_integer( name, actual, expected )</line>
        <line t="X" i="2864" b="1" n="1"></line>
        <line t="C" i="2865" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2866" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2867" b="1" n="1"></line>
        <line t="ES" i="2868" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_integer_k8</line>
        <line t="ES" i="2869" b="1" n="1"></line>
        <line t="ES" i="2870" b="1" n="1"></line>
        <line t="C" i="2871" b="1" n="1">! Assertion for integer equality (kind=1) with common expected</line>
        <line k="xfunit_unit_assert_equal_matrix_integer_k1_common" t="S" i="2872" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_integer_k1_common( ut, name, actual, expected, status )</line>
        <line t="S" i="2873" b="1" n="1"></line>
        <line t="C" i="2874" b="1" n="1">! The unit test case</line>
        <line t="X" i="2875" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2876" b="1" n="1"></line>
        <line t="C" i="2877" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2878" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2879" b="1" n="1"></line>
        <line t="C" i="2880" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2881" b="1" n="1">  integer(kind=1), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="2882" b="1" n="1"></line>
        <line t="C" i="2883" b="1" n="1">! The expected value</line>
        <line t="X" i="2884" b="1" n="1">  integer(kind=1), intent(in) :: expected</line>
        <line t="X" i="2885" b="1" n="1"></line>
        <line t="C" i="2886" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2887" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2888" b="1" n="1"></line>
        <line t="C" i="2889" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="2890" b="1" n="1">  call ut%xfunit_unit_assert_equal_matrix_integer_k8_common( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="2891" b="1" n="1"></line>
        <line t="ES" i="2892" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_integer_k1_common</line>
        <line t="ES" i="2893" b="1" n="1"></line>
        <line t="ES" i="2894" b="1" n="1"></line>
        <line t="C" i="2895" b="1" n="1">! Assertion for integer equality (kind=2) with common expected</line>
        <line k="xfunit_unit_assert_equal_matrix_integer_k2_common" t="S" i="2896" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_integer_k2_common( ut, name, actual, expected, status )</line>
        <line t="S" i="2897" b="1" n="1"></line>
        <line t="C" i="2898" b="1" n="1">! The unit test case</line>
        <line t="X" i="2899" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2900" b="1" n="1"></line>
        <line t="C" i="2901" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2902" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2903" b="1" n="1"></line>
        <line t="C" i="2904" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2905" b="1" n="1">  integer(kind=2), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="2906" b="1" n="1"></line>
        <line t="C" i="2907" b="1" n="1">! The expected value</line>
        <line t="X" i="2908" b="1" n="1">  integer(kind=2), intent(in) :: expected</line>
        <line t="X" i="2909" b="1" n="1"></line>
        <line t="C" i="2910" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2911" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2912" b="1" n="1"></line>
        <line t="C" i="2913" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="2914" b="1" n="1">  call ut%xfunit_unit_assert_equal_matrix_integer_k8_common( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="2915" b="1" n="1"></line>
        <line t="ES" i="2916" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_integer_k2_common</line>
        <line t="ES" i="2917" b="1" n="1"></line>
        <line t="ES" i="2918" b="1" n="1"></line>
        <line t="C" i="2919" b="1" n="1">! Assertion for integer equality (kind=4) with common expected</line>
        <line k="xfunit_unit_assert_equal_matrix_integer_k4_common" t="S" i="2920" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_integer_k4_common( ut, name, actual, expected, status )</line>
        <line t="S" i="2921" b="1" n="1"></line>
        <line t="C" i="2922" b="1" n="1">! The unit test case</line>
        <line t="X" i="2923" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2924" b="1" n="1"></line>
        <line t="C" i="2925" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2926" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2927" b="1" n="1"></line>
        <line t="C" i="2928" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2929" b="1" n="1">  integer(kind=4), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="2930" b="1" n="1"></line>
        <line t="C" i="2931" b="1" n="1">! The expected value</line>
        <line t="X" i="2932" b="1" n="1">  integer(kind=4), intent(in) :: expected</line>
        <line t="X" i="2933" b="1" n="1"></line>
        <line t="C" i="2934" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2935" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2936" b="1" n="1"></line>
        <line t="C" i="2937" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="2938" b="1" n="1">  call ut%xfunit_unit_assert_equal_matrix_integer_k8_common( name, int(actual,8), int(expected,8), status )</line>
        <line t="X" i="2939" b="1" n="1"></line>
        <line t="ES" i="2940" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_integer_k4_common</line>
        <line t="ES" i="2941" b="1" n="1"></line>
        <line t="ES" i="2942" b="1" n="1"></line>
        <line t="C" i="2943" b="1" n="1">! Assertion for integer equality (kind=8) with common expected</line>
        <line k="xfunit_unit_assert_equal_matrix_integer_k8_common" t="S" i="2944" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_integer_k8_common( ut, name, actual, expected, status )</line>
        <line t="S" i="2945" b="1" n="1"></line>
        <line t="C" i="2946" b="1" n="1">! The unit test case</line>
        <line t="X" i="2947" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2948" b="1" n="1"></line>
        <line t="C" i="2949" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2950" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2951" b="1" n="1"></line>
        <line t="C" i="2952" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2953" b="1" n="1">  integer(kind=8), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="2954" b="1" n="1"></line>
        <line t="C" i="2955" b="1" n="1">! The expected value</line>
        <line t="X" i="2956" b="1" n="1">  integer(kind=8), intent(in) :: expected</line>
        <line t="X" i="2957" b="1" n="1"></line>
        <line t="C" i="2958" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2959" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2960" b="1" n="1"></line>
        <line t="C" i="2961" b="1" n="1">! Local variables</line>
        <line t="X" i="2962" b="1" n="1">  type(t_xfunit_assertion_matrix_integer) :: assertion</line>
        <line t="X" i="2963" b="1" n="1"></line>
        <line t="C" i="2964" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="2965" b="1" n="1">  assertion = xfunit_assertion_matrix_integer( name, actual, expected )</line>
        <line t="X" i="2966" b="1" n="1"></line>
        <line t="C" i="2967" b="1" n="1">! Process the assertion</line>
        <line t="X" i="2968" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="2969" b="1" n="1"></line>
        <line t="ES" i="2970" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_integer_k8_common</line>
        <line t="ES" i="2971" b="1" n="1"></line>
        <line t="ES" i="2972" b="1" n="1"></line>
        <line t="C" i="2973" b="1" n="1">! Assertion for real equality (matrix threshold, kind=4)</line>
        <line k="xfunit_unit_assert_equal_matrix_real_k4" t="S" i="2974" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_real_k4( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="2975" b="1" n="1"></line>
        <line t="C" i="2976" b="1" n="1">! The unit test case</line>
        <line t="X" i="2977" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="2978" b="1" n="1"></line>
        <line t="C" i="2979" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="2980" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="2981" b="1" n="1"></line>
        <line t="C" i="2982" b="1" n="1">! The actual computed value</line>
        <line t="X" i="2983" b="1" n="1">  real(kind=4), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="2984" b="1" n="1"></line>
        <line t="C" i="2985" b="1" n="1">! The expected value</line>
        <line t="X" i="2986" b="1" n="1">  real(kind=4), dimension(:,:), intent(in) :: expected</line>
        <line t="X" i="2987" b="1" n="1"></line>
        <line t="C" i="2988" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="2989" b="1" n="1">  real(kind=4), optional, dimension(:,:), intent(in) :: threshold</line>
        <line t="X" i="2990" b="1" n="1"></line>
        <line t="C" i="2991" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="2992" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="2993" b="1" n="1"></line>
        <line t="C" i="2994" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="2995" b="2" n="2">  if( present(threshold) ) then</line>
        <line t="X" i="2996" b="2" n="2">    call ut%xfunit_unit_assert_equal_matrix_real_k8( name, real(actual,8), real(expected,8), real(threshold,kind=8), status )</line>
        <line t="X" i="2997" b="3" n="2">  else</line>
        <line t="X" i="2998" b="3" n="2">    call ut%xfunit_unit_assert_equal_matrix_real_k8( name, real(actual,8), real(expected,8), status=status )</line>
        <line t="X" i="2999" b="3" n="1">  end if</line>
        <line t="X" i="3000" b="3" n="1"></line>
        <line t="ES" i="3001" b="3" n="1">end subroutine xfunit_unit_assert_equal_matrix_real_k4</line>
        <line t="ES" i="3002" b="1" n="1"></line>
        <line t="ES" i="3003" b="1" n="1"></line>
        <line t="C" i="3004" b="1" n="1">! Assertion for real equality (common threshold, kind=4)</line>
        <line k="xfunit_unit_assert_equal_matrix_real_k4_thr" t="S" i="3005" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_real_k4_thr( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="3006" b="1" n="1"></line>
        <line t="C" i="3007" b="1" n="1">! The unit test case</line>
        <line t="X" i="3008" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3009" b="1" n="1"></line>
        <line t="C" i="3010" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3011" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3012" b="1" n="1"></line>
        <line t="C" i="3013" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3014" b="1" n="1">  real(kind=4), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="3015" b="1" n="1"></line>
        <line t="C" i="3016" b="1" n="1">! The expected value</line>
        <line t="X" i="3017" b="1" n="1">  real(kind=4), dimension(:,:), intent(in) :: expected</line>
        <line t="X" i="3018" b="1" n="1"></line>
        <line t="C" i="3019" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="3020" b="1" n="1">  real(kind=4), intent(in) :: threshold</line>
        <line t="X" i="3021" b="1" n="1"></line>
        <line t="C" i="3022" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3023" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3024" b="1" n="1"></line>
        <line t="C" i="3025" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="3026" b="1" n="1">  call ut%xfunit_unit_assert_equal_matrix_real_k8_thr( name, real(actual,8), real(expected,8), real(threshold,kind=8), status )</line>
        <line t="X" i="3027" b="1" n="1"></line>
        <line t="ES" i="3028" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_real_k4_thr</line>
        <line t="ES" i="3029" b="1" n="1"></line>
        <line t="ES" i="3030" b="1" n="1"></line>
        <line t="C" i="3031" b="1" n="1">! Assertion for real equality (common expected and threshold, kind=4)</line>
        <line k="xfunit_unit_assert_equal_matrix_real_k4_common" t="S" i="3032" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_real_k4_common( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="3033" b="1" n="1"></line>
        <line t="C" i="3034" b="1" n="1">! The unit test case</line>
        <line t="X" i="3035" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3036" b="1" n="1"></line>
        <line t="C" i="3037" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3038" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3039" b="1" n="1"></line>
        <line t="C" i="3040" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3041" b="1" n="1">  real(kind=4), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="3042" b="1" n="1"></line>
        <line t="C" i="3043" b="1" n="1">! The expected value</line>
        <line t="X" i="3044" b="1" n="1">  real(kind=4), intent(in) :: expected</line>
        <line t="X" i="3045" b="1" n="1"></line>
        <line t="C" i="3046" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="3047" b="1" n="1">  real(kind=4), optional, intent(in) :: threshold</line>
        <line t="X" i="3048" b="1" n="1"></line>
        <line t="C" i="3049" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3050" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3051" b="1" n="1"></line>
        <line t="C" i="3052" b="1" n="1">! Local variables</line>
        <line t="C" i="3053" b="1" n="1"></line>
        <line t="C" i="3054" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="3055" b="2" n="2">  if( present(threshold) ) then</line>
        <line t="X" i="3056" b="2" n="2">    call ut%xfunit_unit_assert_equal_matrix_real_k8_common( name, real(actual,8), real(expected,8), real(threshold,kind=8), status )</line>
        <line t="X" i="3057" b="3" n="2">  else</line>
        <line t="X" i="3058" b="3" n="2">    call ut%xfunit_unit_assert_equal_matrix_real_k8_common( name, real(actual,8), real(expected,8), status=status )</line>
        <line t="X" i="3059" b="3" n="1">  end if</line>
        <line t="X" i="3060" b="3" n="1"></line>
        <line t="ES" i="3061" b="3" n="1">end subroutine xfunit_unit_assert_equal_matrix_real_k4_common</line>
        <line t="ES" i="3062" b="1" n="1"></line>
        <line t="ES" i="3063" b="1" n="1"></line>
        <line t="C" i="3064" b="1" n="1">! Assertion for real (kind=8) equality</line>
        <line k="xfunit_unit_assert_equal_matrix_real_k8" t="S" i="3065" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_real_k8( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="3066" b="1" n="1"></line>
        <line t="C" i="3067" b="1" n="1">! The unit test case</line>
        <line t="X" i="3068" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3069" b="1" n="1"></line>
        <line t="C" i="3070" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3071" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3072" b="1" n="1"></line>
        <line t="C" i="3073" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3074" b="1" n="1">  real(kind=8), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="3075" b="1" n="1"></line>
        <line t="C" i="3076" b="1" n="1">! The expected value</line>
        <line t="X" i="3077" b="1" n="1">  real(kind=8), dimension(:,:), intent(in) :: expected</line>
        <line t="X" i="3078" b="1" n="1"></line>
        <line t="C" i="3079" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="3080" b="1" n="1">  real(kind=8), optional, dimension(:,:), intent(in) :: threshold</line>
        <line t="X" i="3081" b="1" n="1"></line>
        <line t="C" i="3082" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3083" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3084" b="1" n="1"></line>
        <line t="C" i="3085" b="1" n="1">! Local variables</line>
        <line t="X" i="3086" b="1" n="1">  type(t_xfunit_assertion_matrix_real) :: assertion</line>
        <line t="X" i="3087" b="1" n="1"></line>
        <line t="C" i="3088" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3089" b="1" n="1">  assertion = xfunit_assertion_matrix_real( name, actual, expected, threshold )</line>
        <line t="X" i="3090" b="1" n="1"></line>
        <line t="C" i="3091" b="1" n="1">! Process the assertion</line>
        <line t="X" i="3092" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3093" b="1" n="1"></line>
        <line t="ES" i="3094" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_real_k8</line>
        <line t="ES" i="3095" b="1" n="1"></line>
        <line t="ES" i="3096" b="1" n="1"></line>
        <line t="C" i="3097" b="1" n="1">! Assertion for real (kind=8) equality (common threshold)</line>
        <line k="xfunit_unit_assert_equal_matrix_real_k8_thr" t="S" i="3098" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_real_k8_thr( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="3099" b="1" n="1"></line>
        <line t="C" i="3100" b="1" n="1">! The unit test case</line>
        <line t="X" i="3101" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3102" b="1" n="1"></line>
        <line t="C" i="3103" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3104" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3105" b="1" n="1"></line>
        <line t="C" i="3106" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3107" b="1" n="1">  real(kind=8), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="3108" b="1" n="1"></line>
        <line t="C" i="3109" b="1" n="1">! The expected value</line>
        <line t="X" i="3110" b="1" n="1">  real(kind=8), dimension(:,:), intent(in) :: expected</line>
        <line t="X" i="3111" b="1" n="1"></line>
        <line t="C" i="3112" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="3113" b="1" n="1">  real(kind=8), intent(in) :: threshold</line>
        <line t="X" i="3114" b="1" n="1"></line>
        <line t="C" i="3115" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3116" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3117" b="1" n="1"></line>
        <line t="C" i="3118" b="1" n="1">! Local variables</line>
        <line t="X" i="3119" b="1" n="1">  type(t_xfunit_assertion_matrix_real) :: assertion</line>
        <line t="X" i="3120" b="1" n="1"></line>
        <line t="C" i="3121" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3122" b="1" n="1">  assertion = xfunit_assertion_matrix_real( name, actual, expected, threshold )</line>
        <line t="X" i="3123" b="1" n="1"></line>
        <line t="C" i="3124" b="1" n="1">! Process the assertion</line>
        <line t="X" i="3125" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3126" b="1" n="1"></line>
        <line t="ES" i="3127" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_real_k8_thr</line>
        <line t="ES" i="3128" b="1" n="1"></line>
        <line t="ES" i="3129" b="1" n="1"></line>
        <line t="C" i="3130" b="1" n="1">! Assertion for real (kind=8) equality (common expected and threshold)</line>
        <line k="xfunit_unit_assert_equal_matrix_real_k8_common" t="S" i="3131" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_real_k8_common( ut, name, actual, expected, threshold, status )</line>
        <line t="S" i="3132" b="1" n="1"></line>
        <line t="C" i="3133" b="1" n="1">! The unit test case</line>
        <line t="X" i="3134" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3135" b="1" n="1"></line>
        <line t="C" i="3136" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3137" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3138" b="1" n="1"></line>
        <line t="C" i="3139" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3140" b="1" n="1">  real(kind=8), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="3141" b="1" n="1"></line>
        <line t="C" i="3142" b="1" n="1">! The expected value</line>
        <line t="X" i="3143" b="1" n="1">  real(kind=8), intent(in) :: expected</line>
        <line t="X" i="3144" b="1" n="1"></line>
        <line t="C" i="3145" b="1" n="1">! The comparison threshold (optional)</line>
        <line t="X" i="3146" b="1" n="1">  real(kind=8), optional, intent(in) :: threshold</line>
        <line t="X" i="3147" b="1" n="1"></line>
        <line t="C" i="3148" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3149" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3150" b="1" n="1"></line>
        <line t="C" i="3151" b="1" n="1">! Local variables</line>
        <line t="X" i="3152" b="1" n="1">  type(t_xfunit_assertion_matrix_real) :: assertion</line>
        <line t="X" i="3153" b="1" n="1"></line>
        <line t="C" i="3154" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3155" b="2" n="2">  if( present(threshold) ) then</line>
        <line t="X" i="3156" b="2" n="2">     assertion = xfunit_assertion_matrix_real( name, actual, expected, threshold )</line>
        <line t="X" i="3157" b="3" n="2">  else</line>
        <line t="X" i="3158" b="3" n="2">     assertion = xfunit_assertion_matrix_real( name, actual, expected )</line>
        <line t="X" i="3159" b="3" n="1">  end if</line>
        <line t="X" i="3160" b="3" n="1"></line>
        <line t="C" i="3161" b="3" n="1">! Process the assertion</line>
        <line t="X" i="3162" b="3" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3163" b="3" n="1"></line>
        <line t="ES" i="3164" b="3" n="1">end subroutine xfunit_unit_assert_equal_matrix_real_k8_common</line>
        <line t="ES" i="3165" b="1" n="1"></line>
        <line t="ES" i="3166" b="1" n="1"></line>
        <line t="C" i="3167" b="1" n="1">! Assertion for generic class equality</line>
        <line k="xfunit_unit_assert_equal_matrix_class" t="S" i="3168" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_class( ut, name, actual, expected, equal, serialize, status )</line>
        <line t="S" i="3169" b="1" n="1"></line>
        <line t="C" i="3170" b="1" n="1">! The unit test case</line>
        <line t="X" i="3171" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3172" b="1" n="1"></line>
        <line t="C" i="3173" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3174" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3175" b="1" n="1"></line>
        <line t="C" i="3176" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3177" b="1" n="1">  class(*), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="3178" b="1" n="1"></line>
        <line t="C" i="3179" b="1" n="1">! The expected value</line>
        <line t="X" i="3180" b="1" n="1">  class(*), dimension(:,:), intent(in) :: expected</line>
        <line t="X" i="3181" b="1" n="1"></line>
        <line t="C" i="3182" b="1" n="1">! The equality comparer</line>
        <line t="X" i="3183" b="1" n="1">  procedure(xfunit_assertion_class_equal) :: equal</line>
        <line t="X" i="3184" b="1" n="1"></line>
        <line t="C" i="3185" b="1" n="1">! Serialization function</line>
        <line t="X" i="3186" b="1" n="1">  procedure(xfunit_assertion_class_serialize), optional :: serialize</line>
        <line t="X" i="3187" b="1" n="1"></line>
        <line t="C" i="3188" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3189" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3190" b="1" n="1"></line>
        <line t="C" i="3191" b="1" n="1">! Local variables</line>
        <line t="X" i="3192" b="1" n="1">  type(t_xfunit_assertion_matrix_class) :: assertion</line>
        <line t="X" i="3193" b="1" n="1"></line>
        <line t="C" i="3194" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3195" b="1" n="1">  assertion = xfunit_assertion_matrix_class( name, actual, expected, equal, serialize )</line>
        <line t="X" i="3196" b="1" n="1"></line>
        <line t="C" i="3197" b="1" n="1">! Process the assertion</line>
        <line t="X" i="3198" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3199" b="1" n="1"></line>
        <line t="ES" i="3200" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_class</line>
        <line t="ES" i="3201" b="1" n="1"></line>
        <line t="ES" i="3202" b="1" n="1"></line>
        <line t="C" i="3203" b="1" n="1">! Assertion for generic class equality</line>
        <line k="xfunit_unit_assert_equal_matrix_class_common" t="S" i="3204" b="1" n="1">subroutine xfunit_unit_assert_equal_matrix_class_common( ut, name, actual, expected, equal, serialize, status )</line>
        <line t="S" i="3205" b="1" n="1"></line>
        <line t="C" i="3206" b="1" n="1">! The unit test case</line>
        <line t="X" i="3207" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3208" b="1" n="1"></line>
        <line t="C" i="3209" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3210" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3211" b="1" n="1"></line>
        <line t="C" i="3212" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3213" b="1" n="1">  class(*), dimension(:,:), intent(in) :: actual</line>
        <line t="X" i="3214" b="1" n="1"></line>
        <line t="C" i="3215" b="1" n="1">! The expected value</line>
        <line t="X" i="3216" b="1" n="1">  class(*), intent(in) :: expected</line>
        <line t="X" i="3217" b="1" n="1"></line>
        <line t="C" i="3218" b="1" n="1">! The equality comparer</line>
        <line t="X" i="3219" b="1" n="1">  procedure(xfunit_assertion_class_equal) :: equal</line>
        <line t="X" i="3220" b="1" n="1"></line>
        <line t="C" i="3221" b="1" n="1">! Serialization function</line>
        <line t="X" i="3222" b="1" n="1">  procedure(xfunit_assertion_class_serialize), optional :: serialize</line>
        <line t="X" i="3223" b="1" n="1"></line>
        <line t="C" i="3224" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3225" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3226" b="1" n="1"></line>
        <line t="C" i="3227" b="1" n="1">! Local variables</line>
        <line t="X" i="3228" b="1" n="1">  type(t_xfunit_assertion_matrix_class) :: assertion</line>
        <line t="X" i="3229" b="1" n="1"></line>
        <line t="C" i="3230" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3231" b="1" n="1">  assertion = xfunit_assertion_matrix_class( name, actual, expected, equal, serialize )</line>
        <line t="X" i="3232" b="1" n="1"></line>
        <line t="C" i="3233" b="1" n="1">! Process the assertion</line>
        <line t="X" i="3234" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3235" b="1" n="1"></line>
        <line t="ES" i="3236" b="1" n="1">end subroutine xfunit_unit_assert_equal_matrix_class_common</line>
        <line t="ES" i="3237" b="1" n="1"></line>
        <line t="ES" i="3238" b="1" n="1"></line>
        <line t="C" i="3239" b="1" n="1">! Assertion for integer range (kind=1)</line>
        <line k="xfunit_unit_assert_between_array_integer_k1" t="S" i="3240" b="1" n="1">subroutine xfunit_unit_assert_between_array_integer_k1( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="3241" b="1" n="1"></line>
        <line t="C" i="3242" b="1" n="1">! The unit test case</line>
        <line t="X" i="3243" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3244" b="1" n="1"></line>
        <line t="C" i="3245" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3246" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3247" b="1" n="1"></line>
        <line t="C" i="3248" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3249" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3250" b="1" n="1"></line>
        <line t="C" i="3251" b="1" n="1">! The low bound value</line>
        <line t="X" i="3252" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: low</line>
        <line t="X" i="3253" b="1" n="1"></line>
        <line t="C" i="3254" b="1" n="1">! The high bound value</line>
        <line t="X" i="3255" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: high</line>
        <line t="X" i="3256" b="1" n="1"></line>
        <line t="C" i="3257" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3258" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3259" b="1" n="1"></line>
        <line t="C" i="3260" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3261" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3262" b="1" n="1"></line>
        <line t="C" i="3263" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3264" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3265" b="1" n="1"></line>
        <line t="C" i="3266" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3267" b="1" n="1">  call ut%xfunit_unit_assert_between_array_integer_k8( name, int(actual,8), int(low,8), int(high,8), open_low, open_high, status )</line>
        <line t="X" i="3268" b="1" n="1"></line>
        <line t="ES" i="3269" b="1" n="1">end subroutine xfunit_unit_assert_between_array_integer_k1</line>
        <line t="ES" i="3270" b="1" n="1"></line>
        <line t="ES" i="3271" b="1" n="1"></line>
        <line t="C" i="3272" b="1" n="1">! Assertion for integer range (kind=2)</line>
        <line k="xfunit_unit_assert_between_array_integer_k2" t="S" i="3273" b="1" n="1">subroutine xfunit_unit_assert_between_array_integer_k2( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="3274" b="1" n="1"></line>
        <line t="C" i="3275" b="1" n="1">! The unit test case</line>
        <line t="X" i="3276" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3277" b="1" n="1"></line>
        <line t="C" i="3278" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3279" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3280" b="1" n="1"></line>
        <line t="C" i="3281" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3282" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3283" b="1" n="1"></line>
        <line t="C" i="3284" b="1" n="1">! The low bound value</line>
        <line t="X" i="3285" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: low</line>
        <line t="X" i="3286" b="1" n="1"></line>
        <line t="C" i="3287" b="1" n="1">! The high bound value</line>
        <line t="X" i="3288" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: high</line>
        <line t="X" i="3289" b="1" n="1"></line>
        <line t="C" i="3290" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3291" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3292" b="1" n="1"></line>
        <line t="C" i="3293" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3294" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3295" b="1" n="1"></line>
        <line t="C" i="3296" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3297" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3298" b="1" n="1"></line>
        <line t="C" i="3299" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3300" b="1" n="1">  call ut%xfunit_unit_assert_between_array_integer_k8( name, int(actual,8), int(low,8), int(high,8), open_low, open_high, status )</line>
        <line t="X" i="3301" b="1" n="1"></line>
        <line t="ES" i="3302" b="1" n="1">end subroutine xfunit_unit_assert_between_array_integer_k2</line>
        <line t="ES" i="3303" b="1" n="1"></line>
        <line t="ES" i="3304" b="1" n="1"></line>
        <line t="C" i="3305" b="1" n="1">! Assertion for integer range (kind=4)</line>
        <line k="xfunit_unit_assert_between_array_integer_k4" t="S" i="3306" b="1" n="1">subroutine xfunit_unit_assert_between_array_integer_k4( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="3307" b="1" n="1"></line>
        <line t="C" i="3308" b="1" n="1">! The unit test case</line>
        <line t="X" i="3309" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3310" b="1" n="1"></line>
        <line t="C" i="3311" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3312" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3313" b="1" n="1"></line>
        <line t="C" i="3314" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3315" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3316" b="1" n="1"></line>
        <line t="C" i="3317" b="1" n="1">! The low bound value</line>
        <line t="X" i="3318" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: low</line>
        <line t="X" i="3319" b="1" n="1"></line>
        <line t="C" i="3320" b="1" n="1">! The high bound value</line>
        <line t="X" i="3321" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: high</line>
        <line t="X" i="3322" b="1" n="1"></line>
        <line t="C" i="3323" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3324" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3325" b="1" n="1"></line>
        <line t="C" i="3326" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3327" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3328" b="1" n="1"></line>
        <line t="C" i="3329" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3330" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3331" b="1" n="1"></line>
        <line t="C" i="3332" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3333" b="1" n="1">  call ut%xfunit_unit_assert_between_array_integer_k8( name, int(actual,8), int(low,8), int(high,8), open_low, open_high, status )</line>
        <line t="X" i="3334" b="1" n="1"></line>
        <line t="ES" i="3335" b="1" n="1">end subroutine xfunit_unit_assert_between_array_integer_k4</line>
        <line t="ES" i="3336" b="1" n="1"></line>
        <line t="ES" i="3337" b="1" n="1"></line>
        <line t="C" i="3338" b="1" n="1">! Assertion for integer range (kind=8)</line>
        <line k="xfunit_unit_assert_between_array_integer_k8" t="S" i="3339" b="1" n="1">subroutine xfunit_unit_assert_between_array_integer_k8( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="3340" b="1" n="1"></line>
        <line t="C" i="3341" b="1" n="1">! The unit test case</line>
        <line t="X" i="3342" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3343" b="1" n="1"></line>
        <line t="C" i="3344" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3345" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3346" b="1" n="1"></line>
        <line t="C" i="3347" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3348" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3349" b="1" n="1"></line>
        <line t="C" i="3350" b="1" n="1">! The low bound value</line>
        <line t="X" i="3351" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: low</line>
        <line t="X" i="3352" b="1" n="1"></line>
        <line t="C" i="3353" b="1" n="1">! The high bound value</line>
        <line t="X" i="3354" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: high</line>
        <line t="X" i="3355" b="1" n="1"></line>
        <line t="C" i="3356" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3357" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3358" b="1" n="1"></line>
        <line t="C" i="3359" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3360" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3361" b="1" n="1"></line>
        <line t="C" i="3362" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3363" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3364" b="1" n="1"></line>
        <line t="C" i="3365" b="1" n="1">! Local variables</line>
        <line t="X" i="3366" b="1" n="1">  type(t_xfunit_assertion_array_integer_between) :: assertion</line>
        <line t="X" i="3367" b="1" n="1"></line>
        <line t="C" i="3368" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3369" b="1" n="1">  assertion = xfunit_assertion_array_integer_between( name, actual, low, high, open_low, open_high )</line>
        <line t="X" i="3370" b="1" n="1"></line>
        <line t="C" i="3371" b="1" n="1">! Process the assertion</line>
        <line t="X" i="3372" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3373" b="1" n="1"></line>
        <line t="ES" i="3374" b="1" n="1">end subroutine xfunit_unit_assert_between_array_integer_k8</line>
        <line t="ES" i="3375" b="1" n="1"></line>
        <line t="ES" i="3376" b="1" n="1"></line>
        <line t="C" i="3377" b="1" n="1">! Assertion for integer range (kind=1)</line>
        <line k="xfunit_unit_assert_greater_array_integer_k1" t="S" i="3378" b="1" n="1">subroutine xfunit_unit_assert_greater_array_integer_k1( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="3379" b="1" n="1"></line>
        <line t="C" i="3380" b="1" n="1">! The unit test case</line>
        <line t="X" i="3381" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3382" b="1" n="1"></line>
        <line t="C" i="3383" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3384" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3385" b="1" n="1"></line>
        <line t="C" i="3386" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3387" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3388" b="1" n="1"></line>
        <line t="C" i="3389" b="1" n="1">! The low bound value</line>
        <line t="X" i="3390" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: low</line>
        <line t="X" i="3391" b="1" n="1"></line>
        <line t="C" i="3392" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3393" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3394" b="1" n="1"></line>
        <line t="C" i="3395" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3396" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3397" b="1" n="1"></line>
        <line t="C" i="3398" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3399" b="1" n="1">  call ut%xfunit_unit_assert_greater_array_integer_k8( name, int(actual,8), int(low,8), open_low, status )</line>
        <line t="X" i="3400" b="1" n="1"></line>
        <line t="ES" i="3401" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_integer_k1</line>
        <line t="ES" i="3402" b="1" n="1"></line>
        <line t="ES" i="3403" b="1" n="1"></line>
        <line t="C" i="3404" b="1" n="1">! Assertion for integer range (kind=2)</line>
        <line k="xfunit_unit_assert_greater_array_integer_k2" t="S" i="3405" b="1" n="1">subroutine xfunit_unit_assert_greater_array_integer_k2( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="3406" b="1" n="1"></line>
        <line t="C" i="3407" b="1" n="1">! The unit test case</line>
        <line t="X" i="3408" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3409" b="1" n="1"></line>
        <line t="C" i="3410" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3411" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3412" b="1" n="1"></line>
        <line t="C" i="3413" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3414" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3415" b="1" n="1"></line>
        <line t="C" i="3416" b="1" n="1">! The low bound value</line>
        <line t="X" i="3417" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: low</line>
        <line t="X" i="3418" b="1" n="1"></line>
        <line t="C" i="3419" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3420" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3421" b="1" n="1"></line>
        <line t="C" i="3422" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3423" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3424" b="1" n="1"></line>
        <line t="C" i="3425" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3426" b="1" n="1">  call ut%xfunit_unit_assert_greater_array_integer_k8( name, int(actual,8), int(low,8), open_low, status )</line>
        <line t="X" i="3427" b="1" n="1"></line>
        <line t="ES" i="3428" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_integer_k2</line>
        <line t="ES" i="3429" b="1" n="1"></line>
        <line t="ES" i="3430" b="1" n="1"></line>
        <line t="C" i="3431" b="1" n="1">! Assertion for integer range (kind=4)</line>
        <line k="xfunit_unit_assert_greater_array_integer_k4" t="S" i="3432" b="1" n="1">subroutine xfunit_unit_assert_greater_array_integer_k4( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="3433" b="1" n="1"></line>
        <line t="C" i="3434" b="1" n="1">! The unit test case</line>
        <line t="X" i="3435" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3436" b="1" n="1"></line>
        <line t="C" i="3437" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3438" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3439" b="1" n="1"></line>
        <line t="C" i="3440" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3441" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3442" b="1" n="1"></line>
        <line t="C" i="3443" b="1" n="1">! The low bound value</line>
        <line t="X" i="3444" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: low</line>
        <line t="X" i="3445" b="1" n="1"></line>
        <line t="C" i="3446" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3447" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3448" b="1" n="1"></line>
        <line t="C" i="3449" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3450" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3451" b="1" n="1"></line>
        <line t="C" i="3452" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3453" b="1" n="1">  call ut%xfunit_unit_assert_greater_array_integer_k8( name, int(actual,8), int(low,8), open_low, status )</line>
        <line t="X" i="3454" b="1" n="1"></line>
        <line t="ES" i="3455" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_integer_k4</line>
        <line t="ES" i="3456" b="1" n="1"></line>
        <line t="ES" i="3457" b="1" n="1"></line>
        <line t="C" i="3458" b="1" n="1">! Assertion for integer range (kind=8)</line>
        <line k="xfunit_unit_assert_greater_array_integer_k8" t="S" i="3459" b="1" n="1">subroutine xfunit_unit_assert_greater_array_integer_k8( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="3460" b="1" n="1"></line>
        <line t="C" i="3461" b="1" n="1">! The unit test case</line>
        <line t="X" i="3462" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3463" b="1" n="1"></line>
        <line t="C" i="3464" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3465" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3466" b="1" n="1"></line>
        <line t="C" i="3467" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3468" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3469" b="1" n="1"></line>
        <line t="C" i="3470" b="1" n="1">! The low bound value</line>
        <line t="X" i="3471" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: low</line>
        <line t="X" i="3472" b="1" n="1"></line>
        <line t="C" i="3473" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3474" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3475" b="1" n="1"></line>
        <line t="C" i="3476" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3477" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3478" b="1" n="1"></line>
        <line t="C" i="3479" b="1" n="1">! Local variables</line>
        <line t="X" i="3480" b="1" n="1">  type(t_xfunit_assertion_array_integer_greater) :: assertion</line>
        <line t="X" i="3481" b="1" n="1"></line>
        <line t="C" i="3482" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3483" b="1" n="1">  assertion = xfunit_assertion_array_integer_greater( name, actual, low, open_low )</line>
        <line t="X" i="3484" b="1" n="1"></line>
        <line t="C" i="3485" b="1" n="1">! Process the assertion</line>
        <line t="X" i="3486" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3487" b="1" n="1"></line>
        <line t="ES" i="3488" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_integer_k8</line>
        <line t="ES" i="3489" b="1" n="1"></line>
        <line t="ES" i="3490" b="1" n="1"></line>
        <line t="C" i="3491" b="1" n="1">! Assertion for integer range (kind=1)</line>
        <line k="xfunit_unit_assert_less_array_integer_k1" t="S" i="3492" b="1" n="1">subroutine xfunit_unit_assert_less_array_integer_k1( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="3493" b="1" n="1"></line>
        <line t="C" i="3494" b="1" n="1">! The unit test case</line>
        <line t="X" i="3495" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3496" b="1" n="1"></line>
        <line t="C" i="3497" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3498" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3499" b="1" n="1"></line>
        <line t="C" i="3500" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3501" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3502" b="1" n="1"></line>
        <line t="C" i="3503" b="1" n="1">! The high bound value</line>
        <line t="X" i="3504" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: high</line>
        <line t="X" i="3505" b="1" n="1"></line>
        <line t="C" i="3506" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3507" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3508" b="1" n="1"></line>
        <line t="C" i="3509" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3510" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3511" b="1" n="1"></line>
        <line t="C" i="3512" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3513" b="1" n="1">  call ut%xfunit_unit_assert_less_array_integer_k8( name, int(actual,8), int(high,8), open_high, status )</line>
        <line t="X" i="3514" b="1" n="1"></line>
        <line t="ES" i="3515" b="1" n="1">end subroutine xfunit_unit_assert_less_array_integer_k1</line>
        <line t="ES" i="3516" b="1" n="1"></line>
        <line t="ES" i="3517" b="1" n="1"></line>
        <line t="C" i="3518" b="1" n="1">! Assertion for integer range (kind=2)</line>
        <line k="xfunit_unit_assert_less_array_integer_k2" t="S" i="3519" b="1" n="1">subroutine xfunit_unit_assert_less_array_integer_k2( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="3520" b="1" n="1"></line>
        <line t="C" i="3521" b="1" n="1">! The unit test case</line>
        <line t="X" i="3522" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3523" b="1" n="1"></line>
        <line t="C" i="3524" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3525" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3526" b="1" n="1"></line>
        <line t="C" i="3527" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3528" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3529" b="1" n="1"></line>
        <line t="C" i="3530" b="1" n="1">! The high bound value</line>
        <line t="X" i="3531" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: high</line>
        <line t="X" i="3532" b="1" n="1"></line>
        <line t="C" i="3533" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3534" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3535" b="1" n="1"></line>
        <line t="C" i="3536" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3537" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3538" b="1" n="1"></line>
        <line t="C" i="3539" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3540" b="1" n="1">  call ut%xfunit_unit_assert_less_array_integer_k8( name, int(actual,8), int(high,8), open_high, status )</line>
        <line t="X" i="3541" b="1" n="1"></line>
        <line t="ES" i="3542" b="1" n="1">end subroutine xfunit_unit_assert_less_array_integer_k2</line>
        <line t="ES" i="3543" b="1" n="1"></line>
        <line t="ES" i="3544" b="1" n="1"></line>
        <line t="C" i="3545" b="1" n="1">! Assertion for integer range (kind=4)</line>
        <line k="xfunit_unit_assert_less_array_integer_k4" t="S" i="3546" b="1" n="1">subroutine xfunit_unit_assert_less_array_integer_k4( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="3547" b="1" n="1"></line>
        <line t="C" i="3548" b="1" n="1">! The unit test case</line>
        <line t="X" i="3549" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3550" b="1" n="1"></line>
        <line t="C" i="3551" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3552" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3553" b="1" n="1"></line>
        <line t="C" i="3554" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3555" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3556" b="1" n="1"></line>
        <line t="C" i="3557" b="1" n="1">! The high bound value</line>
        <line t="X" i="3558" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: high</line>
        <line t="X" i="3559" b="1" n="1"></line>
        <line t="C" i="3560" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3561" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3562" b="1" n="1"></line>
        <line t="C" i="3563" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3564" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3565" b="1" n="1"></line>
        <line t="C" i="3566" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3567" b="1" n="1">  call ut%xfunit_unit_assert_less_array_integer_k8( name, int(actual,8), int(high,8), open_high, status )</line>
        <line t="X" i="3568" b="1" n="1"></line>
        <line t="ES" i="3569" b="1" n="1">end subroutine xfunit_unit_assert_less_array_integer_k4</line>
        <line t="ES" i="3570" b="1" n="1"></line>
        <line t="ES" i="3571" b="1" n="1"></line>
        <line t="C" i="3572" b="1" n="1">! Assertion for integer range (kind=8)</line>
        <line k="xfunit_unit_assert_less_array_integer_k8" t="S" i="3573" b="1" n="1">subroutine xfunit_unit_assert_less_array_integer_k8( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="3574" b="1" n="1"></line>
        <line t="C" i="3575" b="1" n="1">! The unit test case</line>
        <line t="X" i="3576" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3577" b="1" n="1"></line>
        <line t="C" i="3578" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3579" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3580" b="1" n="1"></line>
        <line t="C" i="3581" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3582" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3583" b="1" n="1"></line>
        <line t="C" i="3584" b="1" n="1">! The high bound value</line>
        <line t="X" i="3585" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: high</line>
        <line t="X" i="3586" b="1" n="1"></line>
        <line t="C" i="3587" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3588" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3589" b="1" n="1"></line>
        <line t="C" i="3590" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3591" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3592" b="1" n="1"></line>
        <line t="C" i="3593" b="1" n="1">! Local variables</line>
        <line t="X" i="3594" b="1" n="1">  type(t_xfunit_assertion_array_integer_less) :: assertion</line>
        <line t="X" i="3595" b="1" n="1"></line>
        <line t="C" i="3596" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3597" b="1" n="1">  assertion = xfunit_assertion_array_integer_less( name, actual, high, open_high )</line>
        <line t="X" i="3598" b="1" n="1"></line>
        <line t="C" i="3599" b="1" n="1">! Process the assertion</line>
        <line t="X" i="3600" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3601" b="1" n="1"></line>
        <line t="ES" i="3602" b="1" n="1">end subroutine xfunit_unit_assert_less_array_integer_k8</line>
        <line t="ES" i="3603" b="1" n="1"></line>
        <line t="ES" i="3604" b="1" n="1"></line>
        <line t="C" i="3605" b="1" n="1">! Assertion for real range (kind=4)</line>
        <line k="xfunit_unit_assert_between_array_real_k4" t="S" i="3606" b="1" n="1">subroutine xfunit_unit_assert_between_array_real_k4( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="3607" b="1" n="1"></line>
        <line t="C" i="3608" b="1" n="1">! The unit test case</line>
        <line t="X" i="3609" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3610" b="1" n="1"></line>
        <line t="C" i="3611" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3612" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3613" b="1" n="1"></line>
        <line t="C" i="3614" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3615" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3616" b="1" n="1"></line>
        <line t="C" i="3617" b="1" n="1">! The low bound value</line>
        <line t="X" i="3618" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: low</line>
        <line t="X" i="3619" b="1" n="1"></line>
        <line t="C" i="3620" b="1" n="1">! The high bound value</line>
        <line t="X" i="3621" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: high</line>
        <line t="X" i="3622" b="1" n="1"></line>
        <line t="C" i="3623" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3624" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3625" b="1" n="1"></line>
        <line t="C" i="3626" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3627" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3628" b="1" n="1"></line>
        <line t="C" i="3629" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3630" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3631" b="1" n="1"></line>
        <line t="C" i="3632" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="3633" b="1" n="1">  call ut%xfunit_unit_assert_between_array_real_k8( name, real(actual,8), real(low,8), real(high,8), open_low, open_high, status )</line>
        <line t="X" i="3634" b="1" n="1"></line>
        <line t="ES" i="3635" b="1" n="1">end subroutine xfunit_unit_assert_between_array_real_k4</line>
        <line t="ES" i="3636" b="1" n="1"></line>
        <line t="ES" i="3637" b="1" n="1"></line>
        <line t="C" i="3638" b="1" n="1">! Assertion for double range</line>
        <line k="xfunit_unit_assert_between_array_real_k8" t="S" i="3639" b="1" n="1">subroutine xfunit_unit_assert_between_array_real_k8( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="3640" b="1" n="1"></line>
        <line t="C" i="3641" b="1" n="1">! The unit test case</line>
        <line t="X" i="3642" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3643" b="1" n="1"></line>
        <line t="C" i="3644" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3645" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3646" b="1" n="1"></line>
        <line t="C" i="3647" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3648" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3649" b="1" n="1"></line>
        <line t="C" i="3650" b="1" n="1">! The low bound value</line>
        <line t="X" i="3651" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: low</line>
        <line t="X" i="3652" b="1" n="1"></line>
        <line t="C" i="3653" b="1" n="1">! The high bound value</line>
        <line t="X" i="3654" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: high</line>
        <line t="X" i="3655" b="1" n="1"></line>
        <line t="C" i="3656" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3657" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3658" b="1" n="1"></line>
        <line t="C" i="3659" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3660" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3661" b="1" n="1"></line>
        <line t="C" i="3662" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3663" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3664" b="1" n="1"></line>
        <line t="C" i="3665" b="1" n="1">! Local variables</line>
        <line t="X" i="3666" b="1" n="1">  type(t_xfunit_assertion_array_real_between) :: assertion</line>
        <line t="X" i="3667" b="1" n="1"></line>
        <line t="C" i="3668" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3669" b="1" n="1">  assertion = xfunit_assertion_array_real_between( name, actual, low, high, open_low, open_high )</line>
        <line t="X" i="3670" b="1" n="1"></line>
        <line t="C" i="3671" b="1" n="1">! Process the assertion</line>
        <line t="X" i="3672" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3673" b="1" n="1"></line>
        <line t="ES" i="3674" b="1" n="1">end subroutine xfunit_unit_assert_between_array_real_k8</line>
        <line t="ES" i="3675" b="1" n="1"></line>
        <line t="ES" i="3676" b="1" n="1"></line>
        <line t="C" i="3677" b="1" n="1">! Assertion for real range (kind=4)</line>
        <line k="xfunit_unit_assert_greater_array_real_k4" t="S" i="3678" b="1" n="1">subroutine xfunit_unit_assert_greater_array_real_k4( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="3679" b="1" n="1"></line>
        <line t="C" i="3680" b="1" n="1">! The unit test case</line>
        <line t="X" i="3681" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3682" b="1" n="1"></line>
        <line t="C" i="3683" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3684" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3685" b="1" n="1"></line>
        <line t="C" i="3686" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3687" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3688" b="1" n="1"></line>
        <line t="C" i="3689" b="1" n="1">! The low bound value</line>
        <line t="X" i="3690" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: low</line>
        <line t="X" i="3691" b="1" n="1"></line>
        <line t="C" i="3692" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3693" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3694" b="1" n="1"></line>
        <line t="C" i="3695" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3696" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3697" b="1" n="1"></line>
        <line t="C" i="3698" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="3699" b="1" n="1">  call ut%xfunit_unit_assert_greater_array_real_k8( name, real(actual,8), real(low,8), open_low, status )</line>
        <line t="X" i="3700" b="1" n="1"></line>
        <line t="ES" i="3701" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_real_k4</line>
        <line t="ES" i="3702" b="1" n="1"></line>
        <line t="ES" i="3703" b="1" n="1"></line>
        <line t="C" i="3704" b="1" n="1">! Assertion for double range</line>
        <line k="xfunit_unit_assert_greater_array_real_k8" t="S" i="3705" b="1" n="1">subroutine xfunit_unit_assert_greater_array_real_k8( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="3706" b="1" n="1"></line>
        <line t="C" i="3707" b="1" n="1">! The unit test case</line>
        <line t="X" i="3708" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3709" b="1" n="1"></line>
        <line t="C" i="3710" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3711" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3712" b="1" n="1"></line>
        <line t="C" i="3713" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3714" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3715" b="1" n="1"></line>
        <line t="C" i="3716" b="1" n="1">! The low bound value</line>
        <line t="X" i="3717" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: low</line>
        <line t="X" i="3718" b="1" n="1"></line>
        <line t="C" i="3719" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3720" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3721" b="1" n="1"></line>
        <line t="C" i="3722" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3723" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3724" b="1" n="1"></line>
        <line t="C" i="3725" b="1" n="1">! Local variables</line>
        <line t="X" i="3726" b="1" n="1">  type(t_xfunit_assertion_array_real_greater) :: assertion</line>
        <line t="X" i="3727" b="1" n="1"></line>
        <line t="C" i="3728" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3729" b="1" n="1">  assertion = xfunit_assertion_array_real_greater( name, actual, low, open_low )</line>
        <line t="X" i="3730" b="1" n="1"></line>
        <line t="C" i="3731" b="1" n="1">! Process the assertion</line>
        <line t="X" i="3732" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3733" b="1" n="1"></line>
        <line t="ES" i="3734" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_real_k8</line>
        <line t="ES" i="3735" b="1" n="1"></line>
        <line t="ES" i="3736" b="1" n="1"></line>
        <line t="C" i="3737" b="1" n="1">! Assertion for real range (kind=4)</line>
        <line k="xfunit_unit_assert_less_array_real_k4" t="S" i="3738" b="1" n="1">subroutine xfunit_unit_assert_less_array_real_k4( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="3739" b="1" n="1"></line>
        <line t="C" i="3740" b="1" n="1">! The unit test case</line>
        <line t="X" i="3741" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3742" b="1" n="1"></line>
        <line t="C" i="3743" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3744" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3745" b="1" n="1"></line>
        <line t="C" i="3746" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3747" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3748" b="1" n="1"></line>
        <line t="C" i="3749" b="1" n="1">! The high bound value</line>
        <line t="X" i="3750" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: high</line>
        <line t="X" i="3751" b="1" n="1"></line>
        <line t="C" i="3752" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3753" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3754" b="1" n="1"></line>
        <line t="C" i="3755" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3756" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3757" b="1" n="1"></line>
        <line t="C" i="3758" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="3759" b="1" n="1">  call ut%xfunit_unit_assert_less_array_real_k8( name, real(actual,8), real(high,8), open_high, status )</line>
        <line t="X" i="3760" b="1" n="1"></line>
        <line t="ES" i="3761" b="1" n="1">end subroutine xfunit_unit_assert_less_array_real_k4</line>
        <line t="ES" i="3762" b="1" n="1"></line>
        <line t="ES" i="3763" b="1" n="1"></line>
        <line t="C" i="3764" b="1" n="1">! Assertion for double range</line>
        <line k="xfunit_unit_assert_less_array_real_k8" t="S" i="3765" b="1" n="1">subroutine xfunit_unit_assert_less_array_real_k8( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="3766" b="1" n="1"></line>
        <line t="C" i="3767" b="1" n="1">! The unit test case</line>
        <line t="X" i="3768" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3769" b="1" n="1"></line>
        <line t="C" i="3770" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3771" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3772" b="1" n="1"></line>
        <line t="C" i="3773" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3774" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3775" b="1" n="1"></line>
        <line t="C" i="3776" b="1" n="1">! The high bound value</line>
        <line t="X" i="3777" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: high</line>
        <line t="X" i="3778" b="1" n="1"></line>
        <line t="C" i="3779" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3780" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3781" b="1" n="1"></line>
        <line t="C" i="3782" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3783" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3784" b="1" n="1"></line>
        <line t="C" i="3785" b="1" n="1">! Local variables</line>
        <line t="X" i="3786" b="1" n="1">  type(t_xfunit_assertion_array_real_less) :: assertion</line>
        <line t="X" i="3787" b="1" n="1"></line>
        <line t="C" i="3788" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3789" b="1" n="1">  assertion = xfunit_assertion_array_real_less( name, actual, high, open_high )</line>
        <line t="X" i="3790" b="1" n="1"></line>
        <line t="C" i="3791" b="1" n="1">! Process the assertion</line>
        <line t="X" i="3792" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3793" b="1" n="1"></line>
        <line t="ES" i="3794" b="1" n="1">end subroutine xfunit_unit_assert_less_array_real_k8</line>
        <line t="ES" i="3795" b="1" n="1"></line>
        <line t="ES" i="3796" b="1" n="1"></line>
        <line t="C" i="3797" b="1" n="1">! Assertion for integer range (kind=1)</line>
        <line k="xfunit_unit_assert_between_array_integer_k1_common" t="S" i="3798" b="1" n="1">subroutine xfunit_unit_assert_between_array_integer_k1_common( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="3799" b="1" n="1"></line>
        <line t="C" i="3800" b="1" n="1">! The unit test case</line>
        <line t="X" i="3801" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3802" b="1" n="1"></line>
        <line t="C" i="3803" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3804" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3805" b="1" n="1"></line>
        <line t="C" i="3806" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3807" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3808" b="1" n="1"></line>
        <line t="C" i="3809" b="1" n="1">! The low bound value</line>
        <line t="X" i="3810" b="1" n="1">  integer(kind=1), intent(in) :: low</line>
        <line t="X" i="3811" b="1" n="1"></line>
        <line t="C" i="3812" b="1" n="1">! The high bound value</line>
        <line t="X" i="3813" b="1" n="1">  integer(kind=1), intent(in) :: high</line>
        <line t="X" i="3814" b="1" n="1"></line>
        <line t="C" i="3815" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3816" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3817" b="1" n="1"></line>
        <line t="C" i="3818" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3819" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3820" b="1" n="1"></line>
        <line t="C" i="3821" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3822" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3823" b="1" n="1"></line>
        <line t="C" i="3824" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3825" b="1" n="1">  call ut%xfunit_unit_assert_between_array_integer_k8_common( name, int(actual,8), int(low,8), int(high,8), &amp;</line>
        <line t="X" i="3826" b="1" n="1">                                                              open_low, open_high, status )</line>
        <line t="X" i="3827" b="1" n="1"></line>
        <line t="ES" i="3828" b="1" n="1">end subroutine xfunit_unit_assert_between_array_integer_k1_common</line>
        <line t="ES" i="3829" b="1" n="1"></line>
        <line t="ES" i="3830" b="1" n="1"></line>
        <line t="C" i="3831" b="1" n="1">! Assertion for integer range (kind=2)</line>
        <line k="xfunit_unit_assert_between_array_integer_k2_common" t="S" i="3832" b="1" n="1">subroutine xfunit_unit_assert_between_array_integer_k2_common( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="3833" b="1" n="1"></line>
        <line t="C" i="3834" b="1" n="1">! The unit test case</line>
        <line t="X" i="3835" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3836" b="1" n="1"></line>
        <line t="C" i="3837" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3838" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3839" b="1" n="1"></line>
        <line t="C" i="3840" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3841" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3842" b="1" n="1"></line>
        <line t="C" i="3843" b="1" n="1">! The low bound value</line>
        <line t="X" i="3844" b="1" n="1">  integer(kind=2), intent(in) :: low</line>
        <line t="X" i="3845" b="1" n="1"></line>
        <line t="C" i="3846" b="1" n="1">! The high bound value</line>
        <line t="X" i="3847" b="1" n="1">  integer(kind=2), intent(in) :: high</line>
        <line t="X" i="3848" b="1" n="1"></line>
        <line t="C" i="3849" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3850" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3851" b="1" n="1"></line>
        <line t="C" i="3852" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3853" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3854" b="1" n="1"></line>
        <line t="C" i="3855" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3856" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3857" b="1" n="1"></line>
        <line t="C" i="3858" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3859" b="1" n="1">  call ut%xfunit_unit_assert_between_array_integer_k8_common( name, int(actual,8), int(low,8), int(high,8), &amp;</line>
        <line t="X" i="3860" b="1" n="1">                                                              open_low, open_high, status )</line>
        <line t="X" i="3861" b="1" n="1"></line>
        <line t="ES" i="3862" b="1" n="1">end subroutine xfunit_unit_assert_between_array_integer_k2_common</line>
        <line t="ES" i="3863" b="1" n="1"></line>
        <line t="ES" i="3864" b="1" n="1"></line>
        <line t="C" i="3865" b="1" n="1">! Assertion for integer range (kind=4)</line>
        <line k="xfunit_unit_assert_between_array_integer_k4_common" t="S" i="3866" b="1" n="1">subroutine xfunit_unit_assert_between_array_integer_k4_common( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="3867" b="1" n="1"></line>
        <line t="C" i="3868" b="1" n="1">! The unit test case</line>
        <line t="X" i="3869" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3870" b="1" n="1"></line>
        <line t="C" i="3871" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3872" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3873" b="1" n="1"></line>
        <line t="C" i="3874" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3875" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3876" b="1" n="1"></line>
        <line t="C" i="3877" b="1" n="1">! The low bound value</line>
        <line t="X" i="3878" b="1" n="1">  integer(kind=4), intent(in) :: low</line>
        <line t="X" i="3879" b="1" n="1"></line>
        <line t="C" i="3880" b="1" n="1">! The high bound value</line>
        <line t="X" i="3881" b="1" n="1">  integer(kind=4), intent(in) :: high</line>
        <line t="X" i="3882" b="1" n="1"></line>
        <line t="C" i="3883" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3884" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3885" b="1" n="1"></line>
        <line t="C" i="3886" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3887" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3888" b="1" n="1"></line>
        <line t="C" i="3889" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3890" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3891" b="1" n="1"></line>
        <line t="C" i="3892" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3893" b="1" n="1">  call ut%xfunit_unit_assert_between_array_integer_k8_common( name, int(actual,8), int(low,8), int(high,8), &amp;</line>
        <line t="X" i="3894" b="1" n="1">                                                              open_low, open_high, status )</line>
        <line t="X" i="3895" b="1" n="1"></line>
        <line t="ES" i="3896" b="1" n="1">end subroutine xfunit_unit_assert_between_array_integer_k4_common</line>
        <line t="ES" i="3897" b="1" n="1"></line>
        <line t="ES" i="3898" b="1" n="1"></line>
        <line t="C" i="3899" b="1" n="1">! Assertion for integer range (kind=8)</line>
        <line k="xfunit_unit_assert_between_array_integer_k8_common" t="S" i="3900" b="1" n="1">subroutine xfunit_unit_assert_between_array_integer_k8_common( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="3901" b="1" n="1"></line>
        <line t="C" i="3902" b="1" n="1">! The unit test case</line>
        <line t="X" i="3903" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3904" b="1" n="1"></line>
        <line t="C" i="3905" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3906" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3907" b="1" n="1"></line>
        <line t="C" i="3908" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3909" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3910" b="1" n="1"></line>
        <line t="C" i="3911" b="1" n="1">! The low bound value</line>
        <line t="X" i="3912" b="1" n="1">  integer(kind=8), intent(in) :: low</line>
        <line t="X" i="3913" b="1" n="1"></line>
        <line t="C" i="3914" b="1" n="1">! The high bound value</line>
        <line t="X" i="3915" b="1" n="1">  integer(kind=8), intent(in) :: high</line>
        <line t="X" i="3916" b="1" n="1"></line>
        <line t="C" i="3917" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3918" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3919" b="1" n="1"></line>
        <line t="C" i="3920" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="3921" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="3922" b="1" n="1"></line>
        <line t="C" i="3923" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3924" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3925" b="1" n="1"></line>
        <line t="C" i="3926" b="1" n="1">! Local variables</line>
        <line t="X" i="3927" b="1" n="1">  type(t_xfunit_assertion_array_integer_between) :: assertion</line>
        <line t="X" i="3928" b="1" n="1"></line>
        <line t="C" i="3929" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="3930" b="1" n="1">  assertion = xfunit_assertion_array_integer_between( name, int(actual,8), int(low,8), int(high,8), open_low, open_high )</line>
        <line t="X" i="3931" b="1" n="1"></line>
        <line t="C" i="3932" b="1" n="1">! Process the assertion</line>
        <line t="X" i="3933" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="3934" b="1" n="1"></line>
        <line t="ES" i="3935" b="1" n="1">end subroutine xfunit_unit_assert_between_array_integer_k8_common</line>
        <line t="ES" i="3936" b="1" n="1"></line>
        <line t="ES" i="3937" b="1" n="1"></line>
        <line t="C" i="3938" b="1" n="1">! Assertion for integer range (kind=1)</line>
        <line k="xfunit_unit_assert_greater_array_integer_k1_common" t="S" i="3939" b="1" n="1">subroutine xfunit_unit_assert_greater_array_integer_k1_common( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="3940" b="1" n="1"></line>
        <line t="C" i="3941" b="1" n="1">! The unit test case</line>
        <line t="X" i="3942" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3943" b="1" n="1"></line>
        <line t="C" i="3944" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3945" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3946" b="1" n="1"></line>
        <line t="C" i="3947" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3948" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3949" b="1" n="1"></line>
        <line t="C" i="3950" b="1" n="1">! The low bound value</line>
        <line t="X" i="3951" b="1" n="1">  integer(kind=1), intent(in) :: low</line>
        <line t="X" i="3952" b="1" n="1"></line>
        <line t="C" i="3953" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3954" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3955" b="1" n="1"></line>
        <line t="C" i="3956" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3957" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3958" b="1" n="1"></line>
        <line t="C" i="3959" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3960" b="1" n="1">  call ut%xfunit_unit_assert_greater_array_integer_k8_common( name, int(actual,8), int(low,8), open_low, status )</line>
        <line t="X" i="3961" b="1" n="1"></line>
        <line t="ES" i="3962" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_integer_k1_common</line>
        <line t="ES" i="3963" b="1" n="1"></line>
        <line t="ES" i="3964" b="1" n="1"></line>
        <line t="C" i="3965" b="1" n="1">! Assertion for integer range (kind=2)</line>
        <line k="xfunit_unit_assert_greater_array_integer_k2_common" t="S" i="3966" b="1" n="1">subroutine xfunit_unit_assert_greater_array_integer_k2_common( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="3967" b="1" n="1"></line>
        <line t="C" i="3968" b="1" n="1">! The unit test case</line>
        <line t="X" i="3969" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3970" b="1" n="1"></line>
        <line t="C" i="3971" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3972" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="3973" b="1" n="1"></line>
        <line t="C" i="3974" b="1" n="1">! The actual computed value</line>
        <line t="X" i="3975" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="3976" b="1" n="1"></line>
        <line t="C" i="3977" b="1" n="1">! The low bound value</line>
        <line t="X" i="3978" b="1" n="1">  integer(kind=2), intent(in) :: low</line>
        <line t="X" i="3979" b="1" n="1"></line>
        <line t="C" i="3980" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="3981" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="3982" b="1" n="1"></line>
        <line t="C" i="3983" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="3984" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="3985" b="1" n="1"></line>
        <line t="C" i="3986" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="3987" b="1" n="1">  call ut%xfunit_unit_assert_greater_array_integer_k8_common( name, int(actual,8), int(low,8), open_low, status )</line>
        <line t="X" i="3988" b="1" n="1"></line>
        <line t="ES" i="3989" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_integer_k2_common</line>
        <line t="ES" i="3990" b="1" n="1"></line>
        <line t="ES" i="3991" b="1" n="1"></line>
        <line t="C" i="3992" b="1" n="1">! Assertion for integer range (kind=4)</line>
        <line k="xfunit_unit_assert_greater_array_integer_k4_common" t="S" i="3993" b="1" n="1">subroutine xfunit_unit_assert_greater_array_integer_k4_common( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="3994" b="1" n="1"></line>
        <line t="C" i="3995" b="1" n="1">! The unit test case</line>
        <line t="X" i="3996" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="3997" b="1" n="1"></line>
        <line t="C" i="3998" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="3999" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4000" b="1" n="1"></line>
        <line t="C" i="4001" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4002" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4003" b="1" n="1"></line>
        <line t="C" i="4004" b="1" n="1">! The low bound value</line>
        <line t="X" i="4005" b="1" n="1">  integer(kind=4), intent(in) :: low</line>
        <line t="X" i="4006" b="1" n="1"></line>
        <line t="C" i="4007" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="4008" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="4009" b="1" n="1"></line>
        <line t="C" i="4010" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4011" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4012" b="1" n="1"></line>
        <line t="C" i="4013" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="4014" b="1" n="1">  call ut%xfunit_unit_assert_greater_array_integer_k8_common( name, int(actual,8), int(low,8), open_low, status )</line>
        <line t="X" i="4015" b="1" n="1"></line>
        <line t="ES" i="4016" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_integer_k4_common</line>
        <line t="ES" i="4017" b="1" n="1"></line>
        <line t="ES" i="4018" b="1" n="1"></line>
        <line t="C" i="4019" b="1" n="1">! Assertion for integer range (kind=8)</line>
        <line k="xfunit_unit_assert_greater_array_integer_k8_common" t="S" i="4020" b="1" n="1">subroutine xfunit_unit_assert_greater_array_integer_k8_common( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="4021" b="1" n="1"></line>
        <line t="C" i="4022" b="1" n="1">! The unit test case</line>
        <line t="X" i="4023" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4024" b="1" n="1"></line>
        <line t="C" i="4025" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4026" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4027" b="1" n="1"></line>
        <line t="C" i="4028" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4029" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4030" b="1" n="1"></line>
        <line t="C" i="4031" b="1" n="1">! The low bound value</line>
        <line t="X" i="4032" b="1" n="1">  integer(kind=8), intent(in) :: low</line>
        <line t="X" i="4033" b="1" n="1"></line>
        <line t="C" i="4034" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="4035" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="4036" b="1" n="1"></line>
        <line t="C" i="4037" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4038" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4039" b="1" n="1"></line>
        <line t="C" i="4040" b="1" n="1">! Local variables</line>
        <line t="X" i="4041" b="1" n="1">  type(t_xfunit_assertion_array_integer_greater) :: assertion</line>
        <line t="X" i="4042" b="1" n="1"></line>
        <line t="C" i="4043" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="4044" b="1" n="1">  assertion = xfunit_assertion_array_integer_greater( name, actual, low, open_low )</line>
        <line t="X" i="4045" b="1" n="1"></line>
        <line t="C" i="4046" b="1" n="1">! Process the assertion</line>
        <line t="X" i="4047" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="4048" b="1" n="1"></line>
        <line t="ES" i="4049" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_integer_k8_common</line>
        <line t="ES" i="4050" b="1" n="1"></line>
        <line t="ES" i="4051" b="1" n="1"></line>
        <line t="C" i="4052" b="1" n="1">! Assertion for integer range (kind=1)</line>
        <line k="xfunit_unit_assert_less_array_integer_k1_common" t="S" i="4053" b="1" n="1">subroutine xfunit_unit_assert_less_array_integer_k1_common( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="4054" b="1" n="1"></line>
        <line t="C" i="4055" b="1" n="1">! The unit test case</line>
        <line t="X" i="4056" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4057" b="1" n="1"></line>
        <line t="C" i="4058" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4059" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4060" b="1" n="1"></line>
        <line t="C" i="4061" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4062" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4063" b="1" n="1"></line>
        <line t="C" i="4064" b="1" n="1">! The high bound value</line>
        <line t="X" i="4065" b="1" n="1">  integer(kind=1), intent(in) :: high</line>
        <line t="X" i="4066" b="1" n="1"></line>
        <line t="C" i="4067" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="4068" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="4069" b="1" n="1"></line>
        <line t="C" i="4070" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4071" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4072" b="1" n="1"></line>
        <line t="C" i="4073" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="4074" b="1" n="1">  call ut%xfunit_unit_assert_less_array_integer_k8_common( name, int(actual,8), int(high,8), open_high, status )</line>
        <line t="X" i="4075" b="1" n="1"></line>
        <line t="ES" i="4076" b="1" n="1">end subroutine xfunit_unit_assert_less_array_integer_k1_common</line>
        <line t="ES" i="4077" b="1" n="1"></line>
        <line t="ES" i="4078" b="1" n="1"></line>
        <line t="C" i="4079" b="1" n="1">! Assertion for integer range (kind=2)</line>
        <line k="xfunit_unit_assert_less_array_integer_k2_common" t="S" i="4080" b="1" n="1">subroutine xfunit_unit_assert_less_array_integer_k2_common( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="4081" b="1" n="1"></line>
        <line t="C" i="4082" b="1" n="1">! The unit test case</line>
        <line t="X" i="4083" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4084" b="1" n="1"></line>
        <line t="C" i="4085" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4086" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4087" b="1" n="1"></line>
        <line t="C" i="4088" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4089" b="1" n="1">  integer(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4090" b="1" n="1"></line>
        <line t="C" i="4091" b="1" n="1">! The high bound value</line>
        <line t="X" i="4092" b="1" n="1">  integer(kind=2), intent(in) :: high</line>
        <line t="X" i="4093" b="1" n="1"></line>
        <line t="C" i="4094" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="4095" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="4096" b="1" n="1"></line>
        <line t="C" i="4097" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4098" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4099" b="1" n="1"></line>
        <line t="C" i="4100" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="4101" b="1" n="1">  call ut%xfunit_unit_assert_less_array_integer_k8_common( name, int(actual,8), int(high,8), open_high, status )</line>
        <line t="X" i="4102" b="1" n="1"></line>
        <line t="ES" i="4103" b="1" n="1">end subroutine xfunit_unit_assert_less_array_integer_k2_common</line>
        <line t="ES" i="4104" b="1" n="1"></line>
        <line t="ES" i="4105" b="1" n="1"></line>
        <line t="C" i="4106" b="1" n="1">! Assertion for integer range (kind=4)</line>
        <line k="xfunit_unit_assert_less_array_integer_k4_common" t="S" i="4107" b="1" n="1">subroutine xfunit_unit_assert_less_array_integer_k4_common( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="4108" b="1" n="1"></line>
        <line t="C" i="4109" b="1" n="1">! The unit test case</line>
        <line t="X" i="4110" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4111" b="1" n="1"></line>
        <line t="C" i="4112" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4113" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4114" b="1" n="1"></line>
        <line t="C" i="4115" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4116" b="1" n="1">  integer(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4117" b="1" n="1"></line>
        <line t="C" i="4118" b="1" n="1">! The high bound value</line>
        <line t="X" i="4119" b="1" n="1">  integer(kind=4), intent(in) :: high</line>
        <line t="X" i="4120" b="1" n="1"></line>
        <line t="C" i="4121" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="4122" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="4123" b="1" n="1"></line>
        <line t="C" i="4124" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4125" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4126" b="1" n="1"></line>
        <line t="C" i="4127" b="1" n="1">! Use maximum kind for assertion evaluation</line>
        <line t="X" i="4128" b="1" n="1">  call ut%xfunit_unit_assert_less_array_integer_k8_common( name, int(actual,8), int(high,8), open_high, status )</line>
        <line t="X" i="4129" b="1" n="1"></line>
        <line t="ES" i="4130" b="1" n="1">end subroutine xfunit_unit_assert_less_array_integer_k4_common</line>
        <line t="ES" i="4131" b="1" n="1"></line>
        <line t="ES" i="4132" b="1" n="1"></line>
        <line t="C" i="4133" b="1" n="1">! Assertion for integer range (kind=8)</line>
        <line k="xfunit_unit_assert_less_array_integer_k8_common" t="S" i="4134" b="1" n="1">subroutine xfunit_unit_assert_less_array_integer_k8_common( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="4135" b="1" n="1"></line>
        <line t="C" i="4136" b="1" n="1">! The unit test case</line>
        <line t="X" i="4137" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4138" b="1" n="1"></line>
        <line t="C" i="4139" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4140" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4141" b="1" n="1"></line>
        <line t="C" i="4142" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4143" b="1" n="1">  integer(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4144" b="1" n="1"></line>
        <line t="C" i="4145" b="1" n="1">! The high bound value</line>
        <line t="X" i="4146" b="1" n="1">  integer(kind=8), intent(in) :: high</line>
        <line t="X" i="4147" b="1" n="1"></line>
        <line t="C" i="4148" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="4149" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="4150" b="1" n="1"></line>
        <line t="C" i="4151" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4152" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4153" b="1" n="1"></line>
        <line t="C" i="4154" b="1" n="1">! Local variables</line>
        <line t="X" i="4155" b="1" n="1">  type(t_xfunit_assertion_array_integer_less) :: assertion</line>
        <line t="X" i="4156" b="1" n="1"></line>
        <line t="C" i="4157" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="4158" b="1" n="1">  assertion = xfunit_assertion_array_integer_less( name, actual, high, open_high )</line>
        <line t="X" i="4159" b="1" n="1"></line>
        <line t="C" i="4160" b="1" n="1">! Process the assertion</line>
        <line t="X" i="4161" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="4162" b="1" n="1"></line>
        <line t="ES" i="4163" b="1" n="1">end subroutine xfunit_unit_assert_less_array_integer_k8_common</line>
        <line t="ES" i="4164" b="1" n="1"></line>
        <line t="ES" i="4165" b="1" n="1"></line>
        <line t="C" i="4166" b="1" n="1">! Assertion for real range (kind=4)</line>
        <line k="xfunit_unit_assert_between_array_real_k4_common" t="S" i="4167" b="1" n="1">subroutine xfunit_unit_assert_between_array_real_k4_common( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="4168" b="1" n="1"></line>
        <line t="C" i="4169" b="1" n="1">! The unit test case</line>
        <line t="X" i="4170" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4171" b="1" n="1"></line>
        <line t="C" i="4172" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4173" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4174" b="1" n="1"></line>
        <line t="C" i="4175" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4176" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4177" b="1" n="1"></line>
        <line t="C" i="4178" b="1" n="1">! The low bound value</line>
        <line t="X" i="4179" b="1" n="1">  real(kind=4), intent(in) :: low</line>
        <line t="X" i="4180" b="1" n="1"></line>
        <line t="C" i="4181" b="1" n="1">! The high bound value</line>
        <line t="X" i="4182" b="1" n="1">  real(kind=4), intent(in) :: high</line>
        <line t="X" i="4183" b="1" n="1"></line>
        <line t="C" i="4184" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="4185" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="4186" b="1" n="1"></line>
        <line t="C" i="4187" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="4188" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="4189" b="1" n="1"></line>
        <line t="C" i="4190" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4191" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4192" b="1" n="1"></line>
        <line t="C" i="4193" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="4194" b="1" n="1">  call ut%xfunit_unit_assert_between_array_real_k8_common( name, real(actual,8), real(low,8), real(high,8), &amp;</line>
        <line t="X" i="4195" b="1" n="1">                                                           open_low, open_high, status )</line>
        <line t="X" i="4196" b="1" n="1"></line>
        <line t="ES" i="4197" b="1" n="1">end subroutine xfunit_unit_assert_between_array_real_k4_common</line>
        <line t="ES" i="4198" b="1" n="1"></line>
        <line t="ES" i="4199" b="1" n="1"></line>
        <line t="C" i="4200" b="1" n="1">! Assertion for double range</line>
        <line k="xfunit_unit_assert_between_array_real_k8_common" t="S" i="4201" b="1" n="1">subroutine xfunit_unit_assert_between_array_real_k8_common( ut, name, actual, low, high, open_low, open_high, status )</line>
        <line t="S" i="4202" b="1" n="1"></line>
        <line t="C" i="4203" b="1" n="1">! The unit test case</line>
        <line t="X" i="4204" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4205" b="1" n="1"></line>
        <line t="C" i="4206" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4207" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4208" b="1" n="1"></line>
        <line t="C" i="4209" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4210" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4211" b="1" n="1"></line>
        <line t="C" i="4212" b="1" n="1">! The low bound value</line>
        <line t="X" i="4213" b="1" n="1">  real(kind=8), intent(in) :: low</line>
        <line t="X" i="4214" b="1" n="1"></line>
        <line t="C" i="4215" b="1" n="1">! The high bound value</line>
        <line t="X" i="4216" b="1" n="1">  real(kind=8), intent(in) :: high</line>
        <line t="X" i="4217" b="1" n="1"></line>
        <line t="C" i="4218" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="4219" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="4220" b="1" n="1"></line>
        <line t="C" i="4221" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="4222" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="4223" b="1" n="1"></line>
        <line t="C" i="4224" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4225" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4226" b="1" n="1"></line>
        <line t="C" i="4227" b="1" n="1">! Local variables</line>
        <line t="X" i="4228" b="1" n="1">  type(t_xfunit_assertion_array_real_between) :: assertion</line>
        <line t="X" i="4229" b="1" n="1"></line>
        <line t="C" i="4230" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="4231" b="1" n="1">  assertion = xfunit_assertion_array_real_between( name, actual, low, high, open_low, open_high )</line>
        <line t="X" i="4232" b="1" n="1"></line>
        <line t="C" i="4233" b="1" n="1">! Process the assertion</line>
        <line t="X" i="4234" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="4235" b="1" n="1"></line>
        <line t="ES" i="4236" b="1" n="1">end subroutine xfunit_unit_assert_between_array_real_k8_common</line>
        <line t="ES" i="4237" b="1" n="1"></line>
        <line t="ES" i="4238" b="1" n="1"></line>
        <line t="C" i="4239" b="1" n="1">! Assertion for real range (kind=4)</line>
        <line k="xfunit_unit_assert_greater_array_real_k4_common" t="S" i="4240" b="1" n="1">subroutine xfunit_unit_assert_greater_array_real_k4_common( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="4241" b="1" n="1"></line>
        <line t="C" i="4242" b="1" n="1">! The unit test case</line>
        <line t="X" i="4243" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4244" b="1" n="1"></line>
        <line t="C" i="4245" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4246" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4247" b="1" n="1"></line>
        <line t="C" i="4248" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4249" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4250" b="1" n="1"></line>
        <line t="C" i="4251" b="1" n="1">! The low bound value</line>
        <line t="X" i="4252" b="1" n="1">  real(kind=4), intent(in) :: low</line>
        <line t="X" i="4253" b="1" n="1"></line>
        <line t="C" i="4254" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="4255" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="4256" b="1" n="1"></line>
        <line t="C" i="4257" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4258" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4259" b="1" n="1"></line>
        <line t="C" i="4260" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="4261" b="1" n="1">  call ut%xfunit_unit_assert_greater_array_real_k8_common( name, real(actual,8), real(low,8), open_low, status )</line>
        <line t="X" i="4262" b="1" n="1"></line>
        <line t="ES" i="4263" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_real_k4_common</line>
        <line t="ES" i="4264" b="1" n="1"></line>
        <line t="ES" i="4265" b="1" n="1"></line>
        <line t="C" i="4266" b="1" n="1">! Assertion for double range</line>
        <line k="xfunit_unit_assert_greater_array_real_k8_common" t="S" i="4267" b="1" n="1">subroutine xfunit_unit_assert_greater_array_real_k8_common( ut, name, actual, low, open_low, status )</line>
        <line t="S" i="4268" b="1" n="1"></line>
        <line t="C" i="4269" b="1" n="1">! The unit test case</line>
        <line t="X" i="4270" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4271" b="1" n="1"></line>
        <line t="C" i="4272" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4273" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4274" b="1" n="1"></line>
        <line t="C" i="4275" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4276" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4277" b="1" n="1"></line>
        <line t="C" i="4278" b="1" n="1">! The low bound value</line>
        <line t="X" i="4279" b="1" n="1">  real(kind=8), intent(in) :: low</line>
        <line t="X" i="4280" b="1" n="1"></line>
        <line t="C" i="4281" b="1" n="1">! The low bound is open (optional)</line>
        <line t="X" i="4282" b="1" n="1">  logical, optional, intent(in) :: open_low</line>
        <line t="X" i="4283" b="1" n="1"></line>
        <line t="C" i="4284" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4285" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4286" b="1" n="1"></line>
        <line t="C" i="4287" b="1" n="1">! Local variables</line>
        <line t="X" i="4288" b="1" n="1">  type(t_xfunit_assertion_array_real_greater) :: assertion</line>
        <line t="X" i="4289" b="1" n="1"></line>
        <line t="C" i="4290" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="4291" b="1" n="1">  assertion = xfunit_assertion_array_real_greater( name, actual, low, open_low )</line>
        <line t="X" i="4292" b="1" n="1"></line>
        <line t="C" i="4293" b="1" n="1">! Process the assertion</line>
        <line t="X" i="4294" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="4295" b="1" n="1"></line>
        <line t="ES" i="4296" b="1" n="1">end subroutine xfunit_unit_assert_greater_array_real_k8_common</line>
        <line t="ES" i="4297" b="1" n="1"></line>
        <line t="ES" i="4298" b="1" n="1"></line>
        <line t="C" i="4299" b="1" n="1">! Assertion for real range (kind=4)</line>
        <line k="xfunit_unit_assert_less_array_real_k4_common" t="S" i="4300" b="1" n="1">subroutine xfunit_unit_assert_less_array_real_k4_common( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="4301" b="1" n="1"></line>
        <line t="C" i="4302" b="1" n="1">! The unit test case</line>
        <line t="X" i="4303" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4304" b="1" n="1"></line>
        <line t="C" i="4305" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4306" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4307" b="1" n="1"></line>
        <line t="C" i="4308" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4309" b="1" n="1">  real(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4310" b="1" n="1"></line>
        <line t="C" i="4311" b="1" n="1">! The high bound value</line>
        <line t="X" i="4312" b="1" n="1">  real(kind=4), intent(in) :: high</line>
        <line t="X" i="4313" b="1" n="1"></line>
        <line t="C" i="4314" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="4315" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="4316" b="1" n="1"></line>
        <line t="C" i="4317" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4318" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4319" b="1" n="1"></line>
        <line t="C" i="4320" b="1" n="1">! Use maximum kind real assertion</line>
        <line t="X" i="4321" b="1" n="1">  call ut%xfunit_unit_assert_less_array_real_k8_common( name, real(actual,8), real(high,8), open_high, status )</line>
        <line t="X" i="4322" b="1" n="1"></line>
        <line t="ES" i="4323" b="1" n="1">end subroutine xfunit_unit_assert_less_array_real_k4_common</line>
        <line t="ES" i="4324" b="1" n="1"></line>
        <line t="ES" i="4325" b="1" n="1"></line>
        <line t="C" i="4326" b="1" n="1">! Assertion for double range</line>
        <line k="xfunit_unit_assert_less_array_real_k8_common" t="S" i="4327" b="1" n="1">subroutine xfunit_unit_assert_less_array_real_k8_common( ut, name, actual, high, open_high, status )</line>
        <line t="S" i="4328" b="1" n="1"></line>
        <line t="C" i="4329" b="1" n="1">! The unit test case</line>
        <line t="X" i="4330" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4331" b="1" n="1"></line>
        <line t="C" i="4332" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4333" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4334" b="1" n="1"></line>
        <line t="C" i="4335" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4336" b="1" n="1">  real(kind=8), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4337" b="1" n="1"></line>
        <line t="C" i="4338" b="1" n="1">! The high bound value</line>
        <line t="X" i="4339" b="1" n="1">  real(kind=8), intent(in) :: high</line>
        <line t="X" i="4340" b="1" n="1"></line>
        <line t="C" i="4341" b="1" n="1">! The high bound is open (optional)</line>
        <line t="X" i="4342" b="1" n="1">  logical, optional, intent(in) :: open_high</line>
        <line t="X" i="4343" b="1" n="1"></line>
        <line t="C" i="4344" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4345" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4346" b="1" n="1"></line>
        <line t="C" i="4347" b="1" n="1">! Local variables</line>
        <line t="X" i="4348" b="1" n="1">  type(t_xfunit_assertion_array_real_less) :: assertion</line>
        <line t="X" i="4349" b="1" n="1"></line>
        <line t="C" i="4350" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="4351" b="1" n="1">  assertion = xfunit_assertion_array_real_less( name, actual, high, open_high )</line>
        <line t="X" i="4352" b="1" n="1"></line>
        <line t="C" i="4353" b="1" n="1">! Process the assertion</line>
        <line t="X" i="4354" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="4355" b="1" n="1"></line>
        <line t="ES" i="4356" b="1" n="1">end subroutine xfunit_unit_assert_less_array_real_k8_common</line>
        <line t="ES" i="4357" b="1" n="1"></line>
        <line t="ES" i="4358" b="1" n="1"></line>
        <line t="C" i="4359" b="1" n="1">! Assertion for logical expressions (.false. kind=1)</line>
        <line k="xfunit_unit_assert_false_k1" t="S" i="4360" b="1" n="1">subroutine xfunit_unit_assert_false_k1( ut, name, actual, status )</line>
        <line t="S" i="4361" b="1" n="1"></line>
        <line t="C" i="4362" b="1" n="1">! The unit test case</line>
        <line t="X" i="4363" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4364" b="1" n="1"></line>
        <line t="C" i="4365" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4366" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4367" b="1" n="1"></line>
        <line t="C" i="4368" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4369" b="1" n="1">  logical(kind=1), intent(in) :: actual</line>
        <line t="X" i="4370" b="1" n="1"></line>
        <line t="C" i="4371" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4372" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4373" b="1" n="1"></line>
        <line t="C" i="4374" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4375" b="1" n="1">  call ut%assert_equal( name, actual, .false._1, status )</line>
        <line t="X" i="4376" b="1" n="1"></line>
        <line t="ES" i="4377" b="1" n="1">end subroutine xfunit_unit_assert_false_k1</line>
        <line t="ES" i="4378" b="1" n="1"></line>
        <line t="ES" i="4379" b="1" n="1"></line>
        <line t="C" i="4380" b="1" n="1">! Assertion for logical expressions (.false. kind=2)</line>
        <line k="xfunit_unit_assert_false_k2" t="S" i="4381" b="1" n="1">subroutine xfunit_unit_assert_false_k2( ut, name, actual, status )</line>
        <line t="S" i="4382" b="1" n="1"></line>
        <line t="C" i="4383" b="1" n="1">! The unit test case</line>
        <line t="X" i="4384" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4385" b="1" n="1"></line>
        <line t="C" i="4386" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4387" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4388" b="1" n="1"></line>
        <line t="C" i="4389" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4390" b="1" n="1">  logical(kind=2), intent(in) :: actual</line>
        <line t="X" i="4391" b="1" n="1"></line>
        <line t="C" i="4392" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4393" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4394" b="1" n="1"></line>
        <line t="C" i="4395" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4396" b="1" n="1">  call ut%assert_equal( name, actual, .false._2, status )</line>
        <line t="X" i="4397" b="1" n="1"></line>
        <line t="ES" i="4398" b="1" n="1">end subroutine xfunit_unit_assert_false_k2</line>
        <line t="ES" i="4399" b="1" n="1"></line>
        <line t="ES" i="4400" b="1" n="1"></line>
        <line t="C" i="4401" b="1" n="1">! Assertion for logical expressions (.false. kind=4)</line>
        <line k="xfunit_unit_assert_false_k4" t="S" i="4402" b="1" n="1">subroutine xfunit_unit_assert_false_k4( ut, name, actual, status )</line>
        <line t="S" i="4403" b="1" n="1"></line>
        <line t="C" i="4404" b="1" n="1">! The unit test case</line>
        <line t="X" i="4405" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4406" b="1" n="1"></line>
        <line t="C" i="4407" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4408" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4409" b="1" n="1"></line>
        <line t="C" i="4410" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4411" b="1" n="1">  logical(kind=4), intent(in) :: actual</line>
        <line t="X" i="4412" b="1" n="1"></line>
        <line t="C" i="4413" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4414" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4415" b="1" n="1"></line>
        <line t="C" i="4416" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4417" b="1" n="1">  call ut%assert_equal( name, actual, .false._4, status )</line>
        <line t="X" i="4418" b="1" n="1"></line>
        <line t="ES" i="4419" b="1" n="1">end subroutine xfunit_unit_assert_false_k4</line>
        <line t="ES" i="4420" b="1" n="1"></line>
        <line t="ES" i="4421" b="1" n="1"></line>
        <line t="C" i="4422" b="1" n="1">! Assertion for logical expressions (.true. kind=1)</line>
        <line k="xfunit_unit_assert_true_k1" t="S" i="4423" b="1" n="1">subroutine xfunit_unit_assert_true_k1( ut, name, actual, status )</line>
        <line t="S" i="4424" b="1" n="1"></line>
        <line t="C" i="4425" b="1" n="1">! The unit test case</line>
        <line t="X" i="4426" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4427" b="1" n="1"></line>
        <line t="C" i="4428" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4429" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4430" b="1" n="1"></line>
        <line t="C" i="4431" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4432" b="1" n="1">  logical(kind=1), intent(in) :: actual</line>
        <line t="X" i="4433" b="1" n="1"></line>
        <line t="C" i="4434" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4435" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4436" b="1" n="1"></line>
        <line t="C" i="4437" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4438" b="1" n="1">  call ut%assert_equal( name, actual, .true._1, status )</line>
        <line t="X" i="4439" b="1" n="1"></line>
        <line t="ES" i="4440" b="1" n="1">end subroutine xfunit_unit_assert_true_k1</line>
        <line t="ES" i="4441" b="1" n="1"></line>
        <line t="ES" i="4442" b="1" n="1"></line>
        <line t="C" i="4443" b="1" n="1">! Assertion for logical expressions (.true. kind=2)</line>
        <line k="xfunit_unit_assert_true_k2" t="S" i="4444" b="1" n="1">subroutine xfunit_unit_assert_true_k2( ut, name, actual, status )</line>
        <line t="S" i="4445" b="1" n="1"></line>
        <line t="C" i="4446" b="1" n="1">! The unit test case</line>
        <line t="X" i="4447" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4448" b="1" n="1"></line>
        <line t="C" i="4449" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4450" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4451" b="1" n="1"></line>
        <line t="C" i="4452" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4453" b="1" n="1">  logical(kind=2), intent(in) :: actual</line>
        <line t="X" i="4454" b="1" n="1"></line>
        <line t="C" i="4455" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4456" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4457" b="1" n="1"></line>
        <line t="C" i="4458" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4459" b="1" n="1">  call ut%assert_equal( name, actual, .true._2, status )</line>
        <line t="X" i="4460" b="1" n="1"></line>
        <line t="ES" i="4461" b="1" n="1">end subroutine xfunit_unit_assert_true_k2</line>
        <line t="ES" i="4462" b="1" n="1"></line>
        <line t="ES" i="4463" b="1" n="1"></line>
        <line t="C" i="4464" b="1" n="1">! Assertion for logical expressions (.true. kind=4)</line>
        <line k="xfunit_unit_assert_true_k4" t="S" i="4465" b="1" n="1">subroutine xfunit_unit_assert_true_k4( ut, name, actual, status )</line>
        <line t="S" i="4466" b="1" n="1"></line>
        <line t="C" i="4467" b="1" n="1">! The unit test case</line>
        <line t="X" i="4468" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4469" b="1" n="1"></line>
        <line t="C" i="4470" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4471" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4472" b="1" n="1"></line>
        <line t="C" i="4473" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4474" b="1" n="1">  logical(kind=4), intent(in) :: actual</line>
        <line t="X" i="4475" b="1" n="1"></line>
        <line t="C" i="4476" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4477" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4478" b="1" n="1"></line>
        <line t="C" i="4479" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4480" b="1" n="1">  call ut%assert_equal( name, actual, .true._4, status )</line>
        <line t="X" i="4481" b="1" n="1"></line>
        <line t="ES" i="4482" b="1" n="1">end subroutine xfunit_unit_assert_true_k4</line>
        <line t="ES" i="4483" b="1" n="1"></line>
        <line t="ES" i="4484" b="1" n="1"></line>
        <line t="C" i="4485" b="1" n="1">! Assertion pass</line>
        <line k="xfunit_unit_assert_pass" t="S" i="4486" b="1" n="1">subroutine xfunit_unit_assert_pass( ut, name, status )</line>
        <line t="S" i="4487" b="1" n="1"></line>
        <line t="C" i="4488" b="1" n="1">! The unit test case</line>
        <line t="X" i="4489" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4490" b="1" n="1"></line>
        <line t="C" i="4491" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4492" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4493" b="1" n="1"></line>
        <line t="C" i="4494" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4495" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4496" b="1" n="1"></line>
        <line t="C" i="4497" b="1" n="1">! Local variables</line>
        <line t="X" i="4498" b="1" n="1">  type(t_xfunit_assertion_pass) :: assertion</line>
        <line t="X" i="4499" b="1" n="1"></line>
        <line t="C" i="4500" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="4501" b="1" n="1">  assertion = xfunit_assertion_pass( name )</line>
        <line t="X" i="4502" b="1" n="1"></line>
        <line t="C" i="4503" b="1" n="1">! Process the assertion</line>
        <line t="X" i="4504" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="4505" b="1" n="1"></line>
        <line t="ES" i="4506" b="1" n="1">end subroutine xfunit_unit_assert_pass</line>
        <line t="ES" i="4507" b="1" n="1"></line>
        <line t="ES" i="4508" b="1" n="1"></line>
        <line t="C" i="4509" b="1" n="1">! Assertion fail</line>
        <line k="xfunit_unit_assert_fail" t="S" i="4510" b="1" n="1">subroutine xfunit_unit_assert_fail( ut, name, status )</line>
        <line t="S" i="4511" b="1" n="1"></line>
        <line t="C" i="4512" b="1" n="1">! The unit test case</line>
        <line t="X" i="4513" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4514" b="1" n="1"></line>
        <line t="C" i="4515" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4516" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4517" b="1" n="1"></line>
        <line t="C" i="4518" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4519" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4520" b="1" n="1"></line>
        <line t="C" i="4521" b="1" n="1">! Local variables</line>
        <line t="X" i="4522" b="1" n="1">  type(t_xfunit_assertion_fail) :: assertion</line>
        <line t="X" i="4523" b="1" n="1"></line>
        <line t="C" i="4524" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="4525" b="1" n="1">  assertion = xfunit_assertion_fail( name )</line>
        <line t="X" i="4526" b="1" n="1"></line>
        <line t="C" i="4527" b="1" n="1">! Process the assertion</line>
        <line t="X" i="4528" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="4529" b="1" n="1"></line>
        <line t="ES" i="4530" b="1" n="1">end subroutine xfunit_unit_assert_fail</line>
        <line t="ES" i="4531" b="1" n="1"></line>
        <line t="ES" i="4532" b="1" n="1"></line>
        <line t="C" i="4533" b="1" n="1">! Assertion for logical expressions (.false. kind=1)</line>
        <line k="xfunit_unit_assert_array_false_k1" t="S" i="4534" b="1" n="1">subroutine xfunit_unit_assert_array_false_k1( ut, name, actual, status )</line>
        <line t="S" i="4535" b="1" n="1"></line>
        <line t="C" i="4536" b="1" n="1">! The unit test case</line>
        <line t="X" i="4537" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4538" b="1" n="1"></line>
        <line t="C" i="4539" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4540" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4541" b="1" n="1"></line>
        <line t="C" i="4542" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4543" b="1" n="1">  logical(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4544" b="1" n="1"></line>
        <line t="C" i="4545" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4546" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4547" b="1" n="1"></line>
        <line t="C" i="4548" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4549" b="1" n="1">  call ut%assert_equal( name, actual, .false._1, status )</line>
        <line t="X" i="4550" b="1" n="1"></line>
        <line t="ES" i="4551" b="1" n="1">end subroutine xfunit_unit_assert_array_false_k1</line>
        <line t="ES" i="4552" b="1" n="1"></line>
        <line t="ES" i="4553" b="1" n="1"></line>
        <line t="C" i="4554" b="1" n="1">! Assertion for logical expressions (.false. kind=2)</line>
        <line k="xfunit_unit_assert_array_false_k2" t="S" i="4555" b="1" n="1">subroutine xfunit_unit_assert_array_false_k2( ut, name, actual, status )</line>
        <line t="S" i="4556" b="1" n="1"></line>
        <line t="C" i="4557" b="1" n="1">! The unit test case</line>
        <line t="X" i="4558" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4559" b="1" n="1"></line>
        <line t="C" i="4560" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4561" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4562" b="1" n="1"></line>
        <line t="C" i="4563" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4564" b="1" n="1">  logical(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4565" b="1" n="1"></line>
        <line t="C" i="4566" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4567" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4568" b="1" n="1"></line>
        <line t="C" i="4569" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4570" b="1" n="1">  call ut%assert_equal( name, actual, .false._2, status )</line>
        <line t="X" i="4571" b="1" n="1"></line>
        <line t="ES" i="4572" b="1" n="1">end subroutine xfunit_unit_assert_array_false_k2</line>
        <line t="ES" i="4573" b="1" n="1"></line>
        <line t="ES" i="4574" b="1" n="1"></line>
        <line t="C" i="4575" b="1" n="1">! Assertion for logical expressions (.false. kind=4)</line>
        <line k="xfunit_unit_assert_array_false_k4" t="S" i="4576" b="1" n="1">subroutine xfunit_unit_assert_array_false_k4( ut, name, actual, status )</line>
        <line t="S" i="4577" b="1" n="1"></line>
        <line t="C" i="4578" b="1" n="1">! The unit test case</line>
        <line t="X" i="4579" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4580" b="1" n="1"></line>
        <line t="C" i="4581" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4582" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4583" b="1" n="1"></line>
        <line t="C" i="4584" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4585" b="1" n="1">  logical(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4586" b="1" n="1"></line>
        <line t="C" i="4587" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4588" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4589" b="1" n="1"></line>
        <line t="C" i="4590" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4591" b="1" n="1">  call ut%assert_equal( name, actual, .false._4, status )</line>
        <line t="X" i="4592" b="1" n="1"></line>
        <line t="ES" i="4593" b="1" n="1">end subroutine xfunit_unit_assert_array_false_k4</line>
        <line t="ES" i="4594" b="1" n="1"></line>
        <line t="ES" i="4595" b="1" n="1"></line>
        <line t="C" i="4596" b="1" n="1">! Assertion for logical expressions (.true. kind=1)</line>
        <line k="xfunit_unit_assert_array_true_k1" t="S" i="4597" b="1" n="1">subroutine xfunit_unit_assert_array_true_k1( ut, name, actual, status )</line>
        <line t="S" i="4598" b="1" n="1"></line>
        <line t="C" i="4599" b="1" n="1">! The unit test case</line>
        <line t="X" i="4600" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4601" b="1" n="1"></line>
        <line t="C" i="4602" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4603" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4604" b="1" n="1"></line>
        <line t="C" i="4605" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4606" b="1" n="1">  logical(kind=1), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4607" b="1" n="1"></line>
        <line t="C" i="4608" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4609" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4610" b="1" n="1"></line>
        <line t="C" i="4611" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4612" b="1" n="1">  call ut%assert_equal( name, actual, .true._1, status )</line>
        <line t="X" i="4613" b="1" n="1"></line>
        <line t="ES" i="4614" b="1" n="1">end subroutine xfunit_unit_assert_array_true_k1</line>
        <line t="ES" i="4615" b="1" n="1"></line>
        <line t="ES" i="4616" b="1" n="1"></line>
        <line t="C" i="4617" b="1" n="1">! Assertion for logical expressions (.true. kind=2)</line>
        <line k="xfunit_unit_assert_array_true_k2" t="S" i="4618" b="1" n="1">subroutine xfunit_unit_assert_array_true_k2( ut, name, actual, status )</line>
        <line t="S" i="4619" b="1" n="1"></line>
        <line t="C" i="4620" b="1" n="1">! The unit test case</line>
        <line t="X" i="4621" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4622" b="1" n="1"></line>
        <line t="C" i="4623" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4624" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4625" b="1" n="1"></line>
        <line t="C" i="4626" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4627" b="1" n="1">  logical(kind=2), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4628" b="1" n="1"></line>
        <line t="C" i="4629" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4630" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4631" b="1" n="1"></line>
        <line t="C" i="4632" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4633" b="1" n="1">  call ut%assert_equal( name, actual, .true._2, status )</line>
        <line t="X" i="4634" b="1" n="1"></line>
        <line t="ES" i="4635" b="1" n="1">end subroutine xfunit_unit_assert_array_true_k2</line>
        <line t="ES" i="4636" b="1" n="1"></line>
        <line t="ES" i="4637" b="1" n="1"></line>
        <line t="C" i="4638" b="1" n="1">! Assertion for logical expressions (.true. kind=4)</line>
        <line k="xfunit_unit_assert_array_true_k4" t="S" i="4639" b="1" n="1">subroutine xfunit_unit_assert_array_true_k4( ut, name, actual, status )</line>
        <line t="S" i="4640" b="1" n="1"></line>
        <line t="C" i="4641" b="1" n="1">! The unit test case</line>
        <line t="X" i="4642" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4643" b="1" n="1"></line>
        <line t="C" i="4644" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4645" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4646" b="1" n="1"></line>
        <line t="C" i="4647" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4648" b="1" n="1">  logical(kind=4), dimension(:), intent(in) :: actual</line>
        <line t="X" i="4649" b="1" n="1"></line>
        <line t="C" i="4650" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4651" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4652" b="1" n="1"></line>
        <line t="C" i="4653" b="1" n="1">! Use equality assertion</line>
        <line t="X" i="4654" b="1" n="1">  call ut%assert_equal( name, actual, .true._4, status )</line>
        <line t="X" i="4655" b="1" n="1"></line>
        <line t="ES" i="4656" b="1" n="1">end subroutine xfunit_unit_assert_array_true_k4</line>
        <line t="ES" i="4657" b="1" n="1"></line>
        <line t="ES" i="4658" b="1" n="1"></line>
        <line t="C" i="4659" b="1" n="1">! Assertion for file equality</line>
        <line k="xfunit_unit_assert_compare_files_character" t="S" i="4660" b="1" n="1">subroutine xfunit_unit_assert_compare_files_character( ut, name, actual, expected, binary, status )</line>
        <line t="S" i="4661" b="1" n="1"></line>
        <line t="C" i="4662" b="1" n="1">! The unit test case</line>
        <line t="X" i="4663" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4664" b="1" n="1"></line>
        <line t="C" i="4665" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4666" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4667" b="1" n="1"></line>
        <line t="C" i="4668" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4669" b="1" n="1">  character(len=*), intent(in) :: actual</line>
        <line t="X" i="4670" b="1" n="1"></line>
        <line t="C" i="4671" b="1" n="1">! The expected value</line>
        <line t="X" i="4672" b="1" n="1">  character(len=*), intent(in) :: expected</line>
        <line t="X" i="4673" b="1" n="1"></line>
        <line t="C" i="4674" b="1" n="1">! Implement a binary comparison</line>
        <line t="X" i="4675" b="1" n="1">  logical, optional, intent(in) :: binary</line>
        <line t="X" i="4676" b="1" n="1"></line>
        <line t="C" i="4677" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4678" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4679" b="1" n="1"></line>
        <line t="C" i="4680" b="1" n="1">! Local variables</line>
        <line t="X" i="4681" b="1" n="1">  type(t_xfunit_assertion_files) :: assertion</line>
        <line t="X" i="4682" b="1" n="1"></line>
        <line t="C" i="4683" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="4684" b="1" n="1">  assertion = xfunit_assertion_files( name, actual, expected, binary )</line>
        <line t="X" i="4685" b="1" n="1"></line>
        <line t="C" i="4686" b="1" n="1">! Process the assertion</line>
        <line t="X" i="4687" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="4688" b="1" n="1"></line>
        <line t="ES" i="4689" b="1" n="1">end subroutine xfunit_unit_assert_compare_files_character</line>
        <line t="ES" i="4690" b="1" n="1"></line>
        <line t="ES" i="4691" b="1" n="1"></line>
        <line t="C" i="4692" b="1" n="1">! Assertion for file equality</line>
        <line k="xfunit_unit_assert_compare_files_string" t="S" i="4693" b="1" n="1">subroutine xfunit_unit_assert_compare_files_string( ut, name, actual, expected, binary, status )</line>
        <line t="S" i="4694" b="1" n="1"></line>
        <line t="C" i="4695" b="1" n="1">! The unit test case</line>
        <line t="X" i="4696" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4697" b="1" n="1"></line>
        <line t="C" i="4698" b="1" n="1">! Name for the assertion</line>
        <line t="X" i="4699" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="4700" b="1" n="1"></line>
        <line t="C" i="4701" b="1" n="1">! The actual computed value</line>
        <line t="X" i="4702" b="1" n="1">  type(t_string), intent(in) :: actual</line>
        <line t="X" i="4703" b="1" n="1"></line>
        <line t="C" i="4704" b="1" n="1">! The expected value</line>
        <line t="X" i="4705" b="1" n="1">  type(t_string), intent(in) :: expected</line>
        <line t="X" i="4706" b="1" n="1"></line>
        <line t="C" i="4707" b="1" n="1">! Implement a binary comparison</line>
        <line t="X" i="4708" b="1" n="1">  logical, optional, intent(in) :: binary</line>
        <line t="X" i="4709" b="1" n="1"></line>
        <line t="C" i="4710" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4711" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4712" b="1" n="1"></line>
        <line t="C" i="4713" b="1" n="1">! Local variables</line>
        <line t="X" i="4714" b="1" n="1">  type(t_xfunit_assertion_files) :: assertion</line>
        <line t="X" i="4715" b="1" n="1"></line>
        <line t="C" i="4716" b="1" n="1">! Construct the assertion structure</line>
        <line t="X" i="4717" b="1" n="1">  assertion = xfunit_assertion_files( name, actual%character(), expected%character(), binary )</line>
        <line t="X" i="4718" b="1" n="1"></line>
        <line t="C" i="4719" b="1" n="1">! Process the assertion</line>
        <line t="X" i="4720" b="1" n="1">  call ut%process_assertion( assertion, status )</line>
        <line t="X" i="4721" b="1" n="1"></line>
        <line t="ES" i="4722" b="1" n="1">end subroutine xfunit_unit_assert_compare_files_string</line>
        <line t="ES" i="4723" b="1" n="1"></line>
        <line t="ES" i="4724" b="1" n="1"></line>
        <line t="C" i="4725" b="1" n="1">! Generic processing of assertions</line>
        <line k="xfunit_unit_process_assertion" t="S" i="4726" b="1" n="1">subroutine xfunit_unit_process_assertion( ut, assertion, status )</line>
        <line t="S" i="4727" b="1" n="1"></line>
        <line t="C" i="4728" b="1" n="1">! The unit test</line>
        <line t="X" i="4729" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4730" b="1" n="1"></line>
        <line t="C" i="4731" b="1" n="1">! The polymorphic pointer to the assertion</line>
        <line t="X" i="4732" b="1" n="1">  class(t_xfunit_assertion), intent(in) :: assertion</line>
        <line t="X" i="4733" b="1" n="1"></line>
        <line t="C" i="4734" b="1" n="1">! The assertion result (optional)</line>
        <line t="X" i="4735" b="1" n="1">  integer, optional, intent(out) :: status</line>
        <line t="X" i="4736" b="1" n="1"></line>
        <line t="C" i="4737" b="1" n="1">! Local variables</line>
        <line t="X" i="4738" b="1" n="1">  integer :: localstatus</line>
        <line t="X" i="4739" b="1" n="1"></line>
        <line t="C" i="4740" b="1" n="1">! Process the assertion</line>
        <line t="X" i="4741" b="1" n="1">  localstatus = assertion%get_status()</line>
        <line t="X" i="4742" b="2" n="2">  if( localstatus == xfunit_assertion_is_pass ) then</line>
        <line t="X" i="4743" b="2" n="2">    ut%passed_assertions = ut%passed_assertions + 1</line>
        <line t="X" i="4744" b="3" n="2">  else</line>
        <line t="X" i="4745" b="3" n="2">    ut%failed_assertions = ut%failed_assertions + 1</line>
        <line t="X" i="4746" b="3" n="1">  end if</line>
        <line t="X" i="4747" b="4" n="2">  if( present(status) ) then</line>
        <line t="X" i="4748" b="4" n="2">    status = localstatus</line>
        <line t="X" i="4749" b="4" n="1">  end if</line>
        <line t="X" i="4750" b="4" n="1"></line>
        <line t="C" i="4751" b="4" n="1">! Add the assertion error to the error stack</line>
        <line t="X" i="4752" b="5" n="2">  if( assertion%on_error() ) then</line>
        <line t="X" i="4753" b="5" n="2">    call ut%msg%error( assertion%get_error() )</line>
        <line t="X" i="4754" b="5" n="2">    ut%status = 1</line>
        <line t="X" i="4755" b="5" n="1">  end if</line>
        <line t="X" i="4756" b="5" n="1"></line>
        <line t="C" i="4757" b="5" n="1">! Add assertion to the report</line>
        <line t="X" i="4758" b="5" n="1">  call ut%report%push_back( assertion )</line>
        <line t="X" i="4759" b="5" n="1"></line>
        <line t="ES" i="4760" b="5" n="1">end subroutine xfunit_unit_process_assertion</line>
        <line t="ES" i="4761" b="1" n="1"></line>
        <line t="ES" i="4762" b="1" n="1"></line>
        <line t="C" i="4763" b="1" n="1">! Operators (to allow inclusion in dyanmic containers)</line>
        <line t="C" i="4764" b="1" n="1"></line>
        <line t="C" i="4765" b="1" n="1">! Equality operator</line>
        <line k="xfunit_unit_equal" t="F" i="4766" b="1" n="1">elemental function xfunit_unit_equal( left, right ) result(res)</line>
        <line t="F" i="4767" b="1" n="1"></line>
        <line t="C" i="4768" b="1" n="1">! Left operand</line>
        <line t="X" i="4769" b="1" n="1">  class(t_xfunit_unit), intent(in) :: left</line>
        <line t="X" i="4770" b="1" n="1"></line>
        <line t="C" i="4771" b="1" n="1">! Right operand</line>
        <line t="X" i="4772" b="1" n="1">  class(t_xfunit_unit), intent(in) :: right</line>
        <line t="X" i="4773" b="1" n="1"></line>
        <line t="C" i="4774" b="1" n="1">! Operation result</line>
        <line t="X" i="4775" b="1" n="1">  logical :: res</line>
        <line t="X" i="4776" b="1" n="1"></line>
        <line t="C" i="4777" b="1" n="1">! Set operation result</line>
        <line t="X" i="4778" b="1" n="1">  res = ( left%name == right%name )</line>
        <line t="X" i="4779" b="1" n="1"></line>
        <line t="EF" i="4780" b="1" n="1">end function xfunit_unit_equal</line>
        <line t="EF" i="4781" b="1" n="1"></line>
        <line t="EF" i="4782" b="1" n="1"></line>
        <line t="C" i="4783" b="1" n="1">! Less than operator</line>
        <line k="xfunit_unit_less" t="F" i="4784" b="1" n="1">elemental function xfunit_unit_less( left, right ) result(res)</line>
        <line t="F" i="4785" b="1" n="1"></line>
        <line t="C" i="4786" b="1" n="1">! Left operand</line>
        <line t="X" i="4787" b="1" n="1">  class(t_xfunit_unit), intent(in) :: left</line>
        <line t="X" i="4788" b="1" n="1"></line>
        <line t="C" i="4789" b="1" n="1">! Right operand</line>
        <line t="X" i="4790" b="1" n="1">  class(t_xfunit_unit), intent(in) :: right</line>
        <line t="X" i="4791" b="1" n="1"></line>
        <line t="C" i="4792" b="1" n="1">! Operation result</line>
        <line t="X" i="4793" b="1" n="1">  logical :: res</line>
        <line t="X" i="4794" b="1" n="1"></line>
        <line t="C" i="4795" b="1" n="1">! Set operation result</line>
        <line t="X" i="4796" b="1" n="1">  res = ( left%name &lt; right%name )</line>
        <line t="X" i="4797" b="1" n="1"></line>
        <line t="EF" i="4798" b="1" n="1">end function xfunit_unit_less</line>
        <line t="EF" i="4799" b="1" n="1"></line>
        <line t="EF" i="4800" b="1" n="1"></line>
        <line t="C" i="4801" b="1" n="1">! Greater than operator</line>
        <line k="xfunit_unit_greater" t="F" i="4802" b="1" n="1">elemental function xfunit_unit_greater( left, right ) result(res)</line>
        <line t="F" i="4803" b="1" n="1"></line>
        <line t="C" i="4804" b="1" n="1">! Left operand</line>
        <line t="X" i="4805" b="1" n="1">  class(t_xfunit_unit), intent(in) :: left</line>
        <line t="X" i="4806" b="1" n="1"></line>
        <line t="C" i="4807" b="1" n="1">! Right operand</line>
        <line t="X" i="4808" b="1" n="1">  class(t_xfunit_unit), intent(in) :: right</line>
        <line t="X" i="4809" b="1" n="1"></line>
        <line t="C" i="4810" b="1" n="1">! Operation result</line>
        <line t="X" i="4811" b="1" n="1">  logical :: res</line>
        <line t="X" i="4812" b="1" n="1"></line>
        <line t="C" i="4813" b="1" n="1">! Set operation result</line>
        <line t="X" i="4814" b="1" n="1">  res = ( left%name &gt; right%name )</line>
        <line t="X" i="4815" b="1" n="1"></line>
        <line t="EF" i="4816" b="1" n="1">end function xfunit_unit_greater</line>
        <line t="EF" i="4817" b="1" n="1"></line>
        <line t="EF" i="4818" b="1" n="1"></line>
        <line t="C" i="4819" b="1" n="1">! Assignment</line>
        <line k="xfunit_unit_assign_xfunit_unit" t="S" i="4820" b="1" n="1">subroutine xfunit_unit_assign_xfunit_unit( left, right )</line>
        <line t="S" i="4821" b="1" n="1"></line>
        <line t="C" i="4822" b="1" n="1">! Left operand</line>
        <line t="X" i="4823" b="1" n="1">  class(t_xfunit_unit), intent(out) :: left</line>
        <line t="X" i="4824" b="1" n="1"></line>
        <line t="C" i="4825" b="1" n="1">! Right operand</line>
        <line t="X" i="4826" b="1" n="1">  class(t_xfunit_unit), intent(in) :: right</line>
        <line t="X" i="4827" b="1" n="1"></line>
        <line t="C" i="4828" b="1" n="1">! Assign fields</line>
        <line t="X" i="4829" b="1" n="1">  left%name = right%name</line>
        <line t="X" i="4830" b="1" n="1">  left%classname = right%classname</line>
        <line t="X" i="4831" b="1" n="1">  left%annotation = right%annotation</line>
        <line t="X" i="4832" b="1" n="1">  left%executed = right%executed</line>
        <line t="X" i="4833" b="1" n="1">  left%passed_assertions = right%passed_assertions</line>
        <line t="X" i="4834" b="1" n="1">  left%failed_assertions = right%failed_assertions</line>
        <line t="X" i="4835" b="1" n="1">  left%time0 = right%time0</line>
        <line t="X" i="4836" b="1" n="1">  left%time1 = right%time1</line>
        <line t="X" i="4837" b="1" n="1">  left%executer =&gt; right%executer</line>
        <line t="X" i="4838" b="1" n="1">  left%before =&gt; right%before</line>
        <line t="X" i="4839" b="1" n="1">  left%after =&gt; right%after</line>
        <line t="X" i="4840" b="1" n="1">  left%status = right%status</line>
        <line t="X" i="4841" b="1" n="1">  left%error_message = right%error_message</line>
        <line t="X" i="4842" b="1" n="1">  left%msg = right%msg</line>
        <line t="X" i="4843" b="1" n="1"></line>
        <line t="C" i="4844" b="1" n="1">! Set report if there is one already allocated</line>
        <line t="X" i="4845" b="2" n="2">  if( allocated(right%report) ) then</line>
        <line t="X" i="4846" b="2" n="2">    allocate( left%report )</line>
        <line t="X" i="4847" b="2" n="2">    left%report = right%report</line>
        <line t="X" i="4848" b="2" n="1">  end if</line>
        <line t="X" i="4849" b="2" n="1"></line>
        <line t="ES" i="4850" b="2" n="1">end subroutine xfunit_unit_assign_xfunit_unit</line>
        <line t="ES" i="4851" b="1" n="1"></line>
        <line t="ES" i="4852" b="1" n="1"></line>
        <line t="C" i="4853" b="1" n="1">! Getter for unit test name</line>
        <line k="xfunit_unit_get_name" t="F" i="4854" b="1" n="1">elemental function xfunit_unit_get_name( ut ) result(res)</line>
        <line t="F" i="4855" b="1" n="1"></line>
        <line t="C" i="4856" b="1" n="1">! Calling object</line>
        <line t="X" i="4857" b="1" n="1">  class(t_xfunit_unit), intent(in) :: ut</line>
        <line t="X" i="4858" b="1" n="1"></line>
        <line t="C" i="4859" b="1" n="1">! Return value</line>
        <line t="X" i="4860" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="4861" b="1" n="1"></line>
        <line t="C" i="4862" b="1" n="1">! Set the return value</line>
        <line t="X" i="4863" b="1" n="1">  res = ut%name</line>
        <line t="X" i="4864" b="1" n="1"></line>
        <line t="EF" i="4865" b="1" n="1">end function xfunit_unit_get_name</line>
        <line t="EF" i="4866" b="1" n="1"></line>
        <line t="EF" i="4867" b="1" n="1"></line>
        <line t="C" i="4868" b="1" n="1">! Getter for the count of passed assertions</line>
        <line k="xfunit_unit_get_passed_assertions" t="F" i="4869" b="1" n="1">elemental function xfunit_unit_get_passed_assertions( ut ) result(res)</line>
        <line t="F" i="4870" b="1" n="1"></line>
        <line t="C" i="4871" b="1" n="1">! Calling object</line>
        <line t="X" i="4872" b="1" n="1">  class(t_xfunit_unit), intent(in) :: ut</line>
        <line t="X" i="4873" b="1" n="1"></line>
        <line t="C" i="4874" b="1" n="1">! Return value</line>
        <line t="X" i="4875" b="1" n="1">  integer :: res</line>
        <line t="X" i="4876" b="1" n="1"></line>
        <line t="C" i="4877" b="1" n="1">! Set the return value</line>
        <line t="X" i="4878" b="1" n="1">  res = ut%passed_assertions</line>
        <line t="X" i="4879" b="1" n="1"></line>
        <line t="EF" i="4880" b="1" n="1">end function xfunit_unit_get_passed_assertions</line>
        <line t="EF" i="4881" b="1" n="1"></line>
        <line t="EF" i="4882" b="1" n="1"></line>
        <line t="C" i="4883" b="1" n="1">! Getter for the count of failed assertions</line>
        <line k="xfunit_unit_get_failed_assertions" t="F" i="4884" b="1" n="1">elemental function xfunit_unit_get_failed_assertions( ut ) result(res)</line>
        <line t="F" i="4885" b="1" n="1"></line>
        <line t="C" i="4886" b="1" n="1">! Calling object</line>
        <line t="X" i="4887" b="1" n="1">  class(t_xfunit_unit), intent(in) :: ut</line>
        <line t="X" i="4888" b="1" n="1"></line>
        <line t="C" i="4889" b="1" n="1">! Return value</line>
        <line t="X" i="4890" b="1" n="1">  integer :: res</line>
        <line t="X" i="4891" b="1" n="1"></line>
        <line t="C" i="4892" b="1" n="1">! Set the return value</line>
        <line t="X" i="4893" b="1" n="1">  res = ut%failed_assertions</line>
        <line t="X" i="4894" b="1" n="1"></line>
        <line t="EF" i="4895" b="1" n="1">end function xfunit_unit_get_failed_assertions</line>
        <line t="EF" i="4896" b="1" n="1"></line>
        <line t="EF" i="4897" b="1" n="1"></line>
        <line t="C" i="4898" b="1" n="1">! Getter for the total count of assertions</line>
        <line k="xfunit_unit_get_total_assertions" t="F" i="4899" b="1" n="1">elemental function xfunit_unit_get_total_assertions( ut ) result(res)</line>
        <line t="F" i="4900" b="1" n="1"></line>
        <line t="C" i="4901" b="1" n="1">! Calling object</line>
        <line t="X" i="4902" b="1" n="1">  class(t_xfunit_unit), intent(in) :: ut</line>
        <line t="X" i="4903" b="1" n="1"></line>
        <line t="C" i="4904" b="1" n="1">! Return value</line>
        <line t="X" i="4905" b="1" n="1">  integer :: res</line>
        <line t="X" i="4906" b="1" n="1"></line>
        <line t="C" i="4907" b="1" n="1">! Set the return value</line>
        <line t="X" i="4908" b="1" n="1">  res = ut%passed_assertions + ut%failed_assertions</line>
        <line t="X" i="4909" b="1" n="1"></line>
        <line t="EF" i="4910" b="1" n="1">end function xfunit_unit_get_total_assertions</line>
        <line t="EF" i="4911" b="1" n="1"></line>
        <line t="EF" i="4912" b="1" n="1"></line>
        <line t="C" i="4913" b="1" n="1">! Getter for the error message</line>
        <line k="xfunit_unit_get_msg_ptr" t="F" i="4914" b="1" n="1">function xfunit_unit_get_msg_ptr( ut ) result(res)</line>
        <line t="F" i="4915" b="1" n="1"></line>
        <line t="C" i="4916" b="1" n="1">! Calling object</line>
        <line t="X" i="4917" b="1" n="1">  class(t_xfunit_unit), target, intent(in) :: ut</line>
        <line t="X" i="4918" b="1" n="1"></line>
        <line t="C" i="4919" b="1" n="1">! Return value</line>
        <line t="X" i="4920" b="1" n="1">  type(t_messages), pointer :: res</line>
        <line t="X" i="4921" b="1" n="1"></line>
        <line t="C" i="4922" b="1" n="1">! Set the return value</line>
        <line t="X" i="4923" b="1" n="1">  res =&gt; ut%msg</line>
        <line t="X" i="4924" b="1" n="1"></line>
        <line t="EF" i="4925" b="1" n="1">end function xfunit_unit_get_msg_ptr</line>
        <line t="EF" i="4926" b="1" n="1"></line>
        <line t="EF" i="4927" b="1" n="1"></line>
        <line t="C" i="4928" b="1" n="1">! Get the test execution elapsed time</line>
        <line k="xfunit_unit_get_elapsed" t="F" i="4929" b="1" n="1">elemental function xfunit_unit_get_elapsed( this ) result(res)</line>
        <line t="F" i="4930" b="1" n="1"></line>
        <line t="C" i="4931" b="1" n="1">! Calling object</line>
        <line t="X" i="4932" b="1" n="1">  class(t_xfunit_unit), intent(in) :: this</line>
        <line t="X" i="4933" b="1" n="1"></line>
        <line t="C" i="4934" b="1" n="1">! Elapsed time</line>
        <line t="X" i="4935" b="1" n="1">  real(kind=8) :: res</line>
        <line t="X" i="4936" b="1" n="1"></line>
        <line t="C" i="4937" b="1" n="1">! Compute elapsed time</line>
        <line t="X" i="4938" b="1" n="1">  res = this%time1 - this%time0</line>
        <line t="X" i="4939" b="1" n="1"></line>
        <line t="EF" i="4940" b="1" n="1">end function xfunit_unit_get_elapsed</line>
        <line t="EF" i="4941" b="1" n="1"></line>
        <line t="EF" i="4942" b="1" n="1"></line>
        <line t="C" i="4943" b="1" n="1">! Get skip flag</line>
        <line k="xfunit_unit_get_skip" t="F" i="4944" b="1" n="1">elemental function xfunit_unit_get_skip( ut ) result(res)</line>
        <line t="F" i="4945" b="1" n="1"></line>
        <line t="C" i="4946" b="1" n="1">! The unit test case</line>
        <line t="X" i="4947" b="1" n="1">  class(t_xfunit_unit), intent(in) :: ut</line>
        <line t="X" i="4948" b="1" n="1"></line>
        <line t="C" i="4949" b="1" n="1">! The skip flag</line>
        <line t="X" i="4950" b="1" n="1">  logical :: res</line>
        <line t="X" i="4951" b="1" n="1"></line>
        <line t="C" i="4952" b="1" n="1">! Compute the result</line>
        <line t="X" i="4953" b="1" n="1">  res = ut%skip</line>
        <line t="X" i="4954" b="1" n="1"></line>
        <line t="EF" i="4955" b="1" n="1">end function xfunit_unit_get_skip</line>
        <line t="EF" i="4956" b="1" n="1"></line>
        <line t="EF" i="4957" b="1" n="1"></line>
        <line t="C" i="4958" b="1" n="1">! Set skip flag</line>
        <line k="xfunit_unit_set_skip" t="S" i="4959" b="1" n="1">elemental subroutine xfunit_unit_set_skip( ut, value ) </line>
        <line t="S" i="4960" b="1" n="1"></line>
        <line t="C" i="4961" b="1" n="1">! The unit test case</line>
        <line t="X" i="4962" b="1" n="1">  class(t_xfunit_unit), intent(inout) :: ut</line>
        <line t="X" i="4963" b="1" n="1"></line>
        <line t="C" i="4964" b="1" n="1">! The skip flag</line>
        <line t="X" i="4965" b="1" n="1">  logical, intent(in) :: value</line>
        <line t="X" i="4966" b="1" n="1"></line>
        <line t="C" i="4967" b="1" n="1">! Compute the result</line>
        <line t="X" i="4968" b="1" n="1">  ut%skip = value</line>
        <line t="X" i="4969" b="1" n="1"></line>
        <line t="ES" i="4970" b="1" n="1">end subroutine xfunit_unit_set_skip</line>
        <line t="ES" i="4971" b="1" n="1"></line>
        <line t="ES" i="4972" b="1" n="1"></line>
        <line t="M" i="4973" b="1" n="1">end module m_xfunit_unit</line>
        <line t="M" i="4974" b="1" n="1"></line>
    </code>
</fmx>