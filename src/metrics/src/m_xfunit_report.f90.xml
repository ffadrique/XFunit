<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_xfunit_report.f90">
    <context>
        <time>2025-03-09T17:50:33</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>XFunit</project>
        <name>m_xfunit_report.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_xfunit_report" type="module">
            <main>
                <lines>
                    <source percent="27.14">19</source>
                    <comments percent="44.29">31</comments>
                    <empty percent="28.57">20</empty>
                    <total>70</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="xfunit_report_default" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">3</source>
                            <comments percent="22.22">2</comments>
                            <empty percent="44.44">4</empty>
                            <total>9</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_report_write" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="38.10">16</source>
                            <comments percent="26.19">11</comments>
                            <empty percent="35.71">15</empty>
                            <total>42</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_report_write_xml" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="38.46">15</source>
                            <comments percent="25.64">10</comments>
                            <empty percent="35.90">14</empty>
                            <total>39</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="33.13">53</source>
                    <comments percent="33.75">54</comments>
                    <empty percent="33.13">53</empty>
                    <total>160</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>4</maximum>
                    <average>2.67</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>4</maximum>
                    <average>2.67</average>
                </nesting>
                <methods>3</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="33.13">53</source>
            <comments percent="33.75">54</comments>
            <empty percent="33.13">53</empty>
            <total>160</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>4</maximum>
            <average>2.67</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>4</maximum>
            <average>2.67</average>
        </nesting>
        <methods>3</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_xfunit_report</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2025, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : Unit tests reports (detailed report added to JUnit compliant report)</line>
        <line t="C" i="9" b="0" n="0">! License   : This file is part of XFunit.</line>
        <line t="C" i="10" b="0" n="0">!</line>
        <line t="C" i="11" b="0" n="0">!             XFunit is free software: you can redistribute it and/or modify</line>
        <line t="C" i="12" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="13" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="14" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="15" b="0" n="0">!</line>
        <line t="C" i="16" b="0" n="0">!             XFunit is distributed in the hope that it will be useful,</line>
        <line t="C" i="17" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="18" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="19" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="20" b="0" n="0">!</line>
        <line t="C" i="21" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="22" b="0" n="0">!             License along with XFunit.  </line>
        <line t="C" i="23" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="24" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="25" b="0" n="0"></line>
        <line t="C" i="26" b="0" n="0">!---USE statements--------------------------------------------------------------</line>
        <line t="C" i="27" b="0" n="0"></line>
        <line t="X" i="28" b="0" n="0">  use m_xfunit_assertion_list_ftl</line>
        <line t="X" i="29" b="0" n="0"></line>
        <line t="X" i="30" b="0" n="0">  use m_xml</line>
        <line t="X" i="31" b="0" n="0"></line>
        <line t="X" i="32" b="0" n="0">  use m_xfunit_assertion</line>
        <line t="X" i="33" b="0" n="0"></line>
        <line t="C" i="34" b="0" n="0">!---End of use statements-------------------------------------------------------</line>
        <line t="C" i="35" b="0" n="0"></line>
        <line t="X" i="36" b="0" n="0">  implicit none</line>
        <line t="X" i="37" b="0" n="0"></line>
        <line t="C" i="38" b="0" n="0">!---Public/Private declarations-------------------------------------------------</line>
        <line t="C" i="39" b="0" n="0"></line>
        <line t="X" i="40" b="0" n="0">  private</line>
        <line t="X" i="41" b="0" n="0"></line>
        <line t="X" i="42" b="0" n="0">  public t_xfunit_report</line>
        <line t="X" i="43" b="0" n="0"></line>
        <line t="X" i="44" b="0" n="0">  public xfunit_report</line>
        <line t="X" i="45" b="0" n="0"></line>
        <line t="C" i="46" b="0" n="0">!---End of public/private declarations------------------------------------------</line>
        <line t="C" i="47" b="0" n="0"></line>
        <line t="C" i="48" b="0" n="0">!---Declaration of module variables---------------------------------------------</line>
        <line t="C" i="49" b="0" n="0"></line>
        <line t="C" i="50" b="0" n="0">! The unit test case detailed report type</line>
        <line t="T" i="51" b="0" n="0">  type, extends(t_xfunit_assertion_list_ftl) :: t_xfunit_report</line>
        <line t="X" i="52" b="0" n="0">    private</line>
        <line t="X" i="53" b="0" n="0"></line>
        <line t="X" i="54" b="0" n="0">    contains</line>
        <line t="X" i="55" b="0" n="0"></line>
        <line t="C" i="56" b="0" n="0">!     Serialization interfaces</line>
        <line t="X" i="57" b="0" n="0">      procedure :: write_xml =&gt; xfunit_report_write_xml</line>
        <line t="X" i="58" b="0" n="0">      procedure :: write =&gt; xfunit_report_write</line>
        <line t="X" i="59" b="0" n="0"></line>
        <line t="T" i="60" b="0" n="0">  end type t_xfunit_report</line>
        <line t="T" i="61" b="0" n="0"></line>
        <line t="C" i="62" b="0" n="0">! Constructor interface</line>
        <line t="X" i="63" b="0" n="0">  interface xfunit_report</line>
        <line t="X" i="64" b="0" n="0">    module procedure xfunit_report_default</line>
        <line t="X" i="65" b="0" n="0">  end interface xfunit_report</line>
        <line t="X" i="66" b="0" n="0"></line>
        <line t="C" i="67" b="0" n="0">!---End of declaration of module variables--------------------------------------</line>
        <line t="C" i="68" b="0" n="0"></line>
        <line t="X" i="69" b="0" n="0">contains</line>
        <line t="X" i="70" b="0" n="0"></line>
        <line t="C" i="71" b="0" n="0">! Constructor</line>
        <line k="xfunit_report_default" t="F" i="72" b="1" n="1">function  xfunit_report_default() result(res)</line>
        <line t="F" i="73" b="1" n="1"></line>
        <line t="C" i="74" b="1" n="1">! The unit test case report</line>
        <line t="X" i="75" b="1" n="1">  type(t_xfunit_report) :: res</line>
        <line t="X" i="76" b="1" n="1"></line>
        <line t="X" i="77" b="1" n="1"></line>
        <line t="EF" i="78" b="1" n="1">end function xfunit_report_default</line>
        <line t="EF" i="79" b="1" n="1"></line>
        <line t="EF" i="80" b="1" n="1"></line>
        <line t="C" i="81" b="1" n="1">! Generate the report dump</line>
        <line k="xfunit_report_write" t="S" i="82" b="1" n="1">subroutine xfunit_report_write( this, unit, fail_only )</line>
        <line t="S" i="83" b="1" n="1"></line>
        <line t="C" i="84" b="1" n="1">! The unit test report</line>
        <line t="X" i="85" b="1" n="1">  class(t_xfunit_report), intent(in) :: this</line>
        <line t="X" i="86" b="1" n="1"></line>
        <line t="C" i="87" b="1" n="1">! The open fortran unit to write to</line>
        <line t="X" i="88" b="1" n="1">  integer, intent(in) :: unit</line>
        <line t="X" i="89" b="1" n="1"></line>
        <line t="C" i="90" b="1" n="1">! The flag to output failed assertions only</line>
        <line t="X" i="91" b="1" n="1">  logical, intent(in) :: fail_only</line>
        <line t="X" i="92" b="1" n="1"></line>
        <line t="C" i="93" b="1" n="1">! Local variables</line>
        <line t="X" i="94" b="1" n="1">  type(t_xfunit_assertion_list_ftl_iterator) :: it</line>
        <line t="X" i="95" b="1" n="1">  class(t_xfunit_assertion), allocatable :: assertion</line>
        <line t="X" i="96" b="1" n="1"></line>
        <line t="C" i="97" b="1" n="1">! Loop on the assertions</line>
        <line t="X" i="98" b="1" n="1">  it = this%begin()</line>
        <line t="X" i="99" b="2" n="2">  do while( it%associated() )</line>
        <line t="X" i="100" b="2" n="2"></line>
        <line t="C" i="101" b="2" n="2">!   Check allocations. This is a gfortran limitation</line>
        <line t="X" i="102" b="3" n="3">    if( allocated(assertion) ) deallocate(assertion)</line>
        <line t="X" i="103" b="3" n="3"></line>
        <line t="C" i="104" b="3" n="3">!   Get the assertion</line>
        <line t="X" i="105" b="3" n="3">    allocate( assertion, source=it%get_element() )</line>
        <line t="X" i="106" b="3" n="3"></line>
        <line t="C" i="107" b="3" n="3">!   Check if the assertion is to be reported</line>
        <line t="X" i="108" b="4" n="4">    if( .not. fail_only .or. ( fail_only .and. .not. assertion%is_passed() ) ) then</line>
        <line t="X" i="109" b="4" n="4"></line>
        <line t="C" i="110" b="4" n="4">!     Write the assertion record</line>
        <line t="X" i="111" b="4" n="4">      call assertion%write( unit )</line>
        <line t="X" i="112" b="4" n="4"></line>
        <line t="X" i="113" b="4" n="3">    end if</line>
        <line t="X" i="114" b="4" n="3"></line>
        <line t="C" i="115" b="4" n="3">!   Iterate</line>
        <line t="X" i="116" b="4" n="3">    it = it%next()</line>
        <line t="X" i="117" b="4" n="3"></line>
        <line t="X" i="118" b="4" n="2">  end do</line>
        <line t="X" i="119" b="4" n="2"></line>
        <line t="ES" i="120" b="4" n="2">end subroutine xfunit_report_write</line>
        <line t="ES" i="121" b="1" n="2"></line>
        <line t="ES" i="122" b="1" n="2"></line>
        <line t="C" i="123" b="1" n="2">! Generate the report in XML format</line>
        <line k="xfunit_report_write_xml" t="S" i="124" b="1" n="1">subroutine xfunit_report_write_xml( this, xml, fail_only )</line>
        <line t="S" i="125" b="1" n="1"></line>
        <line t="C" i="126" b="1" n="1">! The unit test report</line>
        <line t="X" i="127" b="1" n="1">  class(t_xfunit_report), intent(in) :: this</line>
        <line t="X" i="128" b="1" n="1"></line>
        <line t="C" i="129" b="1" n="1">! The XML context structure</line>
        <line t="X" i="130" b="1" n="1">  type(t_xml_writer), intent(inout) :: xml</line>
        <line t="X" i="131" b="1" n="1"></line>
        <line t="C" i="132" b="1" n="1">! The flag to output failed assertions only</line>
        <line t="X" i="133" b="1" n="1">  logical, intent(in) :: fail_only</line>
        <line t="X" i="134" b="1" n="1"></line>
        <line t="C" i="135" b="1" n="1">! Local variables</line>
        <line t="X" i="136" b="1" n="1">  type(t_xfunit_assertion_list_ftl_iterator) :: it</line>
        <line t="X" i="137" b="1" n="1">  class(t_xfunit_assertion), pointer :: assertion</line>
        <line t="X" i="138" b="1" n="1"></line>
        <line t="C" i="139" b="1" n="1">! Loop on the assertions</line>
        <line t="X" i="140" b="1" n="1">  it = this%begin()</line>
        <line t="X" i="141" b="2" n="2">  do while( it%associated() )</line>
        <line t="X" i="142" b="2" n="2"></line>
        <line t="C" i="143" b="2" n="2">!   Get the assertion</line>
        <line t="X" i="144" b="2" n="2">    assertion =&gt; it%get_element_ptr()</line>
        <line t="X" i="145" b="2" n="2"></line>
        <line t="C" i="146" b="2" n="2">!   Check if the assertion is to be reported</line>
        <line t="X" i="147" b="3" n="3">    if( .not. fail_only .or. ( fail_only .and. .not. assertion%is_passed() ) ) then</line>
        <line t="X" i="148" b="3" n="3"></line>
        <line t="C" i="149" b="3" n="3">!     Write the assertion record</line>
        <line t="X" i="150" b="3" n="3">      call assertion%write_xml( xml )</line>
        <line t="X" i="151" b="3" n="3"></line>
        <line t="X" i="152" b="3" n="2">    end if</line>
        <line t="X" i="153" b="3" n="2"></line>
        <line t="C" i="154" b="3" n="2">!   Iterate</line>
        <line t="X" i="155" b="3" n="2">    it = it%next()</line>
        <line t="X" i="156" b="3" n="2"></line>
        <line t="X" i="157" b="3" n="1">  end do</line>
        <line t="X" i="158" b="3" n="1"></line>
        <line t="ES" i="159" b="3" n="1">end subroutine xfunit_report_write_xml</line>
        <line t="ES" i="160" b="1" n="1"></line>
        <line t="M" i="161" b="1" n="1">end module m_xfunit_report</line>
    </code>
</fmx>