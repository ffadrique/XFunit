<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_xfunit_manager.f90">
    <context>
        <time>2025-03-09T10:37:48</time>
        <version>1.0.0.1</version>
        <path>.</path>
        <path_to_root>../</path_to_root>
        <project>XFunit</project>
        <name>m_xfunit_manager.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_xfunit_manager" type="module">
            <main>
                <lines>
                    <source percent="34.85">46</source>
                    <comments percent="36.36">48</comments>
                    <empty percent="28.79">38</empty>
                    <total>132</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="xfunit_manager" type="function">
                    <statistics>
                        <lines>
                            <source percent="59.05">62</source>
                            <comments percent="20.00">21</comments>
                            <empty percent="20.95">22</empty>
                            <total>105</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>19</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_assignment" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="64.29">18</source>
                            <comments percent="14.29">4</comments>
                            <empty percent="21.43">6</empty>
                            <total>28</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_dump_error" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_eclipse" type="function">
                    <statistics>
                        <lines>
                            <source percent="34.43">21</source>
                            <comments percent="36.07">22</comments>
                            <empty percent="29.51">18</empty>
                            <total>61</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_execute_suite" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="46.15">18</source>
                            <comments percent="23.08">9</comments>
                            <empty percent="30.77">12</empty>
                            <total>39</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_is_error" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_jxml" type="function">
                    <statistics>
                        <lines>
                            <source percent="34.43">21</source>
                            <comments percent="36.07">22</comments>
                            <empty percent="29.51">18</empty>
                            <total>61</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_process_command_line" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="51.43">18</source>
                            <comments percent="20.00">7</comments>
                            <empty percent="28.57">10</empty>
                            <total>35</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_unit_data_dir_get" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_unit_jxml_dir_get" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_unit_jxml_file_get" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_unit_ref_dir_get" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_unit_root_dir_get" type="function">
                    <statistics>
                        <lines>
                            <source percent="29.41">5</source>
                            <comments percent="29.41">5</comments>
                            <empty percent="41.18">7</empty>
                            <total>17</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_unit_test_filter_get" type="function">
                    <statistics>
                        <lines>
                            <source percent="39.39">13</source>
                            <comments percent="24.24">8</comments>
                            <empty percent="36.36">12</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_manager_write_xml_suite" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="48.94">23</source>
                            <comments percent="21.28">10</comments>
                            <empty percent="29.79">14</empty>
                            <total>47</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="42.40">276</source>
                    <comments percent="27.80">181</comments>
                    <empty percent="29.80">194</empty>
                    <total>651</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>19</maximum>
                    <average>3.20</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>3</maximum>
                    <average>1.67</average>
                </nesting>
                <methods>15</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="42.40">276</source>
            <comments percent="27.80">181</comments>
            <empty percent="29.80">194</empty>
            <total>651</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>19</maximum>
            <average>3.20</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>3</maximum>
            <average>1.67</average>
        </nesting>
        <methods>15</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_xfunit_manager</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2025, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : Management of the unit test execution</line>
        <line t="C" i="9" b="0" n="0">!</line>
        <line t="C" i="10" b="0" n="0">! License   : This file is part of XFunit.</line>
        <line t="C" i="11" b="0" n="0">!</line>
        <line t="C" i="12" b="0" n="0">!             XFunit is free software: you can redistribute it and/or modify</line>
        <line t="C" i="13" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="14" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="15" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="16" b="0" n="0">!</line>
        <line t="C" i="17" b="0" n="0">!             XFunit is distributed in the hope that it will be useful,</line>
        <line t="C" i="18" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="19" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="20" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="21" b="0" n="0">!</line>
        <line t="C" i="22" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="23" b="0" n="0">!             License along with XFunit.  </line>
        <line t="C" i="24" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="25" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="26" b="0" n="0"></line>
        <line t="C" i="27" b="0" n="0">!---USE statements--------------------------------------------------------------</line>
        <line t="C" i="28" b="0" n="0"></line>
        <line t="X" i="29" b="0" n="0">  use, intrinsic :: iso_fortran_env</line>
        <line t="X" i="30" b="0" n="0"></line>
        <line t="X" i="31" b="0" n="0">  use m_object</line>
        <line t="X" i="32" b="0" n="0">  use m_string</line>
        <line t="X" i="33" b="0" n="0">  use m_util_convert</line>
        <line t="X" i="34" b="0" n="0">  use m_messages</line>
        <line t="X" i="35" b="0" n="0">  use m_file_handler</line>
        <line t="X" i="36" b="0" n="0">  use m_path</line>
        <line t="X" i="37" b="0" n="0"></line>
        <line t="X" i="38" b="0" n="0">  use m_xml</line>
        <line t="X" i="39" b="0" n="0"></line>
        <line t="X" i="40" b="0" n="0">  use m_xfunit_unit</line>
        <line t="X" i="41" b="0" n="0">  use m_xfunit_suite</line>
        <line t="X" i="42" b="0" n="0"></line>
        <line t="C" i="43" b="0" n="0">!---End of use statements-------------------------------------------------------</line>
        <line t="C" i="44" b="0" n="0"></line>
        <line t="X" i="45" b="0" n="0">  implicit none</line>
        <line t="X" i="46" b="0" n="0"></line>
        <line t="C" i="47" b="0" n="0">!---Public/Private declarations-------------------------------------------------</line>
        <line t="C" i="48" b="0" n="0"></line>
        <line t="X" i="49" b="0" n="0">  private</line>
        <line t="X" i="50" b="0" n="0"></line>
        <line t="X" i="51" b="0" n="0">  public t_xfunit_manager</line>
        <line t="X" i="52" b="0" n="0"></line>
        <line t="X" i="53" b="0" n="0">  public xfunit_manager, xfunit_manager_jxml, xfunit_manager_eclipse</line>
        <line t="X" i="54" b="0" n="0"></line>
        <line t="C" i="55" b="0" n="0">!---End of public/private declarations------------------------------------------</line>
        <line t="C" i="56" b="0" n="0"></line>
        <line t="C" i="57" b="0" n="0">!---Declaration of module variables---------------------------------------------</line>
        <line t="C" i="58" b="0" n="0"></line>
        <line t="C" i="59" b="0" n="0">! The unit test manager type</line>
        <line t="T" i="60" b="0" n="0">  type, extends(t_object) :: t_xfunit_manager</line>
        <line t="X" i="61" b="0" n="0">    private</line>
        <line t="X" i="62" b="0" n="0"></line>
        <line t="C" i="63" b="0" n="0">!     File handler for report generation</line>
        <line t="X" i="64" b="0" n="0">      type(t_file_handler) :: handler</line>
        <line t="X" i="65" b="0" n="0"></line>
        <line t="C" i="66" b="0" n="0">!     Root directory where output is organised</line>
        <line t="X" i="67" b="0" n="0">      type(t_string) :: xfunit_root_dir</line>
        <line t="X" i="68" b="0" n="0"></line>
        <line t="C" i="69" b="0" n="0">!     Directory where unit test data is stored</line>
        <line t="X" i="70" b="0" n="0">      type(t_string) :: unit_data_dir</line>
        <line t="X" i="71" b="0" n="0"></line>
        <line t="C" i="72" b="0" n="0">!     Directory where reference files (for comparison) are stored</line>
        <line t="X" i="73" b="0" n="0">      type(t_string) :: unit_ref_dir</line>
        <line t="X" i="74" b="0" n="0"></line>
        <line t="C" i="75" b="0" n="0">!     Directory where the unit test reports (.jxml files) are stored</line>
        <line t="X" i="76" b="0" n="0">      type(t_string) :: unit_jxml_dir</line>
        <line t="X" i="77" b="0" n="0"></line>
        <line t="C" i="78" b="0" n="0">!     Junit XML file</line>
        <line t="X" i="79" b="0" n="0">      type(t_string) :: unit_jxml_file</line>
        <line t="X" i="80" b="0" n="0"></line>
        <line t="C" i="81" b="0" n="0">!     Filter to select the unit tests to run</line>
        <line t="X" i="82" b="0" n="0">      type(t_string), dimension(:), allocatable :: unit_test_filter</line>
        <line t="X" i="83" b="0" n="0"></line>
        <line t="C" i="84" b="0" n="0">!     Flag to generate output reports (.jxml) strictly compliant with Junit.xsd</line>
        <line t="X" i="85" b="0" n="0">      logical :: junit_strict = .false.</line>
        <line t="X" i="86" b="0" n="0"></line>
        <line t="C" i="87" b="0" n="0">!     Report on failures only (not implemented yet)</line>
        <line t="X" i="88" b="0" n="0">      logical :: fail_only = .false.</line>
        <line t="X" i="89" b="0" n="0"></line>
        <line t="C" i="90" b="0" n="0">!     Error message stack</line>
        <line t="X" i="91" b="0" n="0">      type(t_messages) :: msg</line>
        <line t="X" i="92" b="0" n="0"></line>
        <line t="C" i="93" b="0" n="0">!     Temporary file for stdout capture</line>
        <line t="X" i="94" b="0" n="0">      type(t_file_handler) :: stdout</line>
        <line t="X" i="95" b="0" n="0"></line>
        <line t="C" i="96" b="0" n="0">!     Temporary file for stderr capture</line>
        <line t="X" i="97" b="0" n="0">      type(t_file_handler) :: stderr</line>
        <line t="X" i="98" b="0" n="0"></line>
        <line t="X" i="99" b="0" n="0">    contains</line>
        <line t="X" i="100" b="0" n="0"></line>
        <line t="C" i="101" b="0" n="0">!     Getters</line>
        <line t="X" i="102" b="0" n="0">      procedure :: get_unit_root_dir =&gt; xfunit_manager_unit_root_dir_get</line>
        <line t="X" i="103" b="0" n="0">      procedure :: get_unit_data_dir =&gt; xfunit_manager_unit_data_dir_get</line>
        <line t="X" i="104" b="0" n="0">      procedure :: get_unit_ref_dir  =&gt; xfunit_manager_unit_ref_dir_get</line>
        <line t="X" i="105" b="0" n="0">      procedure :: get_unit_jxml_dir =&gt; xfunit_manager_unit_jxml_dir_get</line>
        <line t="X" i="106" b="0" n="0">      procedure :: get_unit_jxml_file =&gt; xfunit_manager_unit_jxml_file_get</line>
        <line t="X" i="107" b="0" n="0">      procedure :: get_unit_test_filter =&gt; xfunit_manager_unit_test_filter_get</line>
        <line t="X" i="108" b="0" n="0"></line>
        <line t="C" i="109" b="0" n="0">!     Process the command line</line>
        <line t="X" i="110" b="0" n="0">      procedure, private :: xfunit_manager_process_command_line</line>
        <line t="X" i="111" b="0" n="0"></line>
        <line t="C" i="112" b="0" n="0">!     Assignment</line>
        <line t="X" i="113" b="0" n="0">      generic :: assignment(=) =&gt; xfunit_manager_assignment</line>
        <line t="X" i="114" b="0" n="0">      procedure, private :: xfunit_manager_assignment</line>
        <line t="X" i="115" b="0" n="0"></line>
        <line t="C" i="116" b="0" n="0">!     Execute the suiteof test</line>
        <line t="X" i="117" b="0" n="0">      procedure :: execute =&gt; xfunit_manager_execute_suite</line>
        <line t="X" i="118" b="0" n="0"></line>
        <line t="C" i="119" b="0" n="0">!     Serialization in XML</line>
        <line t="X" i="120" b="0" n="0">      procedure :: write_xml =&gt; xfunit_manager_write_xml_suite</line>
        <line t="X" i="121" b="0" n="0"></line>
        <line t="C" i="122" b="0" n="0">!     Error handling</line>
        <line t="X" i="123" b="0" n="0">      procedure :: is_error =&gt; xfunit_manager_is_error</line>
        <line t="X" i="124" b="0" n="0">      procedure :: dump_error =&gt; xfunit_manager_dump_error</line>
        <line t="X" i="125" b="0" n="0"></line>
        <line t="T" i="126" b="0" n="0">  end type t_xfunit_manager</line>
        <line t="T" i="127" b="0" n="0"></line>
        <line t="C" i="128" b="0" n="0">!---End of declaration of module variables--------------------------------------</line>
        <line t="C" i="129" b="0" n="0"></line>
        <line t="X" i="130" b="0" n="0">contains</line>
        <line t="X" i="131" b="0" n="0"></line>
        <line t="C" i="132" b="0" n="0">! Constructor (generic)</line>
        <line k="xfunit_manager" t="F" i="133" b="1" n="1">function xfunit_manager( fname, &amp;</line>
        <line t="X" i="134" b="1" n="1">                         xfunit_root_dir, &amp;</line>
        <line t="X" i="135" b="1" n="1">                         unit_data_dir, unit_ref_dir, unit_jxml_dir, &amp;</line>
        <line t="X" i="136" b="1" n="1">                         junit_strict, fail_only, free_out, free_err ) result(res)</line>
        <line t="X" i="137" b="1" n="1"></line>
        <line t="C" i="138" b="1" n="1">! The output file name (default to module.jxml or module.junit.xml)</line>
        <line t="X" i="139" b="1" n="1">  character(len=*), intent(in) :: fname</line>
        <line t="X" i="140" b="1" n="1"></line>
        <line t="C" i="141" b="1" n="1">! The path to the root directory where the tests are implemented (default to .)</line>
        <line t="X" i="142" b="1" n="1">  character(len=*), optional, intent(in) :: xfunit_root_dir</line>
        <line t="X" i="143" b="1" n="1"></line>
        <line t="C" i="144" b="1" n="1">! The path to the unit data (default to xfunit_root_dir)</line>
        <line t="X" i="145" b="1" n="1">  character(len=*), optional, intent(in) :: unit_data_dir</line>
        <line t="X" i="146" b="1" n="1"></line>
        <line t="C" i="147" b="1" n="1">! The path to the unit test reference (default to xfunit_root_dir)</line>
        <line t="X" i="148" b="1" n="1">  character(len=*), optional, intent(in) :: unit_ref_dir</line>
        <line t="X" i="149" b="1" n="1"></line>
        <line t="C" i="150" b="1" n="1">! The path to the unit test jxml (default to xfunit_root_dir)</line>
        <line t="X" i="151" b="1" n="1">  character(len=*), optional, intent(in) :: unit_jxml_dir</line>
        <line t="X" i="152" b="1" n="1"></line>
        <line t="C" i="153" b="1" n="1">! The flag for strict JUnit generation report</line>
        <line t="X" i="154" b="1" n="1">  logical, optional, intent(in) :: junit_strict</line>
        <line t="X" i="155" b="1" n="1"></line>
        <line t="C" i="156" b="1" n="1">! The flag for report only the failures</line>
        <line t="X" i="157" b="1" n="1">  logical, optional, intent(in) :: fail_only</line>
        <line t="X" i="158" b="1" n="1"></line>
        <line t="C" i="159" b="1" n="1">! The flag to not capture the standard output for the jxml report</line>
        <line t="X" i="160" b="1" n="1">  logical, optional, intent(in) :: free_out</line>
        <line t="X" i="161" b="1" n="1"></line>
        <line t="C" i="162" b="1" n="1">! The flag to not capture the standard error for the jxml report</line>
        <line t="X" i="163" b="1" n="1">  logical, optional, intent(in) :: free_err</line>
        <line t="X" i="164" b="1" n="1"></line>
        <line t="C" i="165" b="1" n="1">! The test manager</line>
        <line t="X" i="166" b="1" n="1">  type(t_xfunit_manager) :: res</line>
        <line t="X" i="167" b="1" n="1"></line>
        <line t="C" i="168" b="1" n="1">! Set the reference directory (force unix representation)</line>
        <line t="X" i="169" b="2" n="2">  if( present(xfunit_root_dir) ) then</line>
        <line t="X" i="170" b="2" n="2">    res%xfunit_root_dir = string( trim(xfunit_root_dir) )</line>
        <line t="X" i="171" b="3" n="2">  else</line>
        <line t="X" i="172" b="3" n="2">    res%xfunit_root_dir = string( '.' )</line>
        <line t="X" i="173" b="3" n="1">  end if</line>
        <line t="X" i="174" b="3" n="1"></line>
        <line t="C" i="175" b="3" n="1">! Set unit data directory</line>
        <line t="X" i="176" b="4" n="2">  if( present(unit_data_dir) ) then</line>
        <line t="X" i="177" b="4" n="2">    res%unit_data_dir = unit_data_dir</line>
        <line t="X" i="178" b="5" n="2">  else</line>
        <line t="X" i="179" b="5" n="2">    res%unit_data_dir = res%xfunit_root_dir</line>
        <line t="X" i="180" b="5" n="1">  end if</line>
        <line t="X" i="181" b="5" n="1"></line>
        <line t="C" i="182" b="5" n="1">! Set the unit test reference directory</line>
        <line t="X" i="183" b="6" n="2">  if( present(unit_ref_dir) ) then</line>
        <line t="X" i="184" b="6" n="2">    res%unit_ref_dir = unit_ref_dir</line>
        <line t="X" i="185" b="7" n="2">  else</line>
        <line t="X" i="186" b="7" n="2">    res%unit_ref_dir = res%xfunit_root_dir</line>
        <line t="X" i="187" b="7" n="1">  end if</line>
        <line t="X" i="188" b="7" n="1"></line>
        <line t="C" i="189" b="7" n="1">! Set the unit test reference directory</line>
        <line t="X" i="190" b="8" n="2">  if( present(unit_jxml_dir) ) then</line>
        <line t="X" i="191" b="8" n="2">    res%unit_jxml_dir = unit_jxml_dir</line>
        <line t="X" i="192" b="9" n="2">  else</line>
        <line t="X" i="193" b="9" n="2">    res%unit_jxml_dir = res%xfunit_root_dir</line>
        <line t="X" i="194" b="9" n="1">  end if</line>
        <line t="X" i="195" b="9" n="1"></line>
        <line t="C" i="196" b="9" n="1">! Store the flag for JUnit strict report</line>
        <line t="X" i="197" b="10" n="2">  if( present(junit_strict) ) then</line>
        <line t="X" i="198" b="10" n="2">    res%junit_strict = junit_strict</line>
        <line t="X" i="199" b="11" n="2">  else</line>
        <line t="X" i="200" b="11" n="2">    res%junit_strict = .false.</line>
        <line t="X" i="201" b="11" n="1">  end if</line>
        <line t="X" i="202" b="11" n="1"></line>
        <line t="C" i="203" b="11" n="1">! Store the flag for reporting failures only</line>
        <line t="X" i="204" b="12" n="2">  if( present(fail_only) ) then</line>
        <line t="X" i="205" b="12" n="2">    res%fail_only = fail_only</line>
        <line t="X" i="206" b="13" n="2">  else</line>
        <line t="X" i="207" b="13" n="2">    res%fail_only = .false.</line>
        <line t="X" i="208" b="13" n="1">  end if</line>
        <line t="X" i="209" b="13" n="1"></line>
        <line t="C" i="210" b="13" n="1">! Process the command line to allow using it for test execution filtering</line>
        <line t="X" i="211" b="13" n="1">  call res%xfunit_manager_process_command_line()</line>
        <line t="X" i="212" b="13" n="1"></line>
        <line t="C" i="213" b="13" n="1">! Initialise handler</line>
        <line t="X" i="214" b="13" n="1">  res%unit_jxml_file = trim(fname)</line>
        <line t="X" i="215" b="13" n="1">  res%handler = file_handler( res%unit_jxml_file )</line>
        <line t="X" i="216" b="13" n="1"></line>
        <line t="C" i="217" b="13" n="1">! Initialise stdout capture handler</line>
        <line t="X" i="218" b="14" n="2">  if( present(free_out) ) then</line>
        <line t="X" i="219" b="15" n="3">    if( .not. free_out ) then</line>
        <line t="X" i="220" b="15" n="3">      res%stdout = file_handler( path_temp_file_name() )</line>
        <line t="X" i="221" b="15" n="2">    end if</line>
        <line t="X" i="222" b="16" n="2">  else</line>
        <line t="X" i="223" b="16" n="2">    res%stdout = file_handler( path_temp_file_name() )</line>
        <line t="X" i="224" b="16" n="1">  end if</line>
        <line t="X" i="225" b="16" n="1"></line>
        <line t="C" i="226" b="16" n="1">! Initialise stderr capture handler</line>
        <line t="X" i="227" b="17" n="2">  if( present(free_err) ) then</line>
        <line t="X" i="228" b="18" n="3">    if( .not. free_err ) then</line>
        <line t="X" i="229" b="18" n="3">      res%stderr = file_handler( path_temp_file_name() )</line>
        <line t="X" i="230" b="18" n="2">    end if</line>
        <line t="X" i="231" b="19" n="2">  else</line>
        <line t="X" i="232" b="19" n="2">    res%stderr = file_handler( path_temp_file_name() )</line>
        <line t="X" i="233" b="19" n="1">  end if</line>
        <line t="X" i="234" b="19" n="1"></line>
        <line t="EF" i="235" b="19" n="1">end function xfunit_manager</line>
        <line t="EF" i="236" b="1" n="1"></line>
        <line t="EF" i="237" b="1" n="1"></line>
        <line t="C" i="238" b="1" n="1">! Constructor (tests separated from code)</line>
        <line t="C" i="239" b="1" n="1">! Structure:</line>
        <line t="C" i="240" b="1" n="1">!   datadir = xfunit_root_dir / data / &lt;package&gt;</line>
        <line t="C" i="241" b="1" n="1">!   refdir  = xfunit_root_dir / &lt;package&gt; / reference</line>
        <line t="C" i="242" b="1" n="1">!   jxmldir = xfunit_root_dir / &lt;package&gt;</line>
        <line t="C" i="243" b="1" n="1">! This is consistent with the original structure (tests separated from code)</line>
        <line t="C" i="244" b="1" n="1">!   xfunit_root_dir := &lt;workspace&gt; / unit_testing</line>
        <line k="xfunit_manager_jxml" t="F" i="245" b="1" n="1">function xfunit_manager_jxml( module, package, xfunit_root_dir, junit_strict, fail_only, free_out, free_err ) result(res)</line>
        <line t="F" i="246" b="1" n="1"></line>
        <line t="C" i="247" b="1" n="1">! The name of the module being tested</line>
        <line t="X" i="248" b="1" n="1">  character(len=*), intent(in) :: module</line>
        <line t="X" i="249" b="1" n="1"></line>
        <line t="C" i="250" b="1" n="1">! The package to which the module belongs to (default to empty)</line>
        <line t="X" i="251" b="1" n="1">  character(len=*), intent(in) :: package</line>
        <line t="X" i="252" b="1" n="1"></line>
        <line t="C" i="253" b="1" n="1">! The path to the root directory where the tests are implemented (default to .)</line>
        <line t="X" i="254" b="1" n="1">  character(len=*), optional, intent(in) :: xfunit_root_dir</line>
        <line t="X" i="255" b="1" n="1"></line>
        <line t="C" i="256" b="1" n="1">! The flag for strict JUnit generation report</line>
        <line t="X" i="257" b="1" n="1">  logical, optional, intent(in) :: junit_strict</line>
        <line t="X" i="258" b="1" n="1"></line>
        <line t="C" i="259" b="1" n="1">! The flag for reports failures only</line>
        <line t="X" i="260" b="1" n="1">  logical, optional, intent(in) :: fail_only</line>
        <line t="X" i="261" b="1" n="1"></line>
        <line t="C" i="262" b="1" n="1">! The flag to not capture the standard output for the jxml report</line>
        <line t="X" i="263" b="1" n="1">  logical, optional, intent(in) :: free_out</line>
        <line t="X" i="264" b="1" n="1"></line>
        <line t="C" i="265" b="1" n="1">! The flag to not capture the standard error for the jxml report</line>
        <line t="X" i="266" b="1" n="1">  logical, optional, intent(in) :: free_err</line>
        <line t="X" i="267" b="1" n="1"></line>
        <line t="C" i="268" b="1" n="1">! The test manager</line>
        <line t="X" i="269" b="1" n="1">  type(t_xfunit_manager) :: res</line>
        <line t="X" i="270" b="1" n="1"></line>
        <line t="C" i="271" b="1" n="1">! Local variables</line>
        <line t="X" i="272" b="1" n="1">  character(len=:), allocatable :: root_dir, data_dir, ref_dir, jxml_dir, jxml_file</line>
        <line t="X" i="273" b="1" n="1"></line>
        <line t="C" i="274" b="1" n="1">! Set the reference directory</line>
        <line t="X" i="275" b="2" n="2">  if( present(xfunit_root_dir) ) then</line>
        <line t="X" i="276" b="2" n="2">    root_dir = string( trim(xfunit_root_dir) )</line>
        <line t="X" i="277" b="3" n="2">  else</line>
        <line t="X" i="278" b="3" n="2">    root_dir = string( '.' )</line>
        <line t="X" i="279" b="3" n="1">  end if</line>
        <line t="X" i="280" b="3" n="1"></line>
        <line t="C" i="281" b="3" n="1">! Set unit data directory</line>
        <line t="X" i="282" b="3" n="1">  data_dir = trim(root_dir) // '/' // 'data' // '/' // trim(package)</line>
        <line t="X" i="283" b="3" n="1"></line>
        <line t="C" i="284" b="3" n="1">! Set the unit test reference directory</line>
        <line t="X" i="285" b="3" n="1">  ref_dir = trim(root_dir) // '/' // trim(package) // '/' // 'reference'</line>
        <line t="X" i="286" b="3" n="1"></line>
        <line t="C" i="287" b="3" n="1">! Set the unit test JXML directory</line>
        <line t="X" i="288" b="3" n="1">  jxml_dir = trim(root_dir) // '/' // trim(package)</line>
        <line t="X" i="289" b="3" n="1"></line>
        <line t="C" i="290" b="3" n="1">! Generate the JXML file name</line>
        <line t="X" i="291" b="3" n="1">  jxml_file = trim(jxml_dir) // '/' // trim(module) // '.jxml'</line>
        <line t="X" i="292" b="3" n="1"></line>
        <line t="C" i="293" b="3" n="1">! Use the general constructor</line>
        <line t="X" i="294" b="3" n="1">  res = xfunit_manager( jxml_file, root_dir, data_dir, ref_dir, jxml_dir, junit_strict, fail_only, free_out, free_err )</line>
        <line t="X" i="295" b="3" n="1"></line>
        <line t="EF" i="296" b="3" n="1">end function xfunit_manager_jxml</line>
        <line t="EF" i="297" b="1" n="1"></line>
        <line t="EF" i="298" b="1" n="1"></line>
        <line t="C" i="299" b="1" n="1">! Constructor (unit testing contained in source code folder tree, similar to Eclipse projects)</line>
        <line t="C" i="300" b="1" n="1">! Structure:</line>
        <line t="C" i="301" b="1" n="1">!   datadir = xfunit_root_dir / data</line>
        <line t="C" i="302" b="1" n="1">!   refdir  = xfunit_root_dir / reference</line>
        <line t="C" i="303" b="1" n="1">!   jxmldir = xfunit_root_dir</line>
        <line t="C" i="304" b="1" n="1">! This is consistent with the integration in eclipse:</line>
        <line t="C" i="305" b="1" n="1">!   xfunit_root_dir := workspace / src / &lt;package&gt; / utest</line>
        <line k="xfunit_manager_eclipse" t="F" i="306" b="1" n="1">function xfunit_manager_eclipse( module, xfunit_root_dir, junit_strict, fail_only, free_out, free_err ) result(res)</line>
        <line t="F" i="307" b="1" n="1"></line>
        <line t="C" i="308" b="1" n="1">! The name of the module being tested</line>
        <line t="X" i="309" b="1" n="1">  character(len=*), intent(in) :: module</line>
        <line t="X" i="310" b="1" n="1"></line>
        <line t="C" i="311" b="1" n="1">! The path to the root directory where the tests are implemented (default to .)</line>
        <line t="X" i="312" b="1" n="1">  character(len=*), optional, intent(in) :: xfunit_root_dir</line>
        <line t="X" i="313" b="1" n="1"></line>
        <line t="C" i="314" b="1" n="1">! The flag for strict JUnit generation report</line>
        <line t="X" i="315" b="1" n="1">  logical, optional, intent(in) :: junit_strict</line>
        <line t="X" i="316" b="1" n="1"></line>
        <line t="C" i="317" b="1" n="1">! The flag for reporting failures only</line>
        <line t="X" i="318" b="1" n="1">  logical, optional, intent(in) :: fail_only</line>
        <line t="X" i="319" b="1" n="1"></line>
        <line t="C" i="320" b="1" n="1">! The flag to not capture the standard output for the jxml report</line>
        <line t="X" i="321" b="1" n="1">  logical, optional, intent(in) :: free_out</line>
        <line t="X" i="322" b="1" n="1"></line>
        <line t="C" i="323" b="1" n="1">! The flag to not capture the standard error for the jxml report</line>
        <line t="X" i="324" b="1" n="1">  logical, optional, intent(in) :: free_err</line>
        <line t="X" i="325" b="1" n="1"></line>
        <line t="C" i="326" b="1" n="1">! The test manager</line>
        <line t="X" i="327" b="1" n="1">  type(t_xfunit_manager) :: res</line>
        <line t="X" i="328" b="1" n="1"></line>
        <line t="C" i="329" b="1" n="1">! Local variables</line>
        <line t="X" i="330" b="1" n="1">  character(len=:), allocatable :: root_dir, data_dir, ref_dir, jxml_dir, jxml_file</line>
        <line t="X" i="331" b="1" n="1"></line>
        <line t="C" i="332" b="1" n="1">! Set the reference directory</line>
        <line t="X" i="333" b="2" n="2">  if( present(xfunit_root_dir) ) then</line>
        <line t="X" i="334" b="2" n="2">    root_dir = string( trim(xfunit_root_dir) )</line>
        <line t="X" i="335" b="3" n="2">  else</line>
        <line t="X" i="336" b="3" n="2">    root_dir = string( '.' )</line>
        <line t="X" i="337" b="3" n="1">  end if</line>
        <line t="X" i="338" b="3" n="1"></line>
        <line t="C" i="339" b="3" n="1">! Set unit data directory</line>
        <line t="X" i="340" b="3" n="1">  data_dir = trim(root_dir) // '/' // 'data'</line>
        <line t="X" i="341" b="3" n="1"></line>
        <line t="C" i="342" b="3" n="1">! Set the unit test reference directory</line>
        <line t="X" i="343" b="3" n="1">  ref_dir = trim(root_dir) // '/' // 'reference'</line>
        <line t="X" i="344" b="3" n="1"></line>
        <line t="C" i="345" b="3" n="1">! Set the unit test JXML directory</line>
        <line t="X" i="346" b="3" n="1">  jxml_dir = trim(root_dir)</line>
        <line t="X" i="347" b="3" n="1"></line>
        <line t="C" i="348" b="3" n="1">! Generate the JXML file name</line>
        <line t="X" i="349" b="3" n="1">  jxml_file = trim(jxml_dir) // '/' // trim(module) // '.jxml'</line>
        <line t="X" i="350" b="3" n="1"></line>
        <line t="C" i="351" b="3" n="1">! Process the command line to allow using it for test execution filtering</line>
        <line t="X" i="352" b="3" n="1">  call res%xfunit_manager_process_command_line()</line>
        <line t="X" i="353" b="3" n="1"></line>
        <line t="C" i="354" b="3" n="1">! Use the general constructor</line>
        <line t="X" i="355" b="3" n="1">  res = xfunit_manager( jxml_file, root_dir, data_dir, ref_dir, jxml_dir, junit_strict, fail_only, free_out, free_err )</line>
        <line t="X" i="356" b="3" n="1"></line>
        <line t="EF" i="357" b="3" n="1">end function xfunit_manager_eclipse</line>
        <line t="EF" i="358" b="1" n="1"></line>
        <line t="EF" i="359" b="1" n="1"></line>
        <line t="C" i="360" b="1" n="1">! Process the command line to get test names to use as filter for the execution</line>
        <line k="xfunit_manager_process_command_line" t="S" i="361" b="1" n="1">subroutine xfunit_manager_process_command_line( this )</line>
        <line t="S" i="362" b="1" n="1"></line>
        <line t="C" i="363" b="1" n="1">! The unit test manager</line>
        <line t="X" i="364" b="1" n="1">  class(t_xfunit_manager), intent(inout) :: this</line>
        <line t="X" i="365" b="1" n="1"></line>
        <line t="C" i="366" b="1" n="1">! Local variables</line>
        <line t="X" i="367" b="1" n="1">  integer :: argc, iarg, larg</line>
        <line t="X" i="368" b="1" n="1">  character(len=256) :: argv</line>
        <line t="X" i="369" b="1" n="1"></line>
        <line t="C" i="370" b="1" n="1">! Get the number of arguments in the command line</line>
        <line t="X" i="371" b="1" n="1">  argc = command_argument_count()</line>
        <line t="X" i="372" b="2" n="2">  if( argc &gt; 0 ) then</line>
        <line t="X" i="373" b="2" n="2"></line>
        <line t="C" i="374" b="2" n="2">!   Compute the maximum argument length</line>
        <line t="X" i="375" b="2" n="2">    larg = 0</line>
        <line t="X" i="376" b="3" n="3">    do iarg = 1, argc</line>
        <line t="X" i="377" b="3" n="3">      call get_command_argument( iarg, argv )</line>
        <line t="X" i="378" b="3" n="3">      larg = max( larg, len_trim(argv) )</line>
        <line t="X" i="379" b="3" n="2">    end do</line>
        <line t="X" i="380" b="3" n="2"></line>
        <line t="C" i="381" b="3" n="2">!   Allocate the argument list</line>
        <line t="X" i="382" b="3" n="2">    allocate( this%unit_test_filter(argc) )</line>
        <line t="X" i="383" b="3" n="2"></line>
        <line t="C" i="384" b="3" n="2">!   Loop reading command line arguments</line>
        <line t="X" i="385" b="4" n="3">    do iarg = 1, argc</line>
        <line t="X" i="386" b="4" n="3">      call get_command_argument( iarg, argv )</line>
        <line t="X" i="387" b="4" n="3">      this%unit_test_filter(iarg) = string(trim(adjustl(argv)))</line>
        <line t="X" i="388" b="4" n="2">    end do</line>
        <line t="X" i="389" b="4" n="2"></line>
        <line t="X" i="390" b="4" n="1">  end if</line>
        <line t="X" i="391" b="4" n="1"></line>
        <line t="ES" i="392" b="4" n="1">end subroutine xfunit_manager_process_command_line</line>
        <line t="ES" i="393" b="1" n="1"></line>
        <line t="ES" i="394" b="1" n="1"></line>
        <line t="C" i="395" b="1" n="1">! Assignment</line>
        <line k="xfunit_manager_assignment" t="S" i="396" b="1" n="1">subroutine xfunit_manager_assignment( this, other )</line>
        <line t="S" i="397" b="1" n="1"></line>
        <line t="C" i="398" b="1" n="1">! Calling object</line>
        <line t="X" i="399" b="1" n="1">  class(t_xfunit_manager), intent(out) :: this</line>
        <line t="X" i="400" b="1" n="1"></line>
        <line t="C" i="401" b="1" n="1">! THe other object</line>
        <line t="X" i="402" b="1" n="1">  class(t_xfunit_manager), intent(in) :: other</line>
        <line t="X" i="403" b="1" n="1"></line>
        <line t="C" i="404" b="1" n="1">! Assign elements</line>
        <line t="X" i="405" b="1" n="1">  this%handler = other%handler</line>
        <line t="X" i="406" b="1" n="1">  this%xfunit_root_dir = other%xfunit_root_dir</line>
        <line t="X" i="407" b="1" n="1">  this%unit_data_dir = other%unit_data_dir</line>
        <line t="X" i="408" b="1" n="1">  this%unit_ref_dir = other%unit_ref_dir</line>
        <line t="X" i="409" b="1" n="1">  this%unit_jxml_dir = other%unit_jxml_dir</line>
        <line t="X" i="410" b="1" n="1">  this%unit_jxml_file = other%unit_jxml_file</line>
        <line t="X" i="411" b="2" n="2">  if( allocated(other%unit_test_filter) ) then</line>
        <line t="X" i="412" b="2" n="2">    allocate( this%unit_test_filter, source=other%unit_test_filter )</line>
        <line t="X" i="413" b="2" n="1">  end if</line>
        <line t="X" i="414" b="2" n="1">  this%junit_strict = other%junit_strict</line>
        <line t="X" i="415" b="2" n="1">  this%fail_only = other%fail_only</line>
        <line t="X" i="416" b="2" n="1">  this%msg = other%msg</line>
        <line t="X" i="417" b="2" n="1">  this%stdout = other%stdout</line>
        <line t="X" i="418" b="2" n="1">  this%stderr = other%stderr</line>
        <line t="X" i="419" b="2" n="1"></line>
        <line t="ES" i="420" b="2" n="1">end subroutine xfunit_manager_assignment</line>
        <line t="ES" i="421" b="1" n="1"></line>
        <line t="ES" i="422" b="1" n="1"></line>
        <line t="C" i="423" b="1" n="1">! Write suite in XML</line>
        <line k="xfunit_manager_execute_suite" t="S" i="424" b="1" n="1">subroutine xfunit_manager_execute_suite( this, suite )</line>
        <line t="S" i="425" b="1" n="1"></line>
        <line t="C" i="426" b="1" n="1">! The test manager</line>
        <line t="X" i="427" b="1" n="1">  class(t_xfunit_manager), intent(inout) :: this</line>
        <line t="X" i="428" b="1" n="1"></line>
        <line t="C" i="429" b="1" n="1">! The test suite</line>
        <line t="X" i="430" b="1" n="1">  type(t_xfunit_suite), intent(inout) :: suite</line>
        <line t="X" i="431" b="1" n="1"></line>
        <line t="C" i="432" b="1" n="1">! Capture standard output (try to open)</line>
        <line t="X" i="433" b="1" n="1">  call this%stdout%open( write=.true., unit=output_unit )</line>
        <line t="X" i="434" b="1" n="1"></line>
        <line t="C" i="435" b="1" n="1">! Capture standard error (try to open)</line>
        <line t="X" i="436" b="1" n="1">  call this%stderr%open( write=.true., unit=error_unit )</line>
        <line t="X" i="437" b="1" n="1"></line>
        <line t="C" i="438" b="1" n="1">! Execute tests</line>
        <line t="X" i="439" b="1" n="1">  call suite%execute( this%get_unit_test_filter() )</line>
        <line t="X" i="440" b="2" n="2">  if( suite%is_error() ) then</line>
        <line t="X" i="441" b="2" n="2"></line>
        <line t="C" i="442" b="2" n="2">!     Report the error</line>
        <line t="X" i="443" b="2" n="2">      call this%msg%error( 'm_xfunit_manager', &amp;</line>
        <line t="X" i="444" b="2" n="2">                           'xfunit_manager_execute_suite', 1, &amp;</line>
        <line t="X" i="445" b="2" n="2">                           'Failed during execution of suite ' // trim(character(suite%get_name())) // "'" )</line>
        <line t="X" i="446" b="2" n="2"></line>
        <line t="X" i="447" b="2" n="1">  end if</line>
        <line t="X" i="448" b="2" n="1"></line>
        <line t="C" i="449" b="2" n="1">! Close the captured standard output</line>
        <line t="X" i="450" b="3" n="2">  if( this%stdout%is_open() ) then</line>
        <line t="X" i="451" b="3" n="2">    call this%stdout%close()</line>
        <line t="X" i="452" b="3" n="1">  end if</line>
        <line t="X" i="453" b="3" n="1"></line>
        <line t="C" i="454" b="3" n="1">! Close the captured standard error</line>
        <line t="X" i="455" b="4" n="2">  if( this%stderr%is_open() ) then</line>
        <line t="X" i="456" b="4" n="2">    call this%stderr%close( )</line>
        <line t="X" i="457" b="4" n="1">  end if</line>
        <line t="X" i="458" b="4" n="1"></line>
        <line t="ES" i="459" b="4" n="1">end subroutine xfunit_manager_execute_suite</line>
        <line t="ES" i="460" b="1" n="1"></line>
        <line t="ES" i="461" b="1" n="1"></line>
        <line t="C" i="462" b="1" n="1">! Write suite in XML</line>
        <line k="xfunit_manager_write_xml_suite" t="S" i="463" b="1" n="1">subroutine xfunit_manager_write_xml_suite( this, suite )</line>
        <line t="S" i="464" b="1" n="1"></line>
        <line t="C" i="465" b="1" n="1">! The test manager</line>
        <line t="X" i="466" b="1" n="1">  class(t_xfunit_manager), intent(inout) :: this</line>
        <line t="X" i="467" b="1" n="1"></line>
        <line t="C" i="468" b="1" n="1">! The test suite</line>
        <line t="X" i="469" b="1" n="1">  type(t_xfunit_suite), intent(in) :: suite</line>
        <line t="X" i="470" b="1" n="1"></line>
        <line t="C" i="471" b="1" n="1">! Local variables</line>
        <line t="X" i="472" b="1" n="1">  integer :: ios</line>
        <line t="X" i="473" b="1" n="1">  type(t_xml_writer) :: xml</line>
        <line t="X" i="474" b="1" n="1">  type(t_xml_writer_settings) :: settings</line>
        <line t="X" i="475" b="1" n="1"></line>
        <line t="C" i="476" b="1" n="1">! Open the file</line>
        <line t="X" i="477" b="1" n="1">  call this%handler%open( write=.true. )</line>
        <line t="X" i="478" b="2" n="2">  if( this%handler%is_open() ) then</line>
        <line t="X" i="479" b="2" n="2"></line>
        <line t="C" i="480" b="2" n="2">!   Initialise the XML handler</line>
        <line t="X" i="481" b="2" n="2">    settings = xml_writer_settings()</line>
        <line t="X" i="482" b="2" n="2">    call settings%set_indent(.true.)</line>
        <line t="X" i="483" b="2" n="2">    call settings%set_indent_chars('  ')</line>
        <line t="X" i="484" b="2" n="2">    xml = xml_writer( this%handler%get_unit(), settings )</line>
        <line t="X" i="485" b="2" n="2"></line>
        <line t="C" i="486" b="2" n="2">!   Initialise the file</line>
        <line t="X" i="487" b="2" n="2">    call xml%write_version()</line>
        <line t="X" i="488" b="2" n="2"></line>
        <line t="C" i="489" b="2" n="2">!   Write the suite</line>
        <line t="X" i="490" b="2" n="2">    call suite%write_xml( xml, this%junit_strict, this%fail_only, this%stdout, this%stderr )</line>
        <line t="X" i="491" b="2" n="2"></line>
        <line t="C" i="492" b="2" n="2">!   Close the file</line>
        <line t="X" i="493" b="2" n="2">    call this%handler%close()</line>
        <line t="X" i="494" b="2" n="2"></line>
        <line t="X" i="495" b="3" n="2">  else</line>
        <line t="X" i="496" b="3" n="2"></line>
        <line t="C" i="497" b="3" n="2">!   Report the error</line>
        <line t="X" i="498" b="3" n="2">    ios = this%handler%get_iostat()</line>
        <line t="X" i="499" b="3" n="2">    call this%msg%error( 'm_xfunit_manager', &amp;</line>
        <line t="X" i="500" b="3" n="2">                         'xfunit_manager_write_xml_suite', 1, &amp;</line>
        <line t="X" i="501" b="3" n="2">                         'Failed to open ' // trim(this%unit_jxml_file%character()) // &amp;</line>
        <line t="X" i="502" b="3" n="2">                         ' with iostat=' // trim(character(ios)) )</line>
        <line t="X" i="503" b="3" n="2"></line>
        <line t="X" i="504" b="3" n="1">  end if</line>
        <line t="X" i="505" b="3" n="1"></line>
        <line t="ES" i="506" b="3" n="1">end subroutine xfunit_manager_write_xml_suite</line>
        <line t="ES" i="507" b="1" n="1"></line>
        <line t="ES" i="508" b="1" n="1"></line>
        <line t="C" i="509" b="1" n="1">! Get the unit test execution patterns</line>
        <line k="xfunit_manager_unit_test_filter_get" t="F" i="510" b="1" n="1">pure function xfunit_manager_unit_test_filter_get( this ) result(res)</line>
        <line t="F" i="511" b="1" n="1"></line>
        <line t="C" i="512" b="1" n="1">! The unit test manager</line>
        <line t="X" i="513" b="1" n="1">  class(t_xfunit_manager), intent(in) :: this</line>
        <line t="X" i="514" b="1" n="1"></line>
        <line t="C" i="515" b="1" n="1">! The unit test filter patterns</line>
        <line t="X" i="516" b="1" n="1">  type(t_string), dimension(:), allocatable :: res</line>
        <line t="X" i="517" b="1" n="1"></line>
        <line t="C" i="518" b="1" n="1">! Local variables</line>
        <line t="X" i="519" b="1" n="1">  integer :: nfilter, lfilter</line>
        <line t="X" i="520" b="1" n="1"></line>
        <line t="C" i="521" b="1" n="1">! Check for patterns</line>
        <line t="X" i="522" b="2" n="2">  if( allocated(this%unit_test_filter) ) then</line>
        <line t="X" i="523" b="2" n="2"></line>
        <line t="C" i="524" b="2" n="2">!   Intialise structure</line>
        <line t="X" i="525" b="2" n="2">    nfilter = size(this%unit_test_filter)</line>
        <line t="X" i="526" b="2" n="2">    lfilter = len_trim(this%unit_test_filter(1))</line>
        <line t="X" i="527" b="2" n="2">    allocate( res(nfilter) )</line>
        <line t="X" i="528" b="2" n="2"></line>
        <line t="C" i="529" b="2" n="2">!   Return the patterns</line>
        <line t="X" i="530" b="2" n="2">    res = this%unit_test_filter</line>
        <line t="X" i="531" b="2" n="2"></line>
        <line t="X" i="532" b="3" n="2">  else</line>
        <line t="X" i="533" b="3" n="2"></line>
        <line t="C" i="534" b="3" n="2">!   Allocate empty</line>
        <line t="X" i="535" b="3" n="2">    allocate( res(0) )</line>
        <line t="X" i="536" b="3" n="2"></line>
        <line t="X" i="537" b="3" n="1">  end if</line>
        <line t="X" i="538" b="3" n="1"></line>
        <line t="EF" i="539" b="3" n="1">end function xfunit_manager_unit_test_filter_get</line>
        <line t="EF" i="540" b="1" n="1"></line>
        <line t="EF" i="541" b="1" n="1"></line>
        <line t="C" i="542" b="1" n="1">! Access functions</line>
        <line t="C" i="543" b="1" n="1"></line>
        <line t="C" i="544" b="1" n="1">! Getter for the unit testing root directory</line>
        <line k="xfunit_manager_unit_root_dir_get" t="F" i="545" b="1" n="1">elemental function xfunit_manager_unit_root_dir_get( this ) result(res)</line>
        <line t="F" i="546" b="1" n="1"></line>
        <line t="C" i="547" b="1" n="1">! Callling object</line>
        <line t="X" i="548" b="1" n="1">  class(t_xfunit_manager), intent(in) :: this</line>
        <line t="X" i="549" b="1" n="1"></line>
        <line t="C" i="550" b="1" n="1">! Return value</line>
        <line t="X" i="551" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="552" b="1" n="1"></line>
        <line t="C" i="553" b="1" n="1">! Set the return value</line>
        <line t="X" i="554" b="1" n="1">  res = this%xfunit_root_dir</line>
        <line t="X" i="555" b="1" n="1"></line>
        <line t="EF" i="556" b="1" n="1">end function xfunit_manager_unit_root_dir_get</line>
        <line t="EF" i="557" b="1" n="1"></line>
        <line t="EF" i="558" b="1" n="1"></line>
        <line t="C" i="559" b="1" n="1">! Getter for unit test data directory</line>
        <line k="xfunit_manager_unit_data_dir_get" t="F" i="560" b="1" n="1">elemental function xfunit_manager_unit_data_dir_get( this ) result(res)</line>
        <line t="F" i="561" b="1" n="1"></line>
        <line t="C" i="562" b="1" n="1">! Callling object</line>
        <line t="X" i="563" b="1" n="1">  class(t_xfunit_manager), intent(in) :: this</line>
        <line t="X" i="564" b="1" n="1"></line>
        <line t="C" i="565" b="1" n="1">! Return value</line>
        <line t="X" i="566" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="567" b="1" n="1"></line>
        <line t="C" i="568" b="1" n="1">! Set the return value</line>
        <line t="X" i="569" b="1" n="1">  res = this%unit_data_dir</line>
        <line t="X" i="570" b="1" n="1"></line>
        <line t="EF" i="571" b="1" n="1">end function xfunit_manager_unit_data_dir_get</line>
        <line t="EF" i="572" b="1" n="1"></line>
        <line t="EF" i="573" b="1" n="1"></line>
        <line t="C" i="574" b="1" n="1">! Getter for unit test reference data directory</line>
        <line k="xfunit_manager_unit_ref_dir_get" t="F" i="575" b="1" n="1">elemental function xfunit_manager_unit_ref_dir_get( this ) result(res)</line>
        <line t="F" i="576" b="1" n="1"></line>
        <line t="C" i="577" b="1" n="1">! Callling object</line>
        <line t="X" i="578" b="1" n="1">  class(t_xfunit_manager), intent(in) :: this</line>
        <line t="X" i="579" b="1" n="1"></line>
        <line t="C" i="580" b="1" n="1">! Return value</line>
        <line t="X" i="581" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="582" b="1" n="1"></line>
        <line t="C" i="583" b="1" n="1">! Set the return value</line>
        <line t="X" i="584" b="1" n="1">  res = this%unit_ref_dir</line>
        <line t="X" i="585" b="1" n="1"></line>
        <line t="EF" i="586" b="1" n="1">end function xfunit_manager_unit_ref_dir_get</line>
        <line t="EF" i="587" b="1" n="1"></line>
        <line t="EF" i="588" b="1" n="1"></line>
        <line t="C" i="589" b="1" n="1">! Getter for unit test JXML file directory</line>
        <line k="xfunit_manager_unit_jxml_dir_get" t="F" i="590" b="1" n="1">elemental function xfunit_manager_unit_jxml_dir_get( this ) result(res)</line>
        <line t="F" i="591" b="1" n="1"></line>
        <line t="C" i="592" b="1" n="1">! Callling object</line>
        <line t="X" i="593" b="1" n="1">  class(t_xfunit_manager), intent(in) :: this</line>
        <line t="X" i="594" b="1" n="1"></line>
        <line t="C" i="595" b="1" n="1">! Return value</line>
        <line t="X" i="596" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="597" b="1" n="1"></line>
        <line t="C" i="598" b="1" n="1">! Set the return value</line>
        <line t="X" i="599" b="1" n="1">  res = this%unit_jxml_dir</line>
        <line t="X" i="600" b="1" n="1"></line>
        <line t="EF" i="601" b="1" n="1">end function xfunit_manager_unit_jxml_dir_get</line>
        <line t="EF" i="602" b="1" n="1"></line>
        <line t="EF" i="603" b="1" n="1"></line>
        <line t="C" i="604" b="1" n="1">! Getter for unit test JXML file</line>
        <line k="xfunit_manager_unit_jxml_file_get" t="F" i="605" b="1" n="1">elemental function xfunit_manager_unit_jxml_file_get( this ) result(res)</line>
        <line t="F" i="606" b="1" n="1"></line>
        <line t="C" i="607" b="1" n="1">! Callling object</line>
        <line t="X" i="608" b="1" n="1">  class(t_xfunit_manager), intent(in) :: this</line>
        <line t="X" i="609" b="1" n="1"></line>
        <line t="C" i="610" b="1" n="1">! Return value</line>
        <line t="X" i="611" b="1" n="1">  type(t_string) :: res</line>
        <line t="X" i="612" b="1" n="1"></line>
        <line t="C" i="613" b="1" n="1">! Set the return value</line>
        <line t="X" i="614" b="1" n="1">  res = this%unit_jxml_file</line>
        <line t="X" i="615" b="1" n="1"></line>
        <line t="EF" i="616" b="1" n="1">end function xfunit_manager_unit_jxml_file_get</line>
        <line t="EF" i="617" b="1" n="1"></line>
        <line t="EF" i="618" b="1" n="1"></line>
        <line t="C" i="619" b="1" n="1">! Check error condition</line>
        <line k="xfunit_manager_is_error" t="F" i="620" b="1" n="1">pure function xfunit_manager_is_error( this ) result(res)</line>
        <line t="F" i="621" b="1" n="1"></line>
        <line t="C" i="622" b="1" n="1">! Callling object</line>
        <line t="X" i="623" b="1" n="1">  class(t_xfunit_manager), intent(in) :: this</line>
        <line t="X" i="624" b="1" n="1"></line>
        <line t="C" i="625" b="1" n="1">! Return value</line>
        <line t="X" i="626" b="1" n="1">  logical :: res</line>
        <line t="X" i="627" b="1" n="1"></line>
        <line t="C" i="628" b="1" n="1">! Return the status</line>
        <line t="X" i="629" b="1" n="1">  res = this%msg%on_error()</line>
        <line t="X" i="630" b="1" n="1"></line>
        <line t="EF" i="631" b="1" n="1">end function xfunit_manager_is_error</line>
        <line t="EF" i="632" b="1" n="1"></line>
        <line t="EF" i="633" b="1" n="1"></line>
        <line t="C" i="634" b="1" n="1">! Dump error messages to selected unit</line>
        <line k="xfunit_manager_dump_error" t="S" i="635" b="1" n="1">subroutine xfunit_manager_dump_error( this, unit )</line>
        <line t="S" i="636" b="1" n="1"></line>
        <line t="C" i="637" b="1" n="1">! Callling object</line>
        <line t="X" i="638" b="1" n="1">  class(t_xfunit_manager), intent(in) :: this</line>
        <line t="X" i="639" b="1" n="1"></line>
        <line t="C" i="640" b="1" n="1">! Output unit to dump errors</line>
        <line t="X" i="641" b="1" n="1">  integer, intent(in) :: unit</line>
        <line t="X" i="642" b="1" n="1"></line>
        <line t="C" i="643" b="1" n="1">! Dump error messages</line>
        <line t="X" i="644" b="1" n="1">  call this%msg%dump_errors( unit )</line>
        <line t="X" i="645" b="1" n="1"></line>
        <line t="C" i="646" b="1" n="1">! Dump warning messages</line>
        <line t="X" i="647" b="1" n="1">  call this%msg%dump_warnings( unit )</line>
        <line t="X" i="648" b="1" n="1"></line>
        <line t="ES" i="649" b="1" n="1">end subroutine xfunit_manager_dump_error</line>
        <line t="ES" i="650" b="1" n="1"></line>
        <line t="M" i="651" b="1" n="1">end module m_xfunit_manager</line>
        <line t="M" i="652" b="1" n="1"></line>
    </code>
</fmx>