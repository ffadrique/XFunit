<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_xfunit_assertion_files.f90">
    <context>
        <time>2025-03-09T10:37:48</time>
        <version>1.0.0.1</version>
        <path>.</path>
        <path_to_root>../</path_to_root>
        <project>XFunit</project>
        <name>m_xfunit_assertion_files.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_xfunit_assertion_files" type="module">
            <main>
                <lines>
                    <source percent="28.40">23</source>
                    <comments percent="41.98">34</comments>
                    <empty percent="29.63">24</empty>
                    <total>81</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="xfunit_assertion_files" type="function">
                    <statistics>
                        <lines>
                            <source percent="51.19">43</source>
                            <comments percent="20.24">17</comments>
                            <empty percent="28.57">24</empty>
                            <total>84</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>10</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_assertion_files_assign" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="43.48">10</source>
                            <comments percent="21.74">5</comments>
                            <empty percent="34.78">8</empty>
                            <total>23</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_assertion_files_compare_binary" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="43.90">36</source>
                            <comments percent="23.17">19</comments>
                            <empty percent="32.93">27</empty>
                            <total>82</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>8</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>5</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_assertion_files_compare_text" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="43.90">36</source>
                            <comments percent="23.17">19</comments>
                            <empty percent="32.93">27</empty>
                            <total>82</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>8</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>5</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_assertion_files_write" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_assertion_files_write_xml" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="55.56">20</source>
                            <comments percent="19.44">7</comments>
                            <empty percent="25.00">9</empty>
                            <total>36</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="42.93">176</source>
                    <comments percent="26.10">107</comments>
                    <empty percent="30.98">127</empty>
                    <total>410</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>10</maximum>
                    <average>5.33</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>5</maximum>
                    <average>3.17</average>
                </nesting>
                <methods>6</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="42.93">176</source>
            <comments percent="26.10">107</comments>
            <empty percent="30.98">127</empty>
            <total>410</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>10</maximum>
            <average>5.33</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>5</maximum>
            <average>3.17</average>
        </nesting>
        <methods>6</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_xfunit_assertion_files</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2025, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : Unit tests file comparison assertion</line>
        <line t="C" i="9" b="0" n="0">!</line>
        <line t="C" i="10" b="0" n="0">! License   : This file is part of XFunit.</line>
        <line t="C" i="11" b="0" n="0">!</line>
        <line t="C" i="12" b="0" n="0">!             XFunit is free software: you can redistribute it and/or modify</line>
        <line t="C" i="13" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="14" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="15" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="16" b="0" n="0">!</line>
        <line t="C" i="17" b="0" n="0">!             XFunit is distributed in the hope that it will be useful,</line>
        <line t="C" i="18" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="19" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="20" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="21" b="0" n="0">!</line>
        <line t="C" i="22" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="23" b="0" n="0">!             License along with XFunit.  </line>
        <line t="C" i="24" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="25" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="26" b="0" n="0"></line>
        <line t="C" i="27" b="0" n="0">!---USE statements--------------------------------------------------------------</line>
        <line t="C" i="28" b="0" n="0"></line>
        <line t="X" i="29" b="0" n="0">  use, intrinsic :: iso_fortran_env</line>
        <line t="X" i="30" b="0" n="0"></line>
        <line t="X" i="31" b="0" n="0">  use m_string</line>
        <line t="X" i="32" b="0" n="0">  use m_file_handler</line>
        <line t="X" i="33" b="0" n="0">  use m_util_convert</line>
        <line t="X" i="34" b="0" n="0"></line>
        <line t="X" i="35" b="0" n="0">  use m_xfunit_assertion</line>
        <line t="X" i="36" b="0" n="0">  use m_xml</line>
        <line t="X" i="37" b="0" n="0">  use m_msg</line>
        <line t="X" i="38" b="0" n="0"></line>
        <line t="C" i="39" b="0" n="0">!---End of use statements-------------------------------------------------------</line>
        <line t="C" i="40" b="0" n="0"></line>
        <line t="X" i="41" b="0" n="0">  implicit none</line>
        <line t="X" i="42" b="0" n="0"></line>
        <line t="C" i="43" b="0" n="0">!---Public/Private declarations-------------------------------------------------</line>
        <line t="C" i="44" b="0" n="0"></line>
        <line t="X" i="45" b="0" n="0">  private</line>
        <line t="X" i="46" b="0" n="0"></line>
        <line t="X" i="47" b="0" n="0">  public t_xfunit_assertion_files</line>
        <line t="X" i="48" b="0" n="0">  public xfunit_assertion_files</line>
        <line t="X" i="49" b="0" n="0"></line>
        <line t="C" i="50" b="0" n="0">!---End of public/private declarations------------------------------------------</line>
        <line t="C" i="51" b="0" n="0"></line>
        <line t="C" i="52" b="0" n="0">!---Declaration of module variables---------------------------------------------</line>
        <line t="C" i="53" b="0" n="0"></line>
        <line t="C" i="54" b="0" n="0">! The file comparison assertion type</line>
        <line t="T" i="55" b="0" n="0">  type, extends(t_xfunit_assertion) :: t_xfunit_assertion_files</line>
        <line t="X" i="56" b="0" n="0">    private</line>
        <line t="X" i="57" b="0" n="0"></line>
        <line t="C" i="58" b="0" n="0">!     Actual asserted value</line>
        <line t="X" i="59" b="0" n="0">      type(t_string) :: actual</line>
        <line t="X" i="60" b="0" n="0"></line>
        <line t="C" i="61" b="0" n="0">!     Expected value</line>
        <line t="X" i="62" b="0" n="0">      type(t_string) :: expected</line>
        <line t="X" i="63" b="0" n="0"></line>
        <line t="X" i="64" b="0" n="0">    contains</line>
        <line t="X" i="65" b="0" n="0"></line>
        <line t="C" i="66" b="0" n="0">!     Assignment</line>
        <line t="X" i="67" b="0" n="0">      procedure :: xfunit_assertion_assign =&gt; xfunit_assertion_files_assign</line>
        <line t="X" i="68" b="0" n="0"></line>
        <line t="C" i="69" b="0" n="0">!     Serialization interface (overrides abstract base; same name required)</line>
        <line t="X" i="70" b="0" n="0">      procedure :: write_xml =&gt; xfunit_assertion_files_write_xml</line>
        <line t="X" i="71" b="0" n="0">      procedure :: write =&gt; xfunit_assertion_files_write</line>
        <line t="X" i="72" b="0" n="0"></line>
        <line t="T" i="73" b="0" n="0">  end type t_xfunit_assertion_files</line>
        <line t="T" i="74" b="0" n="0"></line>
        <line t="T" i="75" b="0" n="0"></line>
        <line t="C" i="76" b="0" n="0">!---End of declaration of module variables--------------------------------------</line>
        <line t="C" i="77" b="0" n="0"></line>
        <line t="X" i="78" b="0" n="0">contains</line>
        <line t="X" i="79" b="0" n="0"></line>
        <line t="C" i="80" b="0" n="0">! Constructor for files comparison assertion</line>
        <line k="xfunit_assertion_files" t="F" i="81" b="1" n="1">function xfunit_assertion_files( name, actual, expected, binary ) result(res)</line>
        <line t="F" i="82" b="1" n="1"></line>
        <line t="C" i="83" b="1" n="1">! The assertion name</line>
        <line t="X" i="84" b="1" n="1">  character(len=*), intent(in)  :: name</line>
        <line t="X" i="85" b="1" n="1"></line>
        <line t="C" i="86" b="1" n="1">! The assertion actual value (the filename)</line>
        <line t="X" i="87" b="1" n="1">  character(len=*), intent(in)  :: actual</line>
        <line t="X" i="88" b="1" n="1"></line>
        <line t="C" i="89" b="1" n="1">! The assertion expected value (the filename)</line>
        <line t="X" i="90" b="1" n="1">  character(len=*), intent(in)  :: expected</line>
        <line t="X" i="91" b="1" n="1"></line>
        <line t="C" i="92" b="1" n="1">! Implement a binary comparison</line>
        <line t="X" i="93" b="1" n="1">  logical, optional, intent(in) :: binary</line>
        <line t="X" i="94" b="1" n="1"></line>
        <line t="C" i="95" b="1" n="1">! The returned assertion</line>
        <line t="X" i="96" b="1" n="1">  type(t_xfunit_assertion_files) :: res</line>
        <line t="X" i="97" b="1" n="1"></line>
        <line t="C" i="98" b="1" n="1">! Local variables</line>
        <line t="X" i="99" b="1" n="1">  integer :: status</line>
        <line t="X" i="100" b="1" n="1">  type(t_msg) :: amsg</line>
        <line t="X" i="101" b="1" n="1">  type(t_file_handler) :: actual_handler, expected_handler</line>
        <line t="X" i="102" b="1" n="1">  logical :: bin</line>
        <line t="X" i="103" b="1" n="1"></line>
        <line t="C" i="104" b="1" n="1">! Initialise</line>
        <line t="X" i="105" b="1" n="1">  status = xfunit_assertion_is_pass</line>
        <line t="X" i="106" b="2" n="2">  if( present(binary) ) then</line>
        <line t="X" i="107" b="2" n="2">    bin = binary</line>
        <line t="X" i="108" b="3" n="2">  else</line>
        <line t="X" i="109" b="3" n="2">    bin = .false.</line>
        <line t="X" i="110" b="3" n="1">  end if</line>
        <line t="X" i="111" b="3" n="1"></line>
        <line t="C" i="112" b="3" n="1">! Initialise actual file handler</line>
        <line t="X" i="113" b="3" n="1">  actual_handler = file_handler( actual )</line>
        <line t="X" i="114" b="4" n="2">  if( .true. .or. actual_handler%exists() ) then</line>
        <line t="X" i="115" b="4" n="2"></line>
        <line t="C" i="116" b="4" n="2">!   Initialise expected file handler</line>
        <line t="X" i="117" b="4" n="2">    expected_handler = file_handler( expected )</line>
        <line t="X" i="118" b="5" n="3">    if( .true. .or. expected_handler%exists() ) then</line>
        <line t="X" i="119" b="5" n="3"></line>
        <line t="C" i="120" b="5" n="3">!     Evaluate the assertion</line>
        <line t="X" i="121" b="6" n="4">      if( bin ) then</line>
        <line t="X" i="122" b="6" n="4"></line>
        <line t="C" i="123" b="6" n="4">!       Implement binary comparison</line>
        <line t="X" i="124" b="6" n="4">        call xfunit_assertion_files_compare_binary( actual_handler, expected_handler, amsg )</line>
        <line t="X" i="125" b="6" n="4"></line>
        <line t="X" i="126" b="7" n="4">      else</line>
        <line t="X" i="127" b="7" n="4"></line>
        <line t="C" i="128" b="7" n="4">!       Implement text comparison</line>
        <line t="X" i="129" b="7" n="4">        call xfunit_assertion_files_compare_text( actual_handler, expected_handler, amsg )</line>
        <line t="X" i="130" b="7" n="4"></line>
        <line t="X" i="131" b="7" n="3">      end if</line>
        <line t="X" i="132" b="7" n="3"></line>
        <line t="X" i="133" b="8" n="3">    else</line>
        <line t="X" i="134" b="8" n="3"></line>
        <line t="C" i="135" b="8" n="3">!     Store error</line>
        <line t="X" i="136" b="8" n="3">      amsg = msg( 1, 'Cannot find expected file: '//trim(expected), &amp;</line>
        <line t="X" i="137" b="8" n="3">                     'm_xfunit_assertion_files', &amp;</line>
        <line t="X" i="138" b="8" n="3">                     'xfunit_assertion_files_character' )</line>
        <line t="X" i="139" b="8" n="3"></line>
        <line t="X" i="140" b="8" n="2">    end if</line>
        <line t="X" i="141" b="8" n="2"></line>
        <line t="X" i="142" b="9" n="2">  else</line>
        <line t="X" i="143" b="9" n="2"></line>
        <line t="C" i="144" b="9" n="2">!   Store error</line>
        <line t="X" i="145" b="9" n="2">    amsg = msg( 2, 'Cannot find actual file: '//trim(actual), &amp;</line>
        <line t="X" i="146" b="9" n="2">                   'm_xfunit_assertion_files', &amp;</line>
        <line t="X" i="147" b="9" n="2">                   'xfunit_assertion_files_character' )</line>
        <line t="X" i="148" b="9" n="2"></line>
        <line t="X" i="149" b="9" n="1">  end if</line>
        <line t="X" i="150" b="9" n="1"></line>
        <line t="C" i="151" b="9" n="1">! Process assertion status</line>
        <line t="X" i="152" b="10" n="2">  if( amsg%get_code() /= 0 ) then</line>
        <line t="X" i="153" b="10" n="2">    call res%set_error( amsg )</line>
        <line t="X" i="154" b="10" n="2">    status = xfunit_assertion_is_fail</line>
        <line t="X" i="155" b="10" n="1">  end if</line>
        <line t="X" i="156" b="10" n="1"></line>
        <line t="C" i="157" b="10" n="1">! Store the assertion information</line>
        <line t="X" i="158" b="10" n="1">  res%t_xfunit_assertion = xfunit_assertion( name, xfunit_assertion_files_index, status )</line>
        <line t="X" i="159" b="10" n="1">  res%actual   = actual</line>
        <line t="X" i="160" b="10" n="1">  res%expected = expected</line>
        <line t="X" i="161" b="10" n="1"></line>
        <line t="EF" i="162" b="10" n="1">end function xfunit_assertion_files</line>
        <line t="EF" i="163" b="1" n="1"></line>
        <line t="EF" i="164" b="1" n="1"></line>
        <line t="C" i="165" b="1" n="1">! Compare two text files</line>
        <line k="xfunit_assertion_files_compare_text" t="S" i="166" b="1" n="1">subroutine xfunit_assertion_files_compare_text( ahandler, ehandler, amsg )</line>
        <line t="S" i="167" b="1" n="1"></line>
        <line t="C" i="168" b="1" n="1">! The handler to the actual file</line>
        <line t="X" i="169" b="1" n="1">  type(t_file_handler), intent(inout) :: ahandler</line>
        <line t="X" i="170" b="1" n="1"></line>
        <line t="C" i="171" b="1" n="1">! The handler to the expected file</line>
        <line t="X" i="172" b="1" n="1">  type(t_file_handler), intent(inout) :: ehandler</line>
        <line t="X" i="173" b="1" n="1"></line>
        <line t="C" i="174" b="1" n="1">! Error handling</line>
        <line t="X" i="175" b="1" n="1">  type(t_msg) :: amsg</line>
        <line t="X" i="176" b="1" n="1"></line>
        <line t="C" i="177" b="1" n="1">! Buffers</line>
        <line t="X" i="178" b="1" n="1">  character(len=8*1024) :: arec, erec</line>
        <line t="X" i="179" b="1" n="1"></line>
        <line t="C" i="180" b="1" n="1">! Local variables</line>
        <line t="X" i="181" b="1" n="1">  character(len=:), allocatable :: fname</line>
        <line t="X" i="182" b="1" n="1">  integer :: aunit, eunit</line>
        <line t="X" i="183" b="1" n="1">  integer :: aios, eios</line>
        <line t="X" i="184" b="1" n="1">  character(len=:), allocatable :: fmt</line>
        <line t="X" i="185" b="1" n="1"></line>
        <line t="C" i="186" b="1" n="1">! Open the actual file</line>
        <line t="X" i="187" b="1" n="1">  call ahandler%open( write=.false. )</line>
        <line t="X" i="188" b="2" n="2">  if( ahandler%is_open() ) then</line>
        <line t="X" i="189" b="2" n="2"></line>
        <line t="C" i="190" b="2" n="2">!   Open the expected file</line>
        <line t="X" i="191" b="2" n="2">    call ehandler%open( write=.false. )</line>
        <line t="X" i="192" b="3" n="3">    if( ehandler%is_open() ) then</line>
        <line t="X" i="193" b="3" n="3"></line>
        <line t="C" i="194" b="3" n="3">!     Get fortran logical units</line>
        <line t="X" i="195" b="3" n="3">      aunit = ahandler%get_unit()</line>
        <line t="X" i="196" b="3" n="3">      eunit = ehandler%get_unit()</line>
        <line t="X" i="197" b="3" n="3"></line>
        <line t="C" i="198" b="3" n="3">!     Build read format</line>
        <line t="X" i="199" b="3" n="3">      fmt = '(a' // trim(character(len(arec))) // ')'</line>
        <line t="X" i="200" b="3" n="3"></line>
        <line t="C" i="201" b="3" n="3">!     Loop reading records in the buffer</line>
        <line t="X" i="202" b="4" n="4">      do</line>
        <line t="X" i="203" b="4" n="4"></line>
        <line t="C" i="204" b="4" n="4">!       Read actual file</line>
        <line t="X" i="205" b="4" n="4">        read( aunit, fmt, advance='no', iostat=aios ) arec</line>
        <line t="X" i="206" b="4" n="4">        read( eunit, fmt, advance='no', iostat=eios ) erec</line>
        <line t="X" i="207" b="4" n="4"></line>
        <line t="C" i="208" b="4" n="4">!       Check the read buffers</line>
        <line t="X" i="209" b="5" n="5">        if( arec /= erec ) then</line>
        <line t="X" i="210" b="5" n="5"></line>
        <line t="C" i="211" b="5" n="5">!         Generate error message and exit</line>
        <line t="X" i="212" b="5" n="5">          amsg = msg( 3, 'Files do not compare', 'm_xfunit_assertion_files', 'xfunit_assertion_files_compare_text' )</line>
        <line t="X" i="213" b="5" n="5">          exit</line>
        <line t="X" i="214" b="5" n="5"></line>
        <line t="X" i="215" b="5" n="4">        end if</line>
        <line t="X" i="216" b="5" n="4"></line>
        <line t="C" i="217" b="5" n="4">!       Terminate the loop on end of file</line>
        <line t="X" i="218" b="6" n="5">        if( aios == iostat_end .or. eios == iostat_end ) exit</line>
        <line t="X" i="219" b="6" n="5"></line>
        <line t="X" i="220" b="6" n="4">      end do</line>
        <line t="X" i="221" b="6" n="4"></line>
        <line t="C" i="222" b="6" n="4">!     Close the expected file</line>
        <line t="X" i="223" b="6" n="4">      call ehandler%close()</line>
        <line t="X" i="224" b="6" n="4"></line>
        <line t="X" i="225" b="7" n="4">    else</line>
        <line t="X" i="226" b="7" n="4"></line>
        <line t="C" i="227" b="7" n="4">!     Report error on actual file opne</line>
        <line t="X" i="228" b="7" n="4">      fname = trim(ehandler%get_file_path())</line>
        <line t="X" i="229" b="7" n="4">      amsg = msg( 2, 'Cannot open expected file: ' // fname, 'm_xfunit_assertion_files', 'xfunit_assertion_files_compare_text' )</line>
        <line t="X" i="230" b="7" n="4"></line>
        <line t="X" i="231" b="7" n="3">    end if</line>
        <line t="X" i="232" b="7" n="3"></line>
        <line t="C" i="233" b="7" n="3">!   Close the actual file</line>
        <line t="X" i="234" b="7" n="3">    call ahandler%close()</line>
        <line t="X" i="235" b="7" n="3"></line>
        <line t="X" i="236" b="8" n="3">  else</line>
        <line t="X" i="237" b="8" n="3"></line>
        <line t="C" i="238" b="8" n="3">!   Report error on actual file opne</line>
        <line t="X" i="239" b="8" n="3">    fname = trim(ahandler%get_file_path())</line>
        <line t="X" i="240" b="8" n="3">    amsg = msg( 1, 'Cannot open actual file: ' // fname, 'm_xfunit_assertion_files', 'xfunit_assertion_files_compare_text' )</line>
        <line t="X" i="241" b="8" n="3"></line>
        <line t="X" i="242" b="8" n="2">  end if</line>
        <line t="X" i="243" b="8" n="2"></line>
        <line t="ES" i="244" b="8" n="2">end subroutine xfunit_assertion_files_compare_text</line>
        <line t="ES" i="245" b="1" n="2"></line>
        <line t="ES" i="246" b="1" n="2"></line>
        <line t="C" i="247" b="1" n="2">! Compare two binary files</line>
        <line k="xfunit_assertion_files_compare_binary" t="S" i="248" b="1" n="1">subroutine xfunit_assertion_files_compare_binary( ahandler, ehandler, amsg )</line>
        <line t="S" i="249" b="1" n="1"></line>
        <line t="C" i="250" b="1" n="1">! The handler to the actual file</line>
        <line t="X" i="251" b="1" n="1">  type(t_file_handler), intent(inout) :: ahandler</line>
        <line t="X" i="252" b="1" n="1"></line>
        <line t="C" i="253" b="1" n="1">! The handler to the expected file</line>
        <line t="X" i="254" b="1" n="1">  type(t_file_handler), intent(inout) :: ehandler</line>
        <line t="X" i="255" b="1" n="1"></line>
        <line t="C" i="256" b="1" n="1">! Error handling</line>
        <line t="X" i="257" b="1" n="1">  type(t_msg) :: amsg</line>
        <line t="X" i="258" b="1" n="1"></line>
        <line t="C" i="259" b="1" n="1">! Buffers</line>
        <line t="X" i="260" b="1" n="1">  integer(kind=1), dimension(8*1024) :: arec, erec</line>
        <line t="X" i="261" b="1" n="1"></line>
        <line t="C" i="262" b="1" n="1">! Local variables</line>
        <line t="X" i="263" b="1" n="1">  character(len=:), allocatable :: fname</line>
        <line t="X" i="264" b="1" n="1">  integer :: aunit, eunit</line>
        <line t="X" i="265" b="1" n="1">  integer :: aios, eios</line>
        <line t="X" i="266" b="1" n="1"></line>
        <line t="C" i="267" b="1" n="1">! Initialise</line>
        <line t="X" i="268" b="1" n="1">  arec = 0_1</line>
        <line t="X" i="269" b="1" n="1">  erec = 0_1</line>
        <line t="X" i="270" b="1" n="1"></line>
        <line t="C" i="271" b="1" n="1">! Open the actual file</line>
        <line t="X" i="272" b="1" n="1">  call ahandler%open( write=.false., stream=.true., binary=.true. )</line>
        <line t="X" i="273" b="2" n="2">  if( ahandler%is_open() ) then</line>
        <line t="X" i="274" b="2" n="2"></line>
        <line t="C" i="275" b="2" n="2">!   Open the expected file</line>
        <line t="X" i="276" b="2" n="2">    call ehandler%open( write=.false., stream=.true., binary=.true. )</line>
        <line t="X" i="277" b="3" n="3">    if( ehandler%is_open() ) then</line>
        <line t="X" i="278" b="3" n="3"></line>
        <line t="C" i="279" b="3" n="3">!     Get fortran logical units</line>
        <line t="X" i="280" b="3" n="3">      aunit = ahandler%get_unit()</line>
        <line t="X" i="281" b="3" n="3">      eunit = ehandler%get_unit()</line>
        <line t="X" i="282" b="3" n="3"></line>
        <line t="C" i="283" b="3" n="3">!     Loop reading records in the buffer</line>
        <line t="X" i="284" b="4" n="4">      do</line>
        <line t="X" i="285" b="4" n="4"></line>
        <line t="C" i="286" b="4" n="4">!       Read actual file</line>
        <line t="X" i="287" b="4" n="4">        read( aunit, iostat=aios ) arec</line>
        <line t="X" i="288" b="4" n="4">        read( eunit, iostat=eios ) erec</line>
        <line t="X" i="289" b="4" n="4"></line>
        <line t="C" i="290" b="4" n="4">!       Check the read buffers</line>
        <line t="X" i="291" b="5" n="5">        if( any( arec /= erec ) ) then</line>
        <line t="X" i="292" b="5" n="5"></line>
        <line t="C" i="293" b="5" n="5">!         Generate error message and exit</line>
        <line t="X" i="294" b="5" n="5">          amsg = msg( 3, 'Files do not compare', 'm_xfunit_assertion_files', 'xfunit_assertion_files_compare_binary' )</line>
        <line t="X" i="295" b="5" n="5">          exit</line>
        <line t="X" i="296" b="5" n="5"></line>
        <line t="X" i="297" b="5" n="4">        end if</line>
        <line t="X" i="298" b="5" n="4"></line>
        <line t="C" i="299" b="5" n="4">!       Terminate the loop on end of file</line>
        <line t="X" i="300" b="6" n="5">        if( aios == iostat_end .or. eios == iostat_end ) exit</line>
        <line t="X" i="301" b="6" n="5"></line>
        <line t="X" i="302" b="6" n="4">      end do</line>
        <line t="X" i="303" b="6" n="4"></line>
        <line t="C" i="304" b="6" n="4">!     Close the expected file</line>
        <line t="X" i="305" b="6" n="4">      call ehandler%close()</line>
        <line t="X" i="306" b="6" n="4"></line>
        <line t="X" i="307" b="7" n="4">    else</line>
        <line t="X" i="308" b="7" n="4"></line>
        <line t="C" i="309" b="7" n="4">!     Report error on actual file opne</line>
        <line t="X" i="310" b="7" n="4">      fname = trim(ehandler%get_file_path())</line>
        <line t="X" i="311" b="7" n="4">      amsg = msg( 2, 'Cannot open expected file: ' // fname, 'm_xfunit_assertion_files', 'xfunit_assertion_files_compare_binary' )</line>
        <line t="X" i="312" b="7" n="4"></line>
        <line t="X" i="313" b="7" n="3">    end if</line>
        <line t="X" i="314" b="7" n="3"></line>
        <line t="C" i="315" b="7" n="3">!   Close the actual file</line>
        <line t="X" i="316" b="7" n="3">    call ahandler%close()</line>
        <line t="X" i="317" b="7" n="3"></line>
        <line t="X" i="318" b="8" n="3">  else</line>
        <line t="X" i="319" b="8" n="3"></line>
        <line t="C" i="320" b="8" n="3">!   Report error on actual file opne</line>
        <line t="X" i="321" b="8" n="3">    fname = trim(ahandler%get_file_path())</line>
        <line t="X" i="322" b="8" n="3">    amsg = msg( 1, 'Cannot open actual file: ' // fname, 'm_xfunit_assertion_files', 'xfunit_assertion_files_compare_binary' )</line>
        <line t="X" i="323" b="8" n="3"></line>
        <line t="X" i="324" b="8" n="2">  end if</line>
        <line t="X" i="325" b="8" n="2"></line>
        <line t="ES" i="326" b="8" n="2">end subroutine xfunit_assertion_files_compare_binary</line>
        <line t="ES" i="327" b="1" n="2"></line>
        <line t="ES" i="328" b="1" n="2"></line>
        <line t="C" i="329" b="1" n="2">! Assignment</line>
        <line k="xfunit_assertion_files_assign" t="S" i="330" b="1" n="1">impure elemental subroutine xfunit_assertion_files_assign( this, other )</line>
        <line t="S" i="331" b="1" n="1"></line>
        <line t="C" i="332" b="1" n="1">! The target assertion</line>
        <line t="X" i="333" b="1" n="1">  class(t_xfunit_assertion_files), intent(inout) :: this</line>
        <line t="X" i="334" b="1" n="1"></line>
        <line t="C" i="335" b="1" n="1">! The source assertion</line>
        <line t="X" i="336" b="1" n="1">  class(t_xfunit_assertion), intent(in) :: other</line>
        <line t="X" i="337" b="1" n="1"></line>
        <line t="C" i="338" b="1" n="1">! Cast the other object</line>
        <line t="X" i="339" b="1" n="2">  select type(other)</line>
        <line t="X" i="340" b="2" n="2">    type is(t_xfunit_assertion_files)</line>
        <line t="X" i="341" b="2" n="2"></line>
        <line t="C" i="342" b="2" n="2">!     Assign elements</line>
        <line t="X" i="343" b="2" n="2">      this%t_xfunit_assertion = other%t_xfunit_assertion</line>
        <line t="X" i="344" b="2" n="2">      this%actual = other%actual</line>
        <line t="X" i="345" b="2" n="2">      this%expected = other%expected</line>
        <line t="X" i="346" b="2" n="2"></line>
        <line t="X" i="347" b="2" n="1">  end select</line>
        <line t="X" i="348" b="2" n="1"></line>
        <line t="ES" i="349" b="2" n="1">end subroutine xfunit_assertion_files_assign</line>
        <line t="ES" i="350" b="1" n="1"></line>
        <line t="ES" i="351" b="1" n="1"></line>
        <line t="C" i="352" b="1" n="1">! Serialize in XML</line>
        <line k="xfunit_assertion_files_write_xml" t="S" i="353" b="1" n="1">subroutine xfunit_assertion_files_write_xml( this, xml )</line>
        <line t="S" i="354" b="1" n="1"></line>
        <line t="C" i="355" b="1" n="1">! The assertion</line>
        <line t="X" i="356" b="1" n="1">  class(t_xfunit_assertion_files), intent(in) :: this</line>
        <line t="X" i="357" b="1" n="1"></line>
        <line t="C" i="358" b="1" n="1">! The XML context structure</line>
        <line t="X" i="359" b="1" n="1">  type(t_xml_writer), intent(inout) :: xml</line>
        <line t="X" i="360" b="1" n="1"></line>
        <line t="C" i="361" b="1" n="1">! Local variables</line>
        <line t="X" i="362" b="1" n="1">  character(len=256) :: fname</line>
        <line t="X" i="363" b="1" n="1">  integer :: idx</line>
        <line t="X" i="364" b="1" n="1"></line>
        <line t="C" i="365" b="1" n="1">! Serialize start tag</line>
        <line t="X" i="366" b="1" n="1">  call this%write_xml_start_tag( xml )</line>
        <line t="X" i="367" b="1" n="1"></line>
        <line t="C" i="368" b="1" n="1">! Add details</line>
        <line t="X" i="369" b="1" n="1">  fname = trim(character(this%actual))</line>
        <line t="X" i="370" b="1" n="1">  idx = index( fname, '/', back=.true. )</line>
        <line t="X" i="371" b="2" n="2">  if( idx &gt; 0 ) then</line>
        <line t="X" i="372" b="2" n="2">    fname = fname(idx+1:)</line>
        <line t="X" i="373" b="2" n="1">  end if</line>
        <line t="X" i="374" b="2" n="1">  call xml%write_terminal( 'actual', trim(fname) )</line>
        <line t="X" i="375" b="2" n="1">  fname = trim(character(this%expected))</line>
        <line t="X" i="376" b="2" n="1">  idx = index( fname, '/', back=.true. )</line>
        <line t="X" i="377" b="3" n="2">  if( idx &gt; 0 ) then</line>
        <line t="X" i="378" b="3" n="2">    fname = fname(idx+1:)</line>
        <line t="X" i="379" b="3" n="1">  end if</line>
        <line t="X" i="380" b="3" n="1">  call xml%write_terminal( 'expected', trim(fname) )</line>
        <line t="X" i="381" b="3" n="1"></line>
        <line t="C" i="382" b="3" n="1">! Serializa end tag</line>
        <line t="X" i="383" b="3" n="1">  call this%write_xml_end_tag( xml )</line>
        <line t="X" i="384" b="3" n="1"></line>
        <line t="ES" i="385" b="3" n="1">end subroutine xfunit_assertion_files_write_xml</line>
        <line t="ES" i="386" b="1" n="1"></line>
        <line t="ES" i="387" b="1" n="1"></line>
        <line t="C" i="388" b="1" n="1">! Serialize in plain text</line>
        <line k="xfunit_assertion_files_write" t="S" i="389" b="1" n="1">subroutine xfunit_assertion_files_write( this, unit )</line>
        <line t="S" i="390" b="1" n="1"></line>
        <line t="C" i="391" b="1" n="1">! The assertion</line>
        <line t="X" i="392" b="1" n="1">  class(t_xfunit_assertion_files), intent(in) :: this</line>
        <line t="X" i="393" b="1" n="1"></line>
        <line t="C" i="394" b="1" n="1">! The open fortran unit</line>
        <line t="X" i="395" b="1" n="1">  integer, intent(in) :: unit</line>
        <line t="X" i="396" b="1" n="1"></line>
        <line t="C" i="397" b="1" n="1">! Write the assertion header</line>
        <line t="X" i="398" b="1" n="1">  call this%write_header( unit )</line>
        <line t="X" i="399" b="1" n="1"></line>
        <line t="C" i="400" b="1" n="1">! Write the assertion details</line>
        <line t="X" i="401" b="1" n="1">  write( unit, '(2x,a,1x,a)' ) 'actual:  ', trim(character(this%actual))</line>
        <line t="X" i="402" b="1" n="1">  write( unit, '(2x,a,1x,a)' ) 'expected:', trim(character(this%expected))</line>
        <line t="X" i="403" b="1" n="1"></line>
        <line t="C" i="404" b="1" n="1">! Write the assertion footer</line>
        <line t="X" i="405" b="1" n="1">  call this%write_footer( unit )</line>
        <line t="X" i="406" b="1" n="1"></line>
        <line t="ES" i="407" b="1" n="1">end subroutine xfunit_assertion_files_write</line>
        <line t="ES" i="408" b="1" n="1"></line>
        <line t="M" i="409" b="1" n="1">end module m_xfunit_assertion_files</line>
        <line t="M" i="410" b="1" n="1"></line>
        <line t="M" i="411" b="1" n="1"></line>
    </code>
</fmx>