<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_xfunit_assertion_string.f90">
    <context>
        <time>2025-03-09T10:37:48</time>
        <version>1.0.0.1</version>
        <path>.</path>
        <path_to_root>../</path_to_root>
        <project>XFunit</project>
        <name>m_xfunit_assertion_string.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_xfunit_assertion_string" type="module">
            <main>
                <lines>
                    <source percent="26.32">20</source>
                    <comments percent="44.74">34</comments>
                    <empty percent="28.95">22</empty>
                    <total>76</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="xfunit_assertion_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="57.58">57</source>
                            <comments percent="21.21">21</comments>
                            <empty percent="21.21">21</empty>
                            <total>99</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>15</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_assertion_string_assign" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="43.48">10</source>
                            <comments percent="21.74">5</comments>
                            <empty percent="34.78">8</empty>
                            <total>23</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_assertion_string_write" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="xfunit_assertion_string_write_xml" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="36.36">8</source>
                            <comments percent="27.27">6</comments>
                            <empty percent="36.36">8</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="42.56">103</source>
                    <comments percent="29.75">72</comments>
                    <empty percent="27.69">67</empty>
                    <total>242</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>15</maximum>
                    <average>4.75</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>3</maximum>
                    <average>1.75</average>
                </nesting>
                <methods>4</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="42.56">103</source>
            <comments percent="29.75">72</comments>
            <empty percent="27.69">67</empty>
            <total>242</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>15</maximum>
            <average>4.75</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>3</maximum>
            <average>1.75</average>
        </nesting>
        <methods>4</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_xfunit_assertion_string</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2025, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : Unit tests string assertion</line>
        <line t="C" i="9" b="0" n="0">!</line>
        <line t="C" i="10" b="0" n="0">! License   : This file is part of XFunit.</line>
        <line t="C" i="11" b="0" n="0">!</line>
        <line t="C" i="12" b="0" n="0">!             XFunit is free software: you can redistribute it and/or modify</line>
        <line t="C" i="13" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="14" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="15" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="16" b="0" n="0">!</line>
        <line t="C" i="17" b="0" n="0">!             XFunit is distributed in the hope that it will be useful,</line>
        <line t="C" i="18" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="19" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="20" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="21" b="0" n="0">!</line>
        <line t="C" i="22" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="23" b="0" n="0">!             License along with XFunit.  </line>
        <line t="C" i="24" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="25" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="26" b="0" n="0"></line>
        <line t="C" i="27" b="0" n="0">!---USE statements--------------------------------------------------------------</line>
        <line t="C" i="28" b="0" n="0"></line>
        <line t="X" i="29" b="0" n="0">  use m_string</line>
        <line t="X" i="30" b="0" n="0">  use m_util_convert</line>
        <line t="X" i="31" b="0" n="0"></line>
        <line t="X" i="32" b="0" n="0">  use m_xfunit_assertion</line>
        <line t="X" i="33" b="0" n="0">  use m_xml</line>
        <line t="X" i="34" b="0" n="0"></line>
        <line t="C" i="35" b="0" n="0">!---End of use statements-------------------------------------------------------</line>
        <line t="C" i="36" b="0" n="0"></line>
        <line t="X" i="37" b="0" n="0">  implicit none</line>
        <line t="X" i="38" b="0" n="0"></line>
        <line t="C" i="39" b="0" n="0">!---Public/Private declarations-------------------------------------------------</line>
        <line t="C" i="40" b="0" n="0"></line>
        <line t="X" i="41" b="0" n="0">  private</line>
        <line t="X" i="42" b="0" n="0"></line>
        <line t="X" i="43" b="0" n="0">  public t_xfunit_assertion_string</line>
        <line t="X" i="44" b="0" n="0"></line>
        <line t="X" i="45" b="0" n="0">  public xfunit_assertion_string</line>
        <line t="X" i="46" b="0" n="0"></line>
        <line t="C" i="47" b="0" n="0">!---End of public/private declarations------------------------------------------</line>
        <line t="C" i="48" b="0" n="0"></line>
        <line t="C" i="49" b="0" n="0">!---Declaration of module variables---------------------------------------------</line>
        <line t="C" i="50" b="0" n="0"></line>
        <line t="C" i="51" b="0" n="0">! The string assertion type</line>
        <line t="T" i="52" b="0" n="0">  type, extends(t_xfunit_assertion) :: t_xfunit_assertion_string</line>
        <line t="X" i="53" b="0" n="0">    private</line>
        <line t="X" i="54" b="0" n="0"></line>
        <line t="C" i="55" b="0" n="0">!     Actual asserted value</line>
        <line t="X" i="56" b="0" n="0">      type(t_string) :: actual</line>
        <line t="X" i="57" b="0" n="0"></line>
        <line t="C" i="58" b="0" n="0">!     Expected value</line>
        <line t="X" i="59" b="0" n="0">      type(t_string) :: expected</line>
        <line t="X" i="60" b="0" n="0"></line>
        <line t="X" i="61" b="0" n="0">    contains</line>
        <line t="X" i="62" b="0" n="0"></line>
        <line t="C" i="63" b="0" n="0">!     Assignment</line>
        <line t="X" i="64" b="0" n="0">      procedure :: xfunit_assertion_assign =&gt; xfunit_assertion_string_assign</line>
        <line t="X" i="65" b="0" n="0"></line>
        <line t="C" i="66" b="0" n="0">!     Serialization interface (overrides abstract base; same name required)</line>
        <line t="X" i="67" b="0" n="0">      procedure :: write_xml =&gt; xfunit_assertion_string_write_xml</line>
        <line t="X" i="68" b="0" n="0">      procedure :: write =&gt; xfunit_assertion_string_write</line>
        <line t="X" i="69" b="0" n="0"></line>
        <line t="T" i="70" b="0" n="0">  end type t_xfunit_assertion_string</line>
        <line t="T" i="71" b="0" n="0"></line>
        <line t="C" i="72" b="0" n="0">!---End of declaration of module variables--------------------------------------</line>
        <line t="C" i="73" b="0" n="0"></line>
        <line t="X" i="74" b="0" n="0">contains</line>
        <line t="X" i="75" b="0" n="0"></line>
        <line t="C" i="76" b="0" n="0">! Constructor for string assertion</line>
        <line k="xfunit_assertion_string" t="F" i="77" b="1" n="1">impure elemental function xfunit_assertion_string( name, actual, expected, matching, ignorecase ) result(res)</line>
        <line t="F" i="78" b="1" n="1"></line>
        <line t="C" i="79" b="1" n="1">! The assertion name</line>
        <line t="X" i="80" b="1" n="1">  character(len=*), intent(in)  :: name</line>
        <line t="X" i="81" b="1" n="1"></line>
        <line t="C" i="82" b="1" n="1">! The assertion actual value</line>
        <line t="X" i="83" b="1" n="1">  type(t_string), intent(in)  :: actual</line>
        <line t="X" i="84" b="1" n="1"></line>
        <line t="C" i="85" b="1" n="1">! The assertion expected value</line>
        <line t="X" i="86" b="1" n="1">  type(t_string), intent(in)  :: expected</line>
        <line t="X" i="87" b="1" n="1"></line>
        <line t="C" i="88" b="1" n="1">! The character matching strategy (optional, default to exact)</line>
        <line t="C" i="89" b="1" n="1">! Enumerated values in m_xfunit_assertion</line>
        <line t="X" i="90" b="1" n="1">  integer, optional, intent(in)  :: matching</line>
        <line t="X" i="91" b="1" n="1"></line>
        <line t="C" i="92" b="1" n="1">! Ignore case in comparison</line>
        <line t="X" i="93" b="1" n="1">  logical, optional, intent(in)  :: ignorecase</line>
        <line t="X" i="94" b="1" n="1"></line>
        <line t="C" i="95" b="1" n="1">! The returned assertion</line>
        <line t="X" i="96" b="1" n="1">  type(t_xfunit_assertion_string) :: res</line>
        <line t="X" i="97" b="1" n="1"></line>
        <line t="C" i="98" b="1" n="1">! Local variables</line>
        <line t="X" i="99" b="1" n="1">  integer :: lactual, lexpected</line>
        <line t="X" i="100" b="1" n="1">  logical :: lmatch</line>
        <line t="X" i="101" b="1" n="1">  integer :: status</line>
        <line t="X" i="102" b="1" n="1">  logical :: icase</line>
        <line t="X" i="103" b="1" n="1">  integer :: assertion_case_index</line>
        <line t="X" i="104" b="1" n="1">  integer :: imatch</line>
        <line t="X" i="105" b="1" n="1">  type(t_string) :: xactual</line>
        <line t="X" i="106" b="1" n="1">  type(t_string) :: xexpected</line>
        <line t="X" i="107" b="1" n="1"></line>
        <line t="C" i="108" b="1" n="1">! Check case utilisation</line>
        <line t="X" i="109" b="2" n="2">  if( present(ignorecase) ) then</line>
        <line t="X" i="110" b="2" n="2">    icase = ignorecase</line>
        <line t="X" i="111" b="3" n="2">  else</line>
        <line t="X" i="112" b="3" n="2">    icase = .false.</line>
        <line t="X" i="113" b="3" n="1">  end if</line>
        <line t="X" i="114" b="3" n="1"></line>
        <line t="C" i="115" b="3" n="1">! Check matching strtegy</line>
        <line t="X" i="116" b="4" n="2">  if( present(matching) ) then</line>
        <line t="X" i="117" b="4" n="2">    imatch = matching</line>
        <line t="X" i="118" b="5" n="2">  else</line>
        <line t="X" i="119" b="5" n="2">    imatch = xfunit_assertion_string_match_exact</line>
        <line t="X" i="120" b="5" n="1">  end if</line>
        <line t="X" i="121" b="5" n="1"></line>
        <line t="C" i="122" b="5" n="1">! Initialise locals</line>
        <line t="X" i="123" b="5" n="1">  lactual = len_trim(actual)</line>
        <line t="X" i="124" b="5" n="1">  lexpected = len_trim(expected)</line>
        <line t="X" i="125" b="6" n="2">  if( icase ) then</line>
        <line t="X" i="126" b="6" n="2">    xactual = actual%lowercase()</line>
        <line t="X" i="127" b="6" n="2">    xexpected = expected%lowercase()</line>
        <line t="X" i="128" b="7" n="2">  else</line>
        <line t="X" i="129" b="7" n="2">    xactual = actual</line>
        <line t="X" i="130" b="7" n="2">    xexpected = expected</line>
        <line t="X" i="131" b="7" n="1">  end if</line>
        <line t="X" i="132" b="7" n="1"></line>
        <line t="C" i="133" b="7" n="1">! Compute result</line>
        <line t="X" i="134" b="7" n="2">  select case( imatch )</line>
        <line t="X" i="135" b="7" n="2"></line>
        <line t="C" i="136" b="7" n="2">!   Do the global match check</line>
        <line t="X" i="137" b="8" n="2">    case( xfunit_assertion_string_match_global )</line>
        <line t="X" i="138" b="8" n="2">    lmatch = match( xactual, xexpected )</line>
        <line t="X" i="139" b="8" n="2"></line>
        <line t="C" i="140" b="8" n="2">!   Do the regular expression check</line>
        <line t="C" i="141" b="8" n="2">!   NOT IMPLEMENTED YET</line>
        <line t="X" i="142" b="9" n="2">    case( xfunit_assertion_string_match_regexp )</line>
        <line t="X" i="143" b="9" n="2">      lmatch = .false.</line>
        <line t="X" i="144" b="9" n="2"></line>
        <line t="C" i="145" b="9" n="2">!   Do the exact check</line>
        <line t="X" i="146" b="10" n="2">    case default</line>
        <line t="X" i="147" b="10" n="2">      lmatch = ( lactual == lexpected )</line>
        <line t="X" i="148" b="11" n="3">      if( lmatch ) lmatch = ( string(xactual,1,lactual) == string(xexpected,1,lactual) )</line>
        <line t="X" i="149" b="11" n="3"></line>
        <line t="X" i="150" b="11" n="2">  end select</line>
        <line t="X" i="151" b="11" n="2"></line>
        <line t="C" i="152" b="11" n="2">! Set the precise assertion type</line>
        <line t="X" i="153" b="12" n="3">  if( icase ) then</line>
        <line t="X" i="154" b="12" n="3">    assertion_case_index = xfunit_assertion_string_nocase_index</line>
        <line t="X" i="155" b="13" n="3">  else</line>
        <line t="X" i="156" b="13" n="3">    assertion_case_index = xfunit_assertion_string_index</line>
        <line t="X" i="157" b="13" n="2">  end if</line>
        <line t="X" i="158" b="13" n="2"></line>
        <line t="C" i="159" b="13" n="2">! Set the assertions status</line>
        <line t="X" i="160" b="14" n="3">  if( lmatch ) then</line>
        <line t="X" i="161" b="14" n="3">    status = xfunit_assertion_is_pass</line>
        <line t="X" i="162" b="15" n="3">  else</line>
        <line t="X" i="163" b="15" n="3">    status = xfunit_assertion_is_fail</line>
        <line t="X" i="164" b="15" n="2">  end if</line>
        <line t="X" i="165" b="15" n="2"></line>
        <line t="C" i="166" b="15" n="2">! Invoke the base assertion constructor</line>
        <line t="X" i="167" b="15" n="2">  res%t_xfunit_assertion = xfunit_assertion( name, assertion_case_index, status )</line>
        <line t="X" i="168" b="15" n="2"></line>
        <line t="C" i="169" b="15" n="2">! Complete the assertion construction</line>
        <line t="X" i="170" b="15" n="2">  res%actual   = trim(actual)</line>
        <line t="X" i="171" b="15" n="2">  res%expected = trim(expected)</line>
        <line t="X" i="172" b="15" n="2"></line>
        <line t="EF" i="173" b="15" n="2">end function xfunit_assertion_string</line>
        <line t="EF" i="174" b="1" n="2"></line>
        <line t="EF" i="175" b="1" n="2"></line>
        <line t="C" i="176" b="1" n="2">! Assignment</line>
        <line k="xfunit_assertion_string_assign" t="S" i="177" b="1" n="1">impure elemental subroutine xfunit_assertion_string_assign( this, other )</line>
        <line t="S" i="178" b="1" n="1"></line>
        <line t="C" i="179" b="1" n="1">! The target assertion</line>
        <line t="X" i="180" b="1" n="1">  class(t_xfunit_assertion_string), intent(inout) :: this</line>
        <line t="X" i="181" b="1" n="1"></line>
        <line t="C" i="182" b="1" n="1">! The source assertion</line>
        <line t="X" i="183" b="1" n="1">  class(t_xfunit_assertion), intent(in) :: other</line>
        <line t="X" i="184" b="1" n="1"></line>
        <line t="C" i="185" b="1" n="1">! Cast the other object</line>
        <line t="X" i="186" b="1" n="2">  select type(other)</line>
        <line t="X" i="187" b="2" n="2">    type is(t_xfunit_assertion_string)</line>
        <line t="X" i="188" b="2" n="2"></line>
        <line t="C" i="189" b="2" n="2">!     Assign elements</line>
        <line t="X" i="190" b="2" n="2">      this%t_xfunit_assertion = other%t_xfunit_assertion</line>
        <line t="X" i="191" b="2" n="2">      this%actual = other%actual</line>
        <line t="X" i="192" b="2" n="2">      this%expected = other%expected</line>
        <line t="X" i="193" b="2" n="2"></line>
        <line t="X" i="194" b="2" n="1">  end select</line>
        <line t="X" i="195" b="2" n="1"></line>
        <line t="ES" i="196" b="2" n="1">end subroutine xfunit_assertion_string_assign</line>
        <line t="ES" i="197" b="1" n="1"></line>
        <line t="ES" i="198" b="1" n="1"></line>
        <line t="C" i="199" b="1" n="1">! Serialize in XML</line>
        <line k="xfunit_assertion_string_write_xml" t="S" i="200" b="1" n="1">subroutine xfunit_assertion_string_write_xml( this, xml )</line>
        <line t="S" i="201" b="1" n="1"></line>
        <line t="C" i="202" b="1" n="1">! The assertion</line>
        <line t="X" i="203" b="1" n="1">  class(t_xfunit_assertion_string), intent(in) :: this</line>
        <line t="X" i="204" b="1" n="1"></line>
        <line t="C" i="205" b="1" n="1">! The XML context structure</line>
        <line t="X" i="206" b="1" n="1">  type(t_xml_writer), intent(inout) :: xml</line>
        <line t="X" i="207" b="1" n="1"></line>
        <line t="C" i="208" b="1" n="1">! Serializa start tag</line>
        <line t="X" i="209" b="1" n="1">  call this%write_xml_start_tag( xml )</line>
        <line t="X" i="210" b="1" n="1"></line>
        <line t="C" i="211" b="1" n="1">! Add details</line>
        <line t="X" i="212" b="1" n="1">  call xml%write_terminal( 'actual', this%actual )</line>
        <line t="X" i="213" b="1" n="1">  call xml%write_terminal( 'expected', this%expected )</line>
        <line t="X" i="214" b="1" n="1"></line>
        <line t="C" i="215" b="1" n="1">! Serializa end tag</line>
        <line t="X" i="216" b="1" n="1">  call this%write_xml_end_tag( xml )</line>
        <line t="X" i="217" b="1" n="1"></line>
        <line t="ES" i="218" b="1" n="1">end subroutine xfunit_assertion_string_write_xml</line>
        <line t="ES" i="219" b="1" n="1"></line>
        <line t="ES" i="220" b="1" n="1"></line>
        <line t="C" i="221" b="1" n="1">! Serialize in plain text</line>
        <line k="xfunit_assertion_string_write" t="S" i="222" b="1" n="1">subroutine xfunit_assertion_string_write( this, unit )</line>
        <line t="S" i="223" b="1" n="1"></line>
        <line t="C" i="224" b="1" n="1">! The assertion</line>
        <line t="X" i="225" b="1" n="1">  class(t_xfunit_assertion_string), intent(in) :: this</line>
        <line t="X" i="226" b="1" n="1"></line>
        <line t="C" i="227" b="1" n="1">! The XML context structure</line>
        <line t="X" i="228" b="1" n="1">  integer, intent(in) :: unit</line>
        <line t="X" i="229" b="1" n="1"></line>
        <line t="C" i="230" b="1" n="1">! Write the assertion header</line>
        <line t="X" i="231" b="1" n="1">  call this%write_header( unit )</line>
        <line t="X" i="232" b="1" n="1"></line>
        <line t="C" i="233" b="1" n="1">! Write the assertion details</line>
        <line t="X" i="234" b="1" n="1">  write( unit, '(2x,a,1x,a)' ) 'actual:  ', character(this%actual)</line>
        <line t="X" i="235" b="1" n="1">  write( unit, '(2x,a,1x,a)' ) 'expected:', character(this%expected)</line>
        <line t="X" i="236" b="1" n="1"></line>
        <line t="C" i="237" b="1" n="1">! Write the assertion footer</line>
        <line t="X" i="238" b="1" n="1">  call this%write_footer( unit )</line>
        <line t="X" i="239" b="1" n="1"></line>
        <line t="ES" i="240" b="1" n="1">end subroutine xfunit_assertion_string_write</line>
        <line t="ES" i="241" b="1" n="1"></line>
        <line t="M" i="242" b="1" n="1">end module m_xfunit_assertion_string</line>
        <line t="M" i="243" b="1" n="1"></line>
    </code>
</fmx>